#if !CITO
using System;
using System.IO;
using System.Text;
#endif

// 
//  Read/Write string and byte arrays 
// 
//namespace SilentOrbit.ProtocolBuffers
//{
public class ProtocolParser
{
    public static string ReadString(CitoStream stream)
    {
        byte[] bytes = ReadBytes(stream);
        return ProtoPlatform.BytesToString(bytes, 0);
    }

    /// <summary>
    /// Reads a length delimited byte array
    /// </summary>
    public static byte[] ReadBytes(CitoStream stream)
    {
        //VarInt length
        int length = ReadUInt32(stream);

        //Bytes
        byte[] buffer = new byte[length];
        int read = 0;
        while (read < length)
        {
            int r = stream.Read(buffer, read, length - read);
            if (r == 0)
#if !CITO
                throw new InvalidDataException("Expected " + (length - read) + " got " + read);
#else
            return null;
#endif
            read += r;
        }
        return buffer;
    }

    /// <summary>
    /// Skip the next varint length prefixed bytes.
    /// Alternative to ReadBytes when the data is not of interest.
    /// </summary>
    public static void SkipBytes(CitoStream stream)
    {
        int length = ReadUInt32(stream);
        if (stream.CanSeek())
            stream.Seek(length, CitoSeekOrigin.Current);
        else
            ReadBytes(stream);
    }

    public static void WriteString(CitoStream stream, string val)
    {
        WriteBytes(stream, ProtoPlatform.StringToBytes(val));
    }

    /// <summary>
    /// Writes length delimited byte array
    /// </summary>
    public static void WriteBytes(CitoStream stream, byte[] val)
    {
        WriteUInt32_(stream, ProtoPlatform.ArrayLength(val));
        stream.Write(val, 0, ProtoPlatform.ArrayLength(val));
    }
    //}
    //}

    //
    //  This file contain references on how to write and read
    //  fixed integers and float/double.
    //  
    //using System;
    //using System.IO;

    //namespace SilentOrbit.ProtocolBuffers
    //{
    //public static partial class ProtocolParser
    //{
    //#region Fixed Int, Only for reference

    //#endregion
    //}
    //}

    //
    //  Reader/Writer for field key
    //
    //using System;
    //using System.IO;

    //namespace SilentOrbit.ProtocolBuffers
    //{

    //public static partial class ProtocolParser
    //{

    public static Key ReadKey(CitoStream stream)
    {
        int n = ReadUInt32(stream);
        return Key.Create(n >> 3, (n & 0x07));
    }

    public static Key ReadKey_(byte firstByte, CitoStream stream)
    {
        if (firstByte < 128)
            return Key.Create((firstByte >> 3), (firstByte & 0x07));
        int fieldID = (ReadUInt32(stream) << 4) | ((firstByte >> 3) & 0x0F);
        return Key.Create(fieldID, (firstByte & 0x07));
    }

    public static void WriteKey(CitoStream stream, Key key)
    {
        int n = (key.GetField() << 3) | (key.GetWireType());
        WriteUInt32_(stream, n);
    }

    /// <summary>
    /// Seek past the value for the previously read key.
    /// </summary>
    public static void SkipKey(CitoStream stream, Key key)
    {
        switch (key.GetWireType())
        {
            case Wire.Fixed32:
                stream.Seek(4, CitoSeekOrigin.Current);
                return;
            case Wire.Fixed64:
                stream.Seek(8, CitoSeekOrigin.Current);
                return;
            case Wire.LengthDelimited:
                stream.Seek(ProtocolParser.ReadUInt32(stream), CitoSeekOrigin.Current);
                return;
            case Wire.Varint:
                ProtocolParser.ReadSkipVarInt(stream);
                return;
            default:
#if !CITO
                throw new NotImplementedException("Unknown wire type: " + key.GetWireType());
#else
                return;
#endif
        }
    }

    /// <summary>
    /// Read the value for an unknown key as bytes.
    /// Used to preserve unknown keys during deserialization.
    /// Requires the message option preserveunknown=true.
    /// </summary>
    public static byte[] ReadValueBytes(CitoStream stream, Key key)
    {
        byte[] b;
        int offset = 0;

        switch (key.GetWireType())
        {
            case Wire.Fixed32:
                b = new byte[4];
                while (offset < 4)
                    offset += stream.Read(b, offset, 4 - offset);
                return b;
            case Wire.Fixed64:
                b = new byte[8];
                while (offset < 8)
                    offset += stream.Read(b, offset, 8 - offset);
                return b;
            case Wire.LengthDelimited:
                //Read and include length in value buffer
                int length = ProtocolParser.ReadUInt32(stream);
                CitoMemoryStream ms = new CitoMemoryStream();
                {
                    //TODO: pass b directly to MemoryStream constructor or skip usage of it completely
                    ProtocolParser.WriteUInt32(ms, length);
                    b = new byte[length + ms.Length()];
                    byte[] arr = ms.ToArray();
                    for (int i = 0; i < ProtoPlatform.ArrayLength(arr); i++)
                    {
                        b[i] = arr[i];
                    }
                    offset = ms.Length();
                }

                //Read data into buffer
                while (offset < ProtoPlatform.ArrayLength(b))
                    offset += stream.Read(b, offset, ProtoPlatform.ArrayLength(b) - offset);
                return b;
            case Wire.Varint:
                return ProtocolParser.ReadVarIntBytes(stream);
            default:
#if !CITO
                throw new NotImplementedException("Unknown wire type: " + key.GetWireType());
#else
                return null;
#endif
        }
    }

    static void WriteUInt32(CitoMemoryStream ms, int length)
    {
#if !CITO
        throw new NotImplementedException();
#endif
    }
    //}
    //}

    //using System;
    //using System.IO;

    //namespace SilentOrbit.ProtocolBuffers
    //{
    //public static partial class ProtocolParser
    //{
    /// <summary>
    /// Reads past a varint for an unknown field.
    /// </summary>
    public static void ReadSkipVarInt(CitoStream stream)
    {
        while (true)
        {
            int b = stream.ReadByte();
            if (b < 0)
#if !CITO
                throw new IOException("Stream ended too early");
#else
                return;
#endif

            if ((b & 0x80) == 0)
                return; //end of varint
        }
    }

    public static byte[] ReadVarIntBytes(CitoStream stream)
    {
        byte[] buffer = new byte[10];
        int offset = 0;
        while (true)
        {
            int b = stream.ReadByte();
            if (b < 0)
#if !CITO
                throw new IOException("Stream ended too early");
#else
                return null;
#endif
#if !CITO
            buffer[offset] = (byte)b;
#else
            buffer[offset] = b.LowByte;
#endif
            offset += 1;
            if ((b & 0x80) == 0)
                break; //end of varint
            if (offset >= ProtoPlatform.ArrayLength(buffer))
#if !CITO
                throw new InvalidDataException("VarInt too long, more than 10 bytes");
#else
                return null;
#endif
        }
        byte[] ret = new byte[offset];
        for (int i = 0; i < offset; i++)
        {
            ret[i] = buffer[i];
        }
        return ret;
    }
    //#region VarInt: int32, uint32, sint32
    //[Obsolete("Use (int)ReadUInt64(stream); //yes 64")]
    /// <summary>
    /// Since the int32 format is inefficient for negative numbers we have avoided to implement it.
    /// The same functionality can be achieved using: (int)ReadUInt64(stream);
    /// </summary>
    public static int ReadInt32(CitoStream stream)
    {
        return ReadUInt64(stream);
    }

    //[Obsolete("Use WriteUInt64(stream, (ulong)val); //yes 64, negative numbers are encoded that way")]
    /// <summary>
    /// Since the int32 format is inefficient for negative numbers we have avoided to imlplement.
    /// The same functionality can be achieved using: WriteUInt64(stream, (uint)val);
    /// Note that 64 must always be used for int32 to generate the ten byte wire format.
    /// </summary>
    public static void WriteInt32(CitoStream stream, int val)
    {
        //signed varint is always encoded as 64 but values!
        WriteUInt64(stream, val);
    }

    /// <summary>
    /// Zig-zag signed VarInt format
    /// </summary>
    public static int ReadZInt32(CitoStream stream)
    {
        int val = ReadUInt32(stream);
        return (val >> 1) ^ ((val << 31) >> 31);
    }

    /// <summary>
    /// Zig-zag signed VarInt format
    /// </summary>
    public static void WriteZInt32(CitoStream stream, int val)
    {
        WriteUInt32_(stream, ((val << 1) ^ (val >> 31)));
    }

    /// <summary>
    /// Unsigned VarInt format
    /// Do not use to read int32, use ReadUint64 for that.
    /// </summary>
    public static int ReadUInt32(CitoStream stream)
    {
        int b;
        int val = 0;

        for (int n = 0; n < 5; n++)
        {
            b = stream.ReadByte();
            if (b < 0)
#if !CITO
                throw new IOException("Stream ended too early");
#else
                return 0;
#endif

            //Check that it fits in 32 bits
            if ((n == 4) && (b & 0xF0) != 0)
#if !CITO
                throw new InvalidDataException("Got larger VarInt than 32bit unsigned");
#else
                return 0;
#endif
            //End of check

            if ((b & 0x80) == 0)
                return val | b << (7 * n);

            val |= (b & 0x7F) << (7 * n);
        }

#if !CITO
        throw new InvalidDataException("Got larger VarInt than 32bit unsigned");
#else
        return 0;
#endif
    }

    /// <summary>
    /// Unsigned VarInt format
    /// </summary>
    public static void WriteUInt32_(CitoStream stream, int val)
    {
        byte[] buffer = new byte[5];
        int count = 0;

        while (true)
        {
#if !CITO
            buffer[count] = (byte)(val & 0x7F);
#else
            buffer[count] = (val & 0x7F).LowByte;
#endif
            val = val >> 7;
            if (val == 0)
                break;

            buffer[count] |= 0x80;

            count += 1;
        }

        stream.Write(buffer, 0, count + 1);
    }
    //#endregion
    //#region VarInt: int64, UInt64, SInt64
    //[Obsolete("Use (long)ReadUInt64(stream); instead")]
    /// <summary>
    /// Since the int64 format is inefficient for negative numbers we have avoided to implement it.
    /// The same functionality can be achieved using: (long)ReadUInt64(stream);
    /// </summary>
    public static int ReadInt64(CitoStream stream)
    {
        return ReadUInt64(stream);
    }

    //[Obsolete("Use WriteUInt64 (stream, (ulong)val); instead")]
    /// <summary>
    /// Since the int64 format is inefficient for negative numbers we have avoided to implement.
    /// The same functionality can be achieved using: WriteUInt64 (stream, (ulong)val);
    /// </summary>
    public static void WriteInt64(CitoStream stream, int val)
    {
        WriteUInt64(stream, val);
    }

    /// <summary>
    /// Zig-zag signed VarInt format
    /// </summary>
    public static int ReadZInt64(CitoStream stream)
    {
        int val = ReadUInt64(stream);
        return (val >> 1) ^ ((val << 63) >> 63);
    }

    /// <summary>
    /// Zig-zag signed VarInt format
    /// </summary>
    public static void WriteZInt64(CitoStream stream, int val)
    {
        WriteUInt64(stream, ((val << 1) ^ (val >> 63)));
    }

    /// <summary>
    /// Unsigned VarInt format
    /// </summary>
    public static int ReadUInt64(CitoStream stream)
    {
        int b;
        int val = 0;

        for (int n = 0; n < 10; n++)
        {
            b = stream.ReadByte();
            if (b < 0)
#if !CITO
                throw new IOException("Stream ended too early");
#else
                return 0;
#endif

            //Check that it fits in 64 bits
            if ((n == 9) && (b & 0xFE) != 0)
#if !CITO
                throw new InvalidDataException("Got larger VarInt than 64 bit unsigned");
#else
                return 0;
#endif
            //End of check

            if ((b & 0x80) == 0)
                //return val | (ulong)b << (7 * n);
                return val | b << (7 * n);

            //val |= (ulong)(b & 0x7F) << (7 * n);
            val |= (b & 0x7F) << (7 * n);
        }
#if !CITO
        throw new InvalidDataException("Got larger VarInt than 64 bit unsigned");
#else
        return 0;
#endif
    }

    /// <summary>
    /// Unsigned VarInt format
    /// </summary>
    public static void WriteUInt64(CitoStream stream, int val)
    {
        byte[] buffer = new byte[10];
        int count = 0;

        while (true)
        {
#if !CITO
            buffer[count] = (byte)(val & 0x7F);
#else
            buffer[count] = (val & 0x7F).LowByte;
#endif
            val = ProtoPlatform.logical_right_shift(val, 7);
            if (val == 0)
                break;

            buffer[count] |= 0x80;

            count += 1;
        }

        stream.Write(buffer, 0, count + 1);
    }
    //#endregion
    //#region Varint: bool
    public static bool ReadBool(CitoStream stream)
    {
        int b = stream.ReadByte();
        if (b < 0)
#if !CITO
            throw new IOException("Stream ended too early");
#else
            return false;
#endif
        if (b == 1)
            return true;
        if (b == 0)
            return false;
#if !CITO
        throw new InvalidDataException("Invalid boolean value");
#else
        return false;
#endif
    }

    public static void WriteBool(CitoStream stream, bool val)
    {
        byte ret = 0;
        if (val)
        {
            ret = 1;
        }
        stream.WriteByte(ret);
    }
    //#endregion
}
//}

///// <summary>
///// Wrapper for streams that does not support the Position property
///// </summary>
//public class StreamRead : Stream
//{
//    Stream stream;

//    /// <summary>
//    /// Bytes left to read
//    /// </summary>
//    public int BytesRead { get; private set; }

//    /// <summary>
//    /// Define how many bytes are allowed to read
//    /// </summary>
//    /// <param name='baseStream'>
//    /// Base stream.
//    /// </param>
//    /// <param name='maxLength'>
//    /// Max length allowed to read from the stream.
//    /// </param>
//    public StreamRead(Stream baseStream)
//    {
//        this.stream = baseStream;
//    }

//    public override void Flush()
//    {
//        throw new NotImplementedException();
//    }

//    public override int Read(byte[] buffer, int offset, int count)
//    {
//        int read = stream.Read(buffer, offset, count);
//        BytesRead += read;
//        return read;
//    }

//    public override int ReadByte()
//    {
//        int b = stream.ReadByte();
//        BytesRead += 1;
//        return b;
//    }

//    public override long Seek(long offset, SeekOrigin origin)
//    {
//        throw new NotImplementedException();
//    }

//    public override void SetLength(long value)
//    {
//        throw new NotImplementedException();
//    }

//    public override void Write(byte[] buffer, int offset, int count)
//    {
//        throw new NotImplementedException();
//    }

//    public override bool CanRead
//    {
//        get
//        {
//            return true;
//        }
//    }

//    public override bool CanSeek
//    {
//        get
//        {
//            return false;
//        }
//    }

//    public override bool CanWrite
//    {
//        get
//        {
//            return false;
//        }
//    }

//    public override long Length
//    {
//        get
//        {
//            return stream.Length;
//        }
//    }

//    public override long Position
//    {
//        get
//        {
//            return this.BytesRead;
//        }
//        set
//        {
//            throw new NotImplementedException();
//        }
//    }
//}


public class Wire
{
    public const int Varint = 0;
    //int32, int64, UInt32, UInt64, SInt32, SInt64, bool, enum
    public const int Fixed64 = 1;
    //fixed64, sfixed64, double
    public const int LengthDelimited = 2;
    //string, bytes, embedded messages, packed repeated fields
    //Start = 3,        //  groups (deprecated)
    //End = 4,      //  groups (deprecated)
    public const int Fixed32 = 5;
    //32-bit    fixed32, SFixed32, float
}

public class Key
{
    int Field;
    public int GetField() { return Field; }
    public void SetField(int value) { Field = value; }

    int WireType;
    public int GetWireType() { return WireType; }
    public void SetWireType(int value) { WireType = value; }

    public static Key Create(int field, int wireType)
    {
        Key k = new Key();
        k.Field = field;
        k.WireType = wireType;
        return k;
    }

    //public override string ToString()
    //{
    //    return string.Format("[Key: {0}, {1}]", Field, WireType);
    //}
}

/// <summary>
/// Storage of unknown fields
/// </summary>
public class KeyValue
{
    Key Key_;

    byte[] Value;

    public static KeyValue Create(Key key, byte[] value)
    {
        KeyValue k = new KeyValue();
        k.Key_ = key;
        k.Value = value;
        return k;
    }

    //public override string ToString()
    //{
    //    return string.Format("[KeyValue: {0}, {1}, {2} bytes]", Key.Field, Key.WireType, Value.Length);
    //}
}

public abstract class CitoStream
{
    public abstract int Read(byte[] buffer, int read, int p);
    public abstract bool CanSeek();
    public abstract void Seek(int length, CitoSeekOrigin seekOrigin);
    public abstract void Write(byte[] val, int p, int p_3);
    public abstract void Seek_(int p, CitoSeekOrigin seekOrigin);
    public abstract int ReadByte();
    public abstract void WriteByte(byte p);
    public abstract int Position();
}

public class CitoMemoryStream : CitoStream
{
    byte[] buffer_;
    int count_;
    int bufferlength;
    int position_;

    public CitoMemoryStream()
    {
        buffer_ = new byte[1];
        count_ = 0;
        bufferlength = 1;
        position_ = 0;
    }

    public int Length()
    {
        return count_;
    }

    public byte[] ToArray()
    {
        return buffer_;
    }

    public static CitoMemoryStream Create(byte[] buffer, int length)
    {
        CitoMemoryStream m = new CitoMemoryStream();
        m.buffer_ = buffer;
        m.count_ = length;
        m.bufferlength = length;
        m.position_ = 0;
        return m;
    }

    public byte[] GetBuffer()
    {
        return buffer_;
    }

    public override int Read(byte[] buffer, int offset, int count)
    {
        for (int i = 0; i < count; i++)
        {
            if (position_ + i >= this.count_)
            {
                position_ += i;
                return i;
            }
            buffer[offset + i] = this.buffer_[position_ + i];
        }
        position_ += count;
        return count;
    }

    public override bool CanSeek()
    {
        return false;
    }

    public override void Seek(int length, CitoSeekOrigin seekOrigin)
    {
        switch (seekOrigin)
        {
            case CitoSeekOrigin.Current:
                position_ += length;
                break;
        }
    }

    public override void Write(byte[] buffer, int offset, int count)
    {
        for (int i = 0; i < count; i++)
        {
            WriteByte(buffer[offset + i]);
        }
    }

    public override void Seek_(int p, CitoSeekOrigin seekOrigin)
    {
    }

    public override int ReadByte()
    {
        if (position_ >= count_)
        {
            return -1;
        }
        return buffer_[position_++];
    }

    public override void WriteByte(byte p)
    {
        if (position_ >= bufferlength)
        {
            byte[] buffer2 = new byte[bufferlength * 2];
            for (int i = 0; i < bufferlength; i++)
            {
                buffer2[i] = buffer_[i];
            }
            buffer_ = buffer2;
            bufferlength = bufferlength * 2;
        }
        buffer_[position_] = p;
        if (position_ == count_)
        {
            count_++;
        }
        position_++;
    }

    public override int Position()
    {
        return position_;
    }
}

public class ProtoPlatform
{
    public static byte[] StringToBytes(string s)
    {
        byte[] b;
#if CITO
#if CS
        native
        {
            b = Encoding.UTF8.GetBytes(s);
            
        }
#elif JS
        native
        {
        // http://stackoverflow.com/a/18729931
	var str = s;
    var utf8 = [];
    for (var i=0; i < str.length; i++) {
        var charcode = str.charCodeAt(i);
        if (charcode < 0x80) utf8.push(charcode);
        else if (charcode < 0x800) {
            utf8.push(0xc0 | (charcode >> 6), 
                      0x80 | (charcode & 0x3f));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
            utf8.push(0xe0 | (charcode >> 12), 
                      0x80 | ((charcode>>6) & 0x3f), 
                      0x80 | (charcode & 0x3f));
        }
        // surrogate pair
        else {
            i++;
            // UTF-16 encodes 0x10000-0x10FFFF by
            // subtracting 0x10000 and splitting the
            // 20 bits of 0x0-0xFFFFF into two halves
            charcode = 0x10000 + (((charcode & 0x3ff)<<10)
                      | (str.charCodeAt(i) & 0x3ff))
            utf8.push(0xf0 | (charcode >>18), 
                      0x80 | ((charcode>>12) & 0x3f), 
                      0x80 | ((charcode>>6) & 0x3f), 
                      0x80 | (charcode & 0x3f));
        }
    }
        b = utf8;
        }
#elif JAVA
        native
        {
            try
            {
                b = s.getBytes("UTF-8");
            }
            catch (Exception e)
            {
                b = null;
            }
        }
#else
        b = null;
#endif
#else
        b = Encoding.UTF8.GetBytes(s);

#endif
        return b;
    }
    public static string BytesToString(byte[] bytes, int length)
    {
        string s;
#if CITO
#if CS
        native
        {
            s = Encoding.UTF8.GetString(bytes);
        }
#elif JS
        native
        {
            var arr = new Uint8Array(bytes.length);
	        for(var i = 0; i < bytes.length;i++)
	        {
		        arr[i] = bytes[i];
	        }
	        var encodedString = String.fromCharCode.apply(null, arr);
	        var decodedString = decodeURIComponent(escape(encodedString));
	        s = decodedString;
        }
#elif JAVA
        native
        {
            try
            {
                s = new String(bytes, "UTF-8");
            }
            catch (Exception e)
            {
                s = null;
            }
        }
#else
        s = null;
#endif
#else
        s = Encoding.UTF8.GetString(bytes);
#endif
        return s;
    }

    public static int ArrayLength(byte[] a)
    {
        int len;
#if CITO
#if CS
        native
        {
            len = a.Length;
        }
#elif JAVA
        native
        {
            len = a.length;
        }
#elif JS
        native
        {
            len = a.length;
        }
#else
        len = 0;
#endif
#else
        len = a.Length;
#endif
        return len;
    }

    public static byte IntToByte(int a)
    {
#if CITO
        return a.LowByte;
#else
        return (byte)a;
#endif
    }

    //http://stackoverflow.com/a/8248336
    public static int logical_right_shift(int x, int n)
    {
        int mask = ~(-1 << n) << (32 - n);
        return ~mask & ((x >> n) | mask);
    }
}

public enum CitoSeekOrigin
{
    Current
}
// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.

public class Packet_ClientIdentification
{
    
    #if !CITO
     internal
    #endif
     string MdProtocolVersion;
    public string GetMdProtocolVersion() { return MdProtocolVersion; } 
    public void SetMdProtocolVersion(string value) { MdProtocolVersion = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Username;
    public string GetUsername() { return Username; } 
    public void SetUsername(string value) { Username = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string VerificationKey;
    public string GetVerificationKey() { return VerificationKey; } 
    public void SetVerificationKey(string value) { VerificationKey = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string ServerPassword;
    public string GetServerPassword() { return ServerPassword; } 
    public void SetServerPassword(string value) { ServerPassword = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_PositionAndOrientation RequestPosition;
    public Packet_PositionAndOrientation GetRequestPosition() { return RequestPosition; } 
    public void SetRequestPosition(Packet_PositionAndOrientation value) { RequestPosition = value; } 
    
    
}

public class Packet_ClientRequestBlob
{
    
    #if !CITO
     internal
    #endif
     Packet_StringList RequestedMd5;
    public Packet_StringList GetRequestedMd5() { return RequestedMd5; } 
    public void SetRequestedMd5(Packet_StringList value) { RequestedMd5 = value; } 
    
    
}

public class Packet_ClientSetBlock
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Mode;
    public int GetMode() { return Mode; } 
    public void SetMode(int value) { Mode = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockType;
    public int GetBlockType() { return BlockType; } 
    public void SetBlockType(int value) { BlockType = value; } 
    
    
    /// <summary> obsolete</summary>
    
    #if !CITO
     internal
    #endif
     int MaterialSlot;
    public int GetMaterialSlot() { return MaterialSlot; } 
    public void SetMaterialSlot(int value) { MaterialSlot = value; } 
    
    
}

public class Packet_ClientFillArea
{
    
    #if !CITO
     internal
    #endif
     int X1;
    public int GetX1() { return X1; } 
    public void SetX1(int value) { X1 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int X2;
    public int GetX2() { return X2; } 
    public void SetX2(int value) { X2 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y1;
    public int GetY1() { return Y1; } 
    public void SetY1(int value) { Y1 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y2;
    public int GetY2() { return Y2; } 
    public void SetY2(int value) { Y2 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z1;
    public int GetZ1() { return Z1; } 
    public void SetZ1(int value) { Z1 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z2;
    public int GetZ2() { return Z2; } 
    public void SetZ2(int value) { Z2 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockType;
    public int GetBlockType() { return BlockType; } 
    public void SetBlockType(int value) { BlockType = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MaterialSlot;
    public int GetMaterialSlot() { return MaterialSlot; } 
    public void SetMaterialSlot(int value) { MaterialSlot = value; } 
    
    
}

public class Packet_ClientPositionAndOrientation
{
    
    #if !CITO
     internal
    #endif
     int PlayerId;
    public int GetPlayerId() { return PlayerId; } 
    public void SetPlayerId(int value) { PlayerId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Heading;
    public int GetHeading() { return Heading; } 
    public void SetHeading(int value) { Heading = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Pitch;
    public int GetPitch() { return Pitch; } 
    public void SetPitch(int value) { Pitch = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Stance;
    public int GetStance() { return Stance; } 
    public void SetStance(int value) { Stance = value; } 
    
    
}

public class Packet_ClientMessage
{
    
    #if !CITO
     internal
    #endif
     string Message;
    public string GetMessage() { return Message; } 
    public void SetMessage(string value) { Message = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int IsTeamchat;
    public int GetIsTeamchat() { return IsTeamchat; } 
    public void SetIsTeamchat(int value) { IsTeamchat = value; } 
    
    
}

public class Packet_ClientInventoryAction
{
    
    #if !CITO
     internal
    #endif
     int Action;
    public int GetAction() { return Action; } 
    public void SetAction(int value) { Action = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_InventoryPosition A;
    public Packet_InventoryPosition GetA() { return A; } 
    public void SetA(Packet_InventoryPosition value) { A = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_InventoryPosition B;
    public Packet_InventoryPosition GetB() { return B; } 
    public void SetB(Packet_InventoryPosition value) { B = value; } 
    
    
}

public class Packet_InventoryPosition
{
    
    #if !CITO
     internal
    #endif
     int Type;
    public int GetType() { return Type; } 
    public void SetType(int value) { Type = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int AreaX;
    public int GetAreaX() { return AreaX; } 
    public void SetAreaX(int value) { AreaX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int AreaY;
    public int GetAreaY() { return AreaY; } 
    public void SetAreaY(int value) { AreaY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MaterialId;
    public int GetMaterialId() { return MaterialId; } 
    public void SetMaterialId(int value) { MaterialId = value; } 
    
    
    /// <summary>WearPlace</summary>
    
    #if !CITO
     internal
    #endif
     int WearPlace;
    public int GetWearPlace() { return WearPlace; } 
    public void SetWearPlace(int value) { WearPlace = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ActiveMaterial;
    public int GetActiveMaterial() { return ActiveMaterial; } 
    public void SetActiveMaterial(int value) { ActiveMaterial = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int GroundPositionX;
    public int GetGroundPositionX() { return GroundPositionX; } 
    public void SetGroundPositionX(int value) { GroundPositionX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int GroundPositionY;
    public int GetGroundPositionY() { return GroundPositionY; } 
    public void SetGroundPositionY(int value) { GroundPositionY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int GroundPositionZ;
    public int GetGroundPositionZ() { return GroundPositionZ; } 
    public void SetGroundPositionZ(int value) { GroundPositionZ = value; } 
    
    
}

public class Packet_PositionAndOrientation
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Heading;
    public int GetHeading() { return Heading; } 
    public void SetHeading(int value) { Heading = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Pitch;
    public int GetPitch() { return Pitch; } 
    public void SetPitch(int value) { Pitch = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Stance;
    public int GetStance() { return Stance; } 
    public void SetStance(int value) { Stance = value; } 
    
    
}

public class Packet_ClientReload
{
}

public class Packet_ClientLeave
{
    
    #if !CITO
     internal
    #endif
     int Reason;
    public int GetReason() { return Reason; } 
    public void SetReason(int value) { Reason = value; } 
    
    
}

/// <summary>
/// <para>Temporary, for client-side health.</para>
/// <para>Todo fix because it allows cheating.</para>
/// </summary>
public class Packet_ClientHealth
{
    
    #if !CITO
     internal
    #endif
     int CurrentHealth;
    public int GetCurrentHealth() { return CurrentHealth; } 
    public void SetCurrentHealth(int value) { CurrentHealth = value; } 
    
    
}

public class Packet_ClientOxygen
{
    
    #if !CITO
     internal
    #endif
     int CurrentOxygen;
    public int GetCurrentOxygen() { return CurrentOxygen; } 
    public void SetCurrentOxygen(int value) { CurrentOxygen = value; } 
    
    
}

public class Packet_ClientDialogClick
{
    
    #if !CITO
     internal
    #endif
     string WidgetId;
    public string GetWidgetId() { return WidgetId; } 
    public void SetWidgetId(string value) { WidgetId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string[] TextBoxValue;
    public string[] GetTextBoxValue() { return TextBoxValue; } 
    public void SetTextBoxValue(string[] value, int count, int length) { TextBoxValue = value; TextBoxValueCount = count; TextBoxValueLength = length; } 
    
    #if !CITO
     internal
    #endif
     int TextBoxValueCount;
    public int GetTextBoxValueCount() { return TextBoxValueCount; } 
    
    #if !CITO
     internal
    #endif
     int TextBoxValueLength;
    public int GetTextBoxValueLength() { return TextBoxValueLength; } 
    public void TextBoxValueAdd(string value){if(TextBoxValueCount >= TextBoxValueLength)
    {
    string[] TextBoxValue2 = new string[TextBoxValueLength*2];
    TextBoxValueLength = TextBoxValueLength*2;
    for(int i=0;i<TextBoxValueCount;i++)
    {
    TextBoxValue2[i] = TextBoxValue[i];
    }
    TextBoxValue=TextBoxValue2;
    }
    TextBoxValue[TextBoxValueCount] = value;
    TextBoxValueCount++;
    }
    
    
}

public class Packet_ClientPingReply
{
}

public class Packet_ClientCraft
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int RecipeId;
    public int GetRecipeId() { return RecipeId; } 
    public void SetRecipeId(int value) { RecipeId = value; } 
    
    
}

public class Packet_ClientShot
{
    
    #if !CITO
     internal
    #endif
     int FromX;
    public int GetFromX() { return FromX; } 
    public void SetFromX(int value) { FromX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int FromY;
    public int GetFromY() { return FromY; } 
    public void SetFromY(int value) { FromY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int FromZ;
    public int GetFromZ() { return FromZ; } 
    public void SetFromZ(int value) { FromZ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ToX;
    public int GetToX() { return ToX; } 
    public void SetToX(int value) { ToX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ToY;
    public int GetToY() { return ToY; } 
    public void SetToY(int value) { ToY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ToZ;
    public int GetToZ() { return ToZ; } 
    public void SetToZ(int value) { ToZ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int WeaponBlock;
    public int GetWeaponBlock() { return WeaponBlock; } 
    public void SetWeaponBlock(int value) { WeaponBlock = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int HitPlayer;
    public int GetHitPlayer() { return HitPlayer; } 
    public void SetHitPlayer(int value) { HitPlayer = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int IsHitHead;
    public int GetIsHitHead() { return IsHitHead; } 
    public void SetIsHitHead(int value) { IsHitHead = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ExplodesAfter;
    public int GetExplodesAfter() { return ExplodesAfter; } 
    public void SetExplodesAfter(int value) { ExplodesAfter = value; } 
    
    
}

public class Packet_ClientSpecialKey
{
    
    #if !CITO
     internal
    #endif
     int Key_;
    public int GetKey_() { return Key_; } 
    public void SetKey_(int value) { Key_ = value; } 
    
    
}

public class Packet_ClientActiveMaterialSlot
{
    
    #if !CITO
     internal
    #endif
     int ActiveMaterialSlot;
    public int GetActiveMaterialSlot() { return ActiveMaterialSlot; } 
    public void SetActiveMaterialSlot(int value) { ActiveMaterialSlot = value; } 
    
    
}

public class Packet_ClientDeath
{
    
    #if !CITO
     internal
    #endif
     int Reason;
    public int GetReason() { return Reason; } 
    public void SetReason(int value) { Reason = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SourcePlayer;
    public int GetSourcePlayer() { return SourcePlayer; } 
    public void SetSourcePlayer(int value) { SourcePlayer = value; } 
    
    
}

public class Packet_ClientServerQuery
{
}

public class Packet_ClientGameResolution
{
    
    #if !CITO
     internal
    #endif
     int Width;
    public int GetWidth() { return Width; } 
    public void SetWidth(int value) { Width = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Height;
    public int GetHeight() { return Height; } 
    public void SetHeight(int value) { Height = value; } 
    
    
}

public class Packet_Client
{
    
    #if !CITO
     internal
    #endif
     int Id;
    public int GetId() { return Id; } 
    public void SetId(int value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientIdentification Identification;
    public Packet_ClientIdentification GetIdentification() { return Identification; } 
    public void SetIdentification(Packet_ClientIdentification value) { Identification = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientSetBlock SetBlock;
    public Packet_ClientSetBlock GetSetBlock() { return SetBlock; } 
    public void SetSetBlock(Packet_ClientSetBlock value) { SetBlock = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientFillArea FillArea;
    public Packet_ClientFillArea GetFillArea() { return FillArea; } 
    public void SetFillArea(Packet_ClientFillArea value) { FillArea = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientPositionAndOrientation PositionAndOrientation;
    public Packet_ClientPositionAndOrientation GetPositionAndOrientation() { return PositionAndOrientation; } 
    public void SetPositionAndOrientation(Packet_ClientPositionAndOrientation value) { PositionAndOrientation = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientMessage Message;
    public Packet_ClientMessage GetMessage() { return Message; } 
    public void SetMessage(Packet_ClientMessage value) { Message = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientCraft Craft;
    public Packet_ClientCraft GetCraft() { return Craft; } 
    public void SetCraft(Packet_ClientCraft value) { Craft = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientRequestBlob RequestBlob;
    public Packet_ClientRequestBlob GetRequestBlob() { return RequestBlob; } 
    public void SetRequestBlob(Packet_ClientRequestBlob value) { RequestBlob = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientInventoryAction InventoryAction;
    public Packet_ClientInventoryAction GetInventoryAction() { return InventoryAction; } 
    public void SetInventoryAction(Packet_ClientInventoryAction value) { InventoryAction = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientHealth Health;
    public Packet_ClientHealth GetHealth() { return Health; } 
    public void SetHealth(Packet_ClientHealth value) { Health = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientPingReply PingReply;
    public Packet_ClientPingReply GetPingReply() { return PingReply; } 
    public void SetPingReply(Packet_ClientPingReply value) { PingReply = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientDialogClick DialogClick_;
    public Packet_ClientDialogClick GetDialogClick_() { return DialogClick_; } 
    public void SetDialogClick_(Packet_ClientDialogClick value) { DialogClick_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientShot Shot;
    public Packet_ClientShot GetShot() { return Shot; } 
    public void SetShot(Packet_ClientShot value) { Shot = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientSpecialKey SpecialKey_;
    public Packet_ClientSpecialKey GetSpecialKey_() { return SpecialKey_; } 
    public void SetSpecialKey_(Packet_ClientSpecialKey value) { SpecialKey_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientActiveMaterialSlot ActiveMaterialSlot;
    public Packet_ClientActiveMaterialSlot GetActiveMaterialSlot() { return ActiveMaterialSlot; } 
    public void SetActiveMaterialSlot(Packet_ClientActiveMaterialSlot value) { ActiveMaterialSlot = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientLeave Leave;
    public Packet_ClientLeave GetLeave() { return Leave; } 
    public void SetLeave(Packet_ClientLeave value) { Leave = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientReload Reload;
    public Packet_ClientReload GetReload() { return Reload; } 
    public void SetReload(Packet_ClientReload value) { Reload = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientOxygen Oxygen;
    public Packet_ClientOxygen GetOxygen() { return Oxygen; } 
    public void SetOxygen(Packet_ClientOxygen value) { Oxygen = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientDeath Death;
    public Packet_ClientDeath GetDeath() { return Death; } 
    public void SetDeath(Packet_ClientDeath value) { Death = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientServerQuery Query;
    public Packet_ClientServerQuery GetQuery() { return Query; } 
    public void SetQuery(Packet_ClientServerQuery value) { Query = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientGameResolution GameResolution;
    public Packet_ClientGameResolution GetGameResolution() { return GameResolution; } 
    public void SetGameResolution(Packet_ClientGameResolution value) { GameResolution = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ClientEntityInteraction EntityInteraction;
    public Packet_ClientEntityInteraction GetEntityInteraction() { return EntityInteraction; } 
    public void SetEntityInteraction(Packet_ClientEntityInteraction value) { EntityInteraction = value; } 
    
    
}

public class Packet_ClientEntityInteraction
{
    
    #if !CITO
     internal
    #endif
     int EntityId;
    public int GetEntityId() { return EntityId; } 
    public void SetEntityId(int value) { EntityId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int InteractionType;
    public int GetInteractionType() { return InteractionType; } 
    public void SetInteractionType(int value) { InteractionType = value; } 
    
    
}

public class Packet_SoundSet
{
    
    #if !CITO
     internal
    #endif
     string[] Walk;
    public string[] GetWalk() { return Walk; } 
    public void SetWalk(string[] value, int count, int length) { Walk = value; WalkCount = count; WalkLength = length; } 
    
    #if !CITO
     internal
    #endif
     int WalkCount;
    public int GetWalkCount() { return WalkCount; } 
    
    #if !CITO
     internal
    #endif
     int WalkLength;
    public int GetWalkLength() { return WalkLength; } 
    public void WalkAdd(string value){if(WalkCount >= WalkLength)
    {
    string[] Walk2 = new string[WalkLength*2];
    WalkLength = WalkLength*2;
    for(int i=0;i<WalkCount;i++)
    {
    Walk2[i] = Walk[i];
    }
    Walk=Walk2;
    }
    Walk[WalkCount] = value;
    WalkCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     string[] Break1;
    public string[] GetBreak1() { return Break1; } 
    public void SetBreak1(string[] value, int count, int length) { Break1 = value; Break1Count = count; Break1Length = length; } 
    
    #if !CITO
     internal
    #endif
     int Break1Count;
    public int GetBreak1Count() { return Break1Count; } 
    
    #if !CITO
     internal
    #endif
     int Break1Length;
    public int GetBreak1Length() { return Break1Length; } 
    public void Break1Add(string value){if(Break1Count >= Break1Length)
    {
    string[] Break12 = new string[Break1Length*2];
    Break1Length = Break1Length*2;
    for(int i=0;i<Break1Count;i++)
    {
    Break12[i] = Break1[i];
    }
    Break1=Break12;
    }
    Break1[Break1Count] = value;
    Break1Count++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     string[] Build;
    public string[] GetBuild() { return Build; } 
    public void SetBuild(string[] value, int count, int length) { Build = value; BuildCount = count; BuildLength = length; } 
    
    #if !CITO
     internal
    #endif
     int BuildCount;
    public int GetBuildCount() { return BuildCount; } 
    
    #if !CITO
     internal
    #endif
     int BuildLength;
    public int GetBuildLength() { return BuildLength; } 
    public void BuildAdd(string value){if(BuildCount >= BuildLength)
    {
    string[] Build2 = new string[BuildLength*2];
    BuildLength = BuildLength*2;
    for(int i=0;i<BuildCount;i++)
    {
    Build2[i] = Build[i];
    }
    Build=Build2;
    }
    Build[BuildCount] = value;
    BuildCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     string[] Clone;
    public string[] GetClone() { return Clone; } 
    public void SetClone(string[] value, int count, int length) { Clone = value; CloneCount = count; CloneLength = length; } 
    
    #if !CITO
     internal
    #endif
     int CloneCount;
    public int GetCloneCount() { return CloneCount; } 
    
    #if !CITO
     internal
    #endif
     int CloneLength;
    public int GetCloneLength() { return CloneLength; } 
    public void CloneAdd(string value){if(CloneCount >= CloneLength)
    {
    string[] Clone2 = new string[CloneLength*2];
    CloneLength = CloneLength*2;
    for(int i=0;i<CloneCount;i++)
    {
    Clone2[i] = Clone[i];
    }
    Clone=Clone2;
    }
    Clone[CloneCount] = value;
    CloneCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     string[] Shoot;
    public string[] GetShoot() { return Shoot; } 
    public void SetShoot(string[] value, int count, int length) { Shoot = value; ShootCount = count; ShootLength = length; } 
    
    #if !CITO
     internal
    #endif
     int ShootCount;
    public int GetShootCount() { return ShootCount; } 
    
    #if !CITO
     internal
    #endif
     int ShootLength;
    public int GetShootLength() { return ShootLength; } 
    public void ShootAdd(string value){if(ShootCount >= ShootLength)
    {
    string[] Shoot2 = new string[ShootLength*2];
    ShootLength = ShootLength*2;
    for(int i=0;i<ShootCount;i++)
    {
    Shoot2[i] = Shoot[i];
    }
    Shoot=Shoot2;
    }
    Shoot[ShootCount] = value;
    ShootCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     string[] ShootEnd;
    public string[] GetShootEnd() { return ShootEnd; } 
    public void SetShootEnd(string[] value, int count, int length) { ShootEnd = value; ShootEndCount = count; ShootEndLength = length; } 
    
    #if !CITO
     internal
    #endif
     int ShootEndCount;
    public int GetShootEndCount() { return ShootEndCount; } 
    
    #if !CITO
     internal
    #endif
     int ShootEndLength;
    public int GetShootEndLength() { return ShootEndLength; } 
    public void ShootEndAdd(string value){if(ShootEndCount >= ShootEndLength)
    {
    string[] ShootEnd2 = new string[ShootEndLength*2];
    ShootEndLength = ShootEndLength*2;
    for(int i=0;i<ShootEndCount;i++)
    {
    ShootEnd2[i] = ShootEnd[i];
    }
    ShootEnd=ShootEnd2;
    }
    ShootEnd[ShootEndCount] = value;
    ShootEndCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     string[] Reload;
    public string[] GetReload() { return Reload; } 
    public void SetReload(string[] value, int count, int length) { Reload = value; ReloadCount = count; ReloadLength = length; } 
    
    #if !CITO
     internal
    #endif
     int ReloadCount;
    public int GetReloadCount() { return ReloadCount; } 
    
    #if !CITO
     internal
    #endif
     int ReloadLength;
    public int GetReloadLength() { return ReloadLength; } 
    public void ReloadAdd(string value){if(ReloadCount >= ReloadLength)
    {
    string[] Reload2 = new string[ReloadLength*2];
    ReloadLength = ReloadLength*2;
    for(int i=0;i<ReloadCount;i++)
    {
    Reload2[i] = Reload[i];
    }
    Reload=Reload2;
    }
    Reload[ReloadCount] = value;
    ReloadCount++;
    }
    
    
}

public class Packet_BlockType
{
    
    #if !CITO
     internal
    #endif
     string TextureIdTop;
    public string GetTextureIdTop() { return TextureIdTop; } 
    public void SetTextureIdTop(string value) { TextureIdTop = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string TextureIdBottom;
    public string GetTextureIdBottom() { return TextureIdBottom; } 
    public void SetTextureIdBottom(string value) { TextureIdBottom = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string TextureIdFront;
    public string GetTextureIdFront() { return TextureIdFront; } 
    public void SetTextureIdFront(string value) { TextureIdFront = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string TextureIdBack;
    public string GetTextureIdBack() { return TextureIdBack; } 
    public void SetTextureIdBack(string value) { TextureIdBack = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string TextureIdLeft;
    public string GetTextureIdLeft() { return TextureIdLeft; } 
    public void SetTextureIdLeft(string value) { TextureIdLeft = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string TextureIdRight;
    public string GetTextureIdRight() { return TextureIdRight; } 
    public void SetTextureIdRight(string value) { TextureIdRight = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string TextureIdForInventory;
    public string GetTextureIdForInventory() { return TextureIdForInventory; } 
    public void SetTextureIdForInventory(string value) { TextureIdForInventory = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int DrawType;
    public int GetDrawType() { return DrawType; } 
    public void SetDrawType(int value) { DrawType = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int WalkableType;
    public int GetWalkableType() { return WalkableType; } 
    public void SetWalkableType(int value) { WalkableType = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Rail;
    public int GetRail() { return Rail; } 
    public void SetRail(int value) { Rail = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int WalkSpeedFloat;
    public int GetWalkSpeedFloat() { return WalkSpeedFloat; } 
    public void SetWalkSpeedFloat(int value) { WalkSpeedFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool IsSlipperyWalk;
    public bool GetIsSlipperyWalk() { return IsSlipperyWalk; } 
    public void SetIsSlipperyWalk(bool value) { IsSlipperyWalk = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_SoundSet Sounds;
    public Packet_SoundSet GetSounds() { return Sounds; } 
    public void SetSounds(Packet_SoundSet value) { Sounds = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int LightRadius;
    public int GetLightRadius() { return LightRadius; } 
    public void SetLightRadius(int value) { LightRadius = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int StartInventoryAmount;
    public int GetStartInventoryAmount() { return StartInventoryAmount; } 
    public void SetStartInventoryAmount(int value) { StartInventoryAmount = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Strength;
    public int GetStrength() { return Strength; } 
    public void SetStrength(int value) { Strength = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Name;
    public string GetName() { return Name; } 
    public void SetName(string value) { Name = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool IsBuildable;
    public bool GetIsBuildable() { return IsBuildable; } 
    public void SetIsBuildable(bool value) { IsBuildable = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool IsUsable;
    public bool GetIsUsable() { return IsUsable; } 
    public void SetIsUsable(bool value) { IsUsable = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool IsTool;
    public bool GetIsTool() { return IsTool; } 
    public void SetIsTool(bool value) { IsTool = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Handimage;
    public string GetHandimage() { return Handimage; } 
    public void SetHandimage(string value) { Handimage = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool IsPistol;
    public bool GetIsPistol() { return IsPistol; } 
    public void SetIsPistol(bool value) { IsPistol = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int AimRadiusFloat;
    public int GetAimRadiusFloat() { return AimRadiusFloat; } 
    public void SetAimRadiusFloat(int value) { AimRadiusFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int RecoilFloat;
    public int GetRecoilFloat() { return RecoilFloat; } 
    public void SetRecoilFloat(int value) { RecoilFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int DelayFloat;
    public int GetDelayFloat() { return DelayFloat; } 
    public void SetDelayFloat(int value) { DelayFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BulletsPerShotFloat;
    public int GetBulletsPerShotFloat() { return BulletsPerShotFloat; } 
    public void SetBulletsPerShotFloat(int value) { BulletsPerShotFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int WalkSpeedWhenUsedFloat;
    public int GetWalkSpeedWhenUsedFloat() { return WalkSpeedWhenUsedFloat; } 
    public void SetWalkSpeedWhenUsedFloat(int value) { WalkSpeedWhenUsedFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool IronSightsEnabled;
    public bool GetIronSightsEnabled() { return IronSightsEnabled; } 
    public void SetIronSightsEnabled(bool value) { IronSightsEnabled = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int IronSightsMoveSpeedFloat;
    public int GetIronSightsMoveSpeedFloat() { return IronSightsMoveSpeedFloat; } 
    public void SetIronSightsMoveSpeedFloat(int value) { IronSightsMoveSpeedFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string IronSightsImage;
    public string GetIronSightsImage() { return IronSightsImage; } 
    public void SetIronSightsImage(string value) { IronSightsImage = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int IronSightsAimRadiusFloat;
    public int GetIronSightsAimRadiusFloat() { return IronSightsAimRadiusFloat; } 
    public void SetIronSightsAimRadiusFloat(int value) { IronSightsAimRadiusFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int IronSightsFovFloat;
    public int GetIronSightsFovFloat() { return IronSightsFovFloat; } 
    public void SetIronSightsFovFloat(int value) { IronSightsFovFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int AmmoMagazine;
    public int GetAmmoMagazine() { return AmmoMagazine; } 
    public void SetAmmoMagazine(int value) { AmmoMagazine = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int AmmoTotal;
    public int GetAmmoTotal() { return AmmoTotal; } 
    public void SetAmmoTotal(int value) { AmmoTotal = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ReloadDelayFloat;
    public int GetReloadDelayFloat() { return ReloadDelayFloat; } 
    public void SetReloadDelayFloat(int value) { ReloadDelayFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ExplosionRangeFloat;
    public int GetExplosionRangeFloat() { return ExplosionRangeFloat; } 
    public void SetExplosionRangeFloat(int value) { ExplosionRangeFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ExplosionTimeFloat;
    public int GetExplosionTimeFloat() { return ExplosionTimeFloat; } 
    public void SetExplosionTimeFloat(int value) { ExplosionTimeFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ProjectileSpeedFloat;
    public int GetProjectileSpeedFloat() { return ProjectileSpeedFloat; } 
    public void SetProjectileSpeedFloat(int value) { ProjectileSpeedFloat = value; } 
    
    
    /// <summary> 0 is infinite</summary>
    
    #if !CITO
     internal
    #endif
     bool ProjectileBounce;
    public bool GetProjectileBounce() { return ProjectileBounce; } 
    public void SetProjectileBounce(bool value) { ProjectileBounce = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int DamageBodyFloat;
    public int GetDamageBodyFloat() { return DamageBodyFloat; } 
    public void SetDamageBodyFloat(int value) { DamageBodyFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int DamageHeadFloat;
    public int GetDamageHeadFloat() { return DamageHeadFloat; } 
    public void SetDamageHeadFloat(int value) { DamageHeadFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int PistolType;
    public int GetPistolType() { return PistolType; } 
    public void SetPistolType(int value) { PistolType = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int DamageToPlayer;
    public int GetDamageToPlayer() { return DamageToPlayer; } 
    public void SetDamageToPlayer(int value) { DamageToPlayer = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int WhenPlacedGetsConvertedTo;
    public int GetWhenPlacedGetsConvertedTo() { return WhenPlacedGetsConvertedTo; } 
    public void SetWhenPlacedGetsConvertedTo(int value) { WhenPlacedGetsConvertedTo = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int PickDistanceWhenUsedFloat;
    public int GetPickDistanceWhenUsedFloat() { return PickDistanceWhenUsedFloat; } 
    public void SetPickDistanceWhenUsedFloat(int value) { PickDistanceWhenUsedFloat = value; } 
    
    
}

public class Packet_ServerIdentification
{
    
    #if !CITO
     internal
    #endif
     string MdProtocolVersion;
    public string GetMdProtocolVersion() { return MdProtocolVersion; } 
    public void SetMdProtocolVersion(string value) { MdProtocolVersion = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int AssignedClientId;
    public int GetAssignedClientId() { return AssignedClientId; } 
    public void SetAssignedClientId(int value) { AssignedClientId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string ServerName;
    public string GetServerName() { return ServerName; } 
    public void SetServerName(string value) { ServerName = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string ServerMotd;
    public string GetServerMotd() { return ServerMotd; } 
    public void SetServerMotd(string value) { ServerMotd = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MapSizeX;
    public int GetMapSizeX() { return MapSizeX; } 
    public void SetMapSizeX(int value) { MapSizeX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MapSizeY;
    public int GetMapSizeY() { return MapSizeY; } 
    public void SetMapSizeY(int value) { MapSizeY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MapSizeZ;
    public int GetMapSizeZ() { return MapSizeZ; } 
    public void SetMapSizeZ(int value) { MapSizeZ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int DisableShadows;
    public int GetDisableShadows() { return DisableShadows; } 
    public void SetDisableShadows(int value) { DisableShadows = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int PlayerAreaSize;
    public int GetPlayerAreaSize() { return PlayerAreaSize; } 
    public void SetPlayerAreaSize(int value) { PlayerAreaSize = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int RenderHint_;
    public int GetRenderHint_() { return RenderHint_; } 
    public void SetRenderHint_(int value) { RenderHint_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_StringList RequiredBlobMd5;
    public Packet_StringList GetRequiredBlobMd5() { return RequiredBlobMd5; } 
    public void SetRequiredBlobMd5(Packet_StringList value) { RequiredBlobMd5 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_StringList RequiredBlobName;
    public Packet_StringList GetRequiredBlobName() { return RequiredBlobName; } 
    public void SetRequiredBlobName(Packet_StringList value) { RequiredBlobName = value; } 
    
    
}

public class Packet_StringList
{
    
    #if !CITO
     internal
    #endif
     string[] Items;
    public string[] GetItems() { return Items; } 
    public void SetItems(string[] value, int count, int length) { Items = value; ItemsCount = count; ItemsLength = length; } 
    
    #if !CITO
     internal
    #endif
     int ItemsCount;
    public int GetItemsCount() { return ItemsCount; } 
    
    #if !CITO
     internal
    #endif
     int ItemsLength;
    public int GetItemsLength() { return ItemsLength; } 
    public void ItemsAdd(string value){if(ItemsCount >= ItemsLength)
    {
    string[] Items2 = new string[ItemsLength*2];
    ItemsLength = ItemsLength*2;
    for(int i=0;i<ItemsCount;i++)
    {
    Items2[i] = Items[i];
    }
    Items=Items2;
    }
    Items[ItemsCount] = value;
    ItemsCount++;
    }
    
    
}

public class Packet_IntString
{
    
    #if !CITO
     internal
    #endif
     int Key_;
    public int GetKey_() { return Key_; } 
    public void SetKey_(int value) { Key_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Value_;
    public string GetValue_() { return Value_; } 
    public void SetValue_(string value) { Value_ = value; } 
    
    
}

public class Packet_ServerPlayerSpawnPosition
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
}

public class Packet_ServerLevelInitialize
{
}

public class Packet_ServerBlobInitialize
{
    /// <summary>
    /// <para>[ProtoMember(1, IsRequired = false)]</para>
    /// <para>optional byte[] hash; //todo, currently ignored.</para>
    /// </summary>
    
    #if !CITO
     internal
    #endif
     string Name;
    public string GetName() { return Name; } 
    public void SetName(string value) { Name = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Md5;
    public string GetMd5() { return Md5; } 
    public void SetMd5(string value) { Md5 = value; } 
    
    
}

public class Packet_ServerBlobPart
{
    
    #if !CITO
     internal
    #endif
     byte[] Data;
    public byte[] GetData() { return Data; } 
    public void SetData(byte[] value) { Data = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Islastpart;
    public int GetIslastpart() { return Islastpart; } 
    public void SetIslastpart(int value) { Islastpart = value; } 
    
    
}

public class Packet_ServerBlobFinalize
{
}

public class Packet_ServerBlockTypes
{
}

public class Packet_ServerBlockType
{
    
    #if !CITO
     internal
    #endif
     int Id;
    public int GetId() { return Id; } 
    public void SetId(int value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_BlockType Blocktype;
    public Packet_BlockType GetBlocktype() { return Blocktype; } 
    public void SetBlocktype(Packet_BlockType value) { Blocktype = value; } 
    
    
}

public class Packet_ServerSunLevels
{
    
    #if !CITO
     internal
    #endif
     int[] Sunlevels;
    public int[] GetSunlevels() { return Sunlevels; } 
    public void SetSunlevels(int[] value, int count, int length) { Sunlevels = value; SunlevelsCount = count; SunlevelsLength = length; } 
    
    #if !CITO
     internal
    #endif
     int SunlevelsCount;
    public int GetSunlevelsCount() { return SunlevelsCount; } 
    
    #if !CITO
     internal
    #endif
     int SunlevelsLength;
    public int GetSunlevelsLength() { return SunlevelsLength; } 
    public void SunlevelsAdd(int value){if(SunlevelsCount >= SunlevelsLength)
    {
    int[] Sunlevels2 = new int[SunlevelsLength*2];
    SunlevelsLength = SunlevelsLength*2;
    for(int i=0;i<SunlevelsCount;i++)
    {
    Sunlevels2[i] = Sunlevels[i];
    }
    Sunlevels=Sunlevels2;
    }
    Sunlevels[SunlevelsCount] = value;
    SunlevelsCount++;
    }
    
    
}

public class Packet_ServerLightLevels
{
    
    #if !CITO
     internal
    #endif
     int[] Lightlevels;
    public int[] GetLightlevels() { return Lightlevels; } 
    public void SetLightlevels(int[] value, int count, int length) { Lightlevels = value; LightlevelsCount = count; LightlevelsLength = length; } 
    
    #if !CITO
     internal
    #endif
     int LightlevelsCount;
    public int GetLightlevelsCount() { return LightlevelsCount; } 
    
    #if !CITO
     internal
    #endif
     int LightlevelsLength;
    public int GetLightlevelsLength() { return LightlevelsLength; } 
    public void LightlevelsAdd(int value){if(LightlevelsCount >= LightlevelsLength)
    {
    int[] Lightlevels2 = new int[LightlevelsLength*2];
    LightlevelsLength = LightlevelsLength*2;
    for(int i=0;i<LightlevelsCount;i++)
    {
    Lightlevels2[i] = Lightlevels[i];
    }
    Lightlevels=Lightlevels2;
    }
    Lightlevels[LightlevelsCount] = value;
    LightlevelsCount++;
    }
    
    
}

public class Packet_ServerCraftingRecipes
{
    
    #if !CITO
     internal
    #endif
     Packet_CraftingRecipe[] CraftingRecipes;
    public Packet_CraftingRecipe[] GetCraftingRecipes() { return CraftingRecipes; } 
    public void SetCraftingRecipes(Packet_CraftingRecipe[] value, int count, int length) { CraftingRecipes = value; CraftingRecipesCount = count; CraftingRecipesLength = length; } 
    
    #if !CITO
     internal
    #endif
     int CraftingRecipesCount;
    public int GetCraftingRecipesCount() { return CraftingRecipesCount; } 
    
    #if !CITO
     internal
    #endif
     int CraftingRecipesLength;
    public int GetCraftingRecipesLength() { return CraftingRecipesLength; } 
    public void CraftingRecipesAdd(Packet_CraftingRecipe value){if(CraftingRecipesCount >= CraftingRecipesLength)
    {
    Packet_CraftingRecipe[] CraftingRecipes2 = new Packet_CraftingRecipe[CraftingRecipesLength*2];
    CraftingRecipesLength = CraftingRecipesLength*2;
    for(int i=0;i<CraftingRecipesCount;i++)
    {
    CraftingRecipes2[i] = CraftingRecipes[i];
    }
    CraftingRecipes=CraftingRecipes2;
    }
    CraftingRecipes[CraftingRecipesCount] = value;
    CraftingRecipesCount++;
    }
    
    
}

public class Packet_Ingredient
{
    
    #if !CITO
     internal
    #endif
     int Type;
    public int GetType() { return Type; } 
    public void SetType(int value) { Type = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Amount;
    public int GetAmount() { return Amount; } 
    public void SetAmount(int value) { Amount = value; } 
    
    
}

public class Packet_CraftingRecipe
{
    
    #if !CITO
     internal
    #endif
     Packet_Ingredient[] Ingredients;
    public Packet_Ingredient[] GetIngredients() { return Ingredients; } 
    public void SetIngredients(Packet_Ingredient[] value, int count, int length) { Ingredients = value; IngredientsCount = count; IngredientsLength = length; } 
    
    #if !CITO
     internal
    #endif
     int IngredientsCount;
    public int GetIngredientsCount() { return IngredientsCount; } 
    
    #if !CITO
     internal
    #endif
     int IngredientsLength;
    public int GetIngredientsLength() { return IngredientsLength; } 
    public void IngredientsAdd(Packet_Ingredient value){if(IngredientsCount >= IngredientsLength)
    {
    Packet_Ingredient[] Ingredients2 = new Packet_Ingredient[IngredientsLength*2];
    IngredientsLength = IngredientsLength*2;
    for(int i=0;i<IngredientsCount;i++)
    {
    Ingredients2[i] = Ingredients[i];
    }
    Ingredients=Ingredients2;
    }
    Ingredients[IngredientsCount] = value;
    IngredientsCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Ingredient Output;
    public Packet_Ingredient GetOutput() { return Output; } 
    public void SetOutput(Packet_Ingredient value) { Output = value; } 
    
    
}

public class Packet_ServerLevelProgress
{
    /// <summary>
    /// <para>[ProtoMember(1, IsRequired = false)]</para>
    /// <para>optional byte[] Chunk;</para>
    /// </summary>
    
    #if !CITO
     internal
    #endif
     int PercentComplete;
    public int GetPercentComplete() { return PercentComplete; } 
    public void SetPercentComplete(int value) { PercentComplete = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Status;
    public string GetStatus() { return Status; } 
    public void SetStatus(string value) { Status = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int PercentCompleteSubitem;
    public int GetPercentCompleteSubitem() { return PercentCompleteSubitem; } 
    public void SetPercentCompleteSubitem(int value) { PercentCompleteSubitem = value; } 
    
    
}

public class Packet_ServerLevelFinalize
{
}

public class Packet_ServerSetBlock
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockType;
    public int GetBlockType() { return BlockType; } 
    public void SetBlockType(int value) { BlockType = value; } 
    
    
}

public class Packet_ServerFillArea
{
    
    #if !CITO
     internal
    #endif
     int X1;
    public int GetX1() { return X1; } 
    public void SetX1(int value) { X1 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int X2;
    public int GetX2() { return X2; } 
    public void SetX2(int value) { X2 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y1;
    public int GetY1() { return Y1; } 
    public void SetY1(int value) { Y1 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y2;
    public int GetY2() { return Y2; } 
    public void SetY2(int value) { Y2 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z1;
    public int GetZ1() { return Z1; } 
    public void SetZ1(int value) { Z1 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z2;
    public int GetZ2() { return Z2; } 
    public void SetZ2(int value) { Z2 = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockType;
    public int GetBlockType() { return BlockType; } 
    public void SetBlockType(int value) { BlockType = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockCount;
    public int GetBlockCount() { return BlockCount; } 
    public void SetBlockCount(int value) { BlockCount = value; } 
    
    
}

public class Packet_ServerFillAreaLimit
{
    
    #if !CITO
     internal
    #endif
     int Limit;
    public int GetLimit() { return Limit; } 
    public void SetLimit(int value) { Limit = value; } 
    
    
}

public class Packet_ServerFreemove
{
    
    #if !CITO
     internal
    #endif
     int IsEnabled;
    public int GetIsEnabled() { return IsEnabled; } 
    public void SetIsEnabled(int value) { IsEnabled = value; } 
    
    
}

public class Packet_ServerMessage
{
    /// <summary> optional int32 playerId = 1;</summary>
    
    #if !CITO
     internal
    #endif
     string Message;
    public string GetMessage() { return Message; } 
    public void SetMessage(string value) { Message = value; } 
    
    
}

public class Packet_ServerDisconnectPlayer
{
    
    #if !CITO
     internal
    #endif
     string DisconnectReason;
    public string GetDisconnectReason() { return DisconnectReason; } 
    public void SetDisconnectReason(string value) { DisconnectReason = value; } 
    
    
}

public class Packet_ServerSound
{
    
    #if !CITO
     internal
    #endif
     string Name;
    public string GetName() { return Name; } 
    public void SetName(string value) { Name = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
}

public class Packet_ServerFollow
{
    
    #if !CITO
     internal
    #endif
     string Client;
    public string GetClient() { return Client; } 
    public void SetClient(string value) { Client = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Tpp;
    public int GetTpp() { return Tpp; } 
    public void SetTpp(int value) { Tpp = value; } 
    
    
}

public class Packet_ServerBullet
{
    
    #if !CITO
     internal
    #endif
     int FromXFloat;
    public int GetFromXFloat() { return FromXFloat; } 
    public void SetFromXFloat(int value) { FromXFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int FromYFloat;
    public int GetFromYFloat() { return FromYFloat; } 
    public void SetFromYFloat(int value) { FromYFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int FromZFloat;
    public int GetFromZFloat() { return FromZFloat; } 
    public void SetFromZFloat(int value) { FromZFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ToXFloat;
    public int GetToXFloat() { return ToXFloat; } 
    public void SetToXFloat(int value) { ToXFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ToYFloat;
    public int GetToYFloat() { return ToYFloat; } 
    public void SetToYFloat(int value) { ToYFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ToZFloat;
    public int GetToZFloat() { return ToZFloat; } 
    public void SetToZFloat(int value) { ToZFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SpeedFloat;
    public int GetSpeedFloat() { return SpeedFloat; } 
    public void SetSpeedFloat(int value) { SpeedFloat = value; } 
    
    
}

public class Packet_ServerProjectile
{
    
    #if !CITO
     internal
    #endif
     int FromXFloat;
    public int GetFromXFloat() { return FromXFloat; } 
    public void SetFromXFloat(int value) { FromXFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int FromYFloat;
    public int GetFromYFloat() { return FromYFloat; } 
    public void SetFromYFloat(int value) { FromYFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int FromZFloat;
    public int GetFromZFloat() { return FromZFloat; } 
    public void SetFromZFloat(int value) { FromZFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int VelocityXFloat;
    public int GetVelocityXFloat() { return VelocityXFloat; } 
    public void SetVelocityXFloat(int value) { VelocityXFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int VelocityYFloat;
    public int GetVelocityYFloat() { return VelocityYFloat; } 
    public void SetVelocityYFloat(int value) { VelocityYFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int VelocityZFloat;
    public int GetVelocityZFloat() { return VelocityZFloat; } 
    public void SetVelocityZFloat(int value) { VelocityZFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockId;
    public int GetBlockId() { return BlockId; } 
    public void SetBlockId(int value) { BlockId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ExplodesAfterFloat;
    public int GetExplodesAfterFloat() { return ExplodesAfterFloat; } 
    public void SetExplodesAfterFloat(int value) { ExplodesAfterFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SourcePlayerID;
    public int GetSourcePlayerID() { return SourcePlayerID; } 
    public void SetSourcePlayerID(int value) { SourcePlayerID = value; } 
    
    
}

public class Packet_ServerExplosion
{
    
    #if !CITO
     internal
    #endif
     int XFloat;
    public int GetXFloat() { return XFloat; } 
    public void SetXFloat(int value) { XFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int YFloat;
    public int GetYFloat() { return YFloat; } 
    public void SetYFloat(int value) { YFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ZFloat;
    public int GetZFloat() { return ZFloat; } 
    public void SetZFloat(int value) { ZFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int IsRelativeToPlayerPosition;
    public int GetIsRelativeToPlayerPosition() { return IsRelativeToPlayerPosition; } 
    public void SetIsRelativeToPlayerPosition(int value) { IsRelativeToPlayerPosition = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int RangeFloat;
    public int GetRangeFloat() { return RangeFloat; } 
    public void SetRangeFloat(int value) { RangeFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int TimeFloat;
    public int GetTimeFloat() { return TimeFloat; } 
    public void SetTimeFloat(int value) { TimeFloat = value; } 
    
    
}

public class Packet_ServerQueryAnswer
{
    
    #if !CITO
     internal
    #endif
     string Name;
    public string GetName() { return Name; } 
    public void SetName(string value) { Name = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string MOTD;
    public string GetMOTD() { return MOTD; } 
    public void SetMOTD(string value) { MOTD = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int PlayerCount;
    public int GetPlayerCount() { return PlayerCount; } 
    public void SetPlayerCount(int value) { PlayerCount = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MaxPlayers;
    public int GetMaxPlayers() { return MaxPlayers; } 
    public void SetMaxPlayers(int value) { MaxPlayers = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string PlayerList;
    public string GetPlayerList() { return PlayerList; } 
    public void SetPlayerList(string value) { PlayerList = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Port;
    public int GetPort() { return Port; } 
    public void SetPort(int value) { Port = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string GameMode;
    public string GetGameMode() { return GameMode; } 
    public void SetGameMode(string value) { GameMode = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool Password;
    public bool GetPassword() { return Password; } 
    public void SetPassword(bool value) { Password = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string PublicHash;
    public string GetPublicHash() { return PublicHash; } 
    public void SetPublicHash(string value) { PublicHash = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string ServerVersion;
    public string GetServerVersion() { return ServerVersion; } 
    public void SetServerVersion(string value) { ServerVersion = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MapSizeX;
    public int GetMapSizeX() { return MapSizeX; } 
    public void SetMapSizeX(int value) { MapSizeX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MapSizeY;
    public int GetMapSizeY() { return MapSizeY; } 
    public void SetMapSizeY(int value) { MapSizeY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MapSizeZ;
    public int GetMapSizeZ() { return MapSizeZ; } 
    public void SetMapSizeZ(int value) { MapSizeZ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     byte[] ServerThumbnail;
    public byte[] GetServerThumbnail() { return ServerThumbnail; } 
    public void SetServerThumbnail(byte[] value) { ServerThumbnail = value; } 
    
    
}

public class Packet_ServerRedirect
{
    
    #if !CITO
     internal
    #endif
     string IP;
    public string GetIP() { return IP; } 
    public void SetIP(string value) { IP = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Port;
    public int GetPort() { return Port; } 
    public void SetPort(int value) { Port = value; } 
    
    
}

public class Packet_Server
{
    
    #if !CITO
     internal
    #endif
     int Id;
    public int GetId() { return Id; } 
    public void SetId(int value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerIdentification Identification;
    public Packet_ServerIdentification GetIdentification() { return Identification; } 
    public void SetIdentification(Packet_ServerIdentification value) { Identification = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerLevelInitialize LevelInitialize;
    public Packet_ServerLevelInitialize GetLevelInitialize() { return LevelInitialize; } 
    public void SetLevelInitialize(Packet_ServerLevelInitialize value) { LevelInitialize = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerLevelProgress LevelDataChunk;
    public Packet_ServerLevelProgress GetLevelDataChunk() { return LevelDataChunk; } 
    public void SetLevelDataChunk(Packet_ServerLevelProgress value) { LevelDataChunk = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerLevelFinalize LevelFinalize;
    public Packet_ServerLevelFinalize GetLevelFinalize() { return LevelFinalize; } 
    public void SetLevelFinalize(Packet_ServerLevelFinalize value) { LevelFinalize = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerSetBlock SetBlock;
    public Packet_ServerSetBlock GetSetBlock() { return SetBlock; } 
    public void SetSetBlock(Packet_ServerSetBlock value) { SetBlock = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerFillArea FillArea;
    public Packet_ServerFillArea GetFillArea() { return FillArea; } 
    public void SetFillArea(Packet_ServerFillArea value) { FillArea = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerFillAreaLimit FillAreaLimit;
    public Packet_ServerFillAreaLimit GetFillAreaLimit() { return FillAreaLimit; } 
    public void SetFillAreaLimit(Packet_ServerFillAreaLimit value) { FillAreaLimit = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerFreemove Freemove;
    public Packet_ServerFreemove GetFreemove() { return Freemove; } 
    public void SetFreemove(Packet_ServerFreemove value) { Freemove = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerMessage Message;
    public Packet_ServerMessage GetMessage() { return Message; } 
    public void SetMessage(Packet_ServerMessage value) { Message = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerDisconnectPlayer DisconnectPlayer;
    public Packet_ServerDisconnectPlayer GetDisconnectPlayer() { return DisconnectPlayer; } 
    public void SetDisconnectPlayer(Packet_ServerDisconnectPlayer value) { DisconnectPlayer = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerChunk Chunk_;
    public Packet_ServerChunk GetChunk_() { return Chunk_; } 
    public void SetChunk_(Packet_ServerChunk value) { Chunk_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerInventory Inventory;
    public Packet_ServerInventory GetInventory() { return Inventory; } 
    public void SetInventory(Packet_ServerInventory value) { Inventory = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerSeason Season;
    public Packet_ServerSeason GetSeason() { return Season; } 
    public void SetSeason(Packet_ServerSeason value) { Season = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerBlobInitialize BlobInitialize;
    public Packet_ServerBlobInitialize GetBlobInitialize() { return BlobInitialize; } 
    public void SetBlobInitialize(Packet_ServerBlobInitialize value) { BlobInitialize = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerBlobPart BlobPart;
    public Packet_ServerBlobPart GetBlobPart() { return BlobPart; } 
    public void SetBlobPart(Packet_ServerBlobPart value) { BlobPart = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerBlobFinalize BlobFinalize;
    public Packet_ServerBlobFinalize GetBlobFinalize() { return BlobFinalize; } 
    public void SetBlobFinalize(Packet_ServerBlobFinalize value) { BlobFinalize = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerHeightmapChunk HeightmapChunk;
    public Packet_ServerHeightmapChunk GetHeightmapChunk() { return HeightmapChunk; } 
    public void SetHeightmapChunk(Packet_ServerHeightmapChunk value) { HeightmapChunk = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerPing Ping;
    public Packet_ServerPing GetPing() { return Ping; } 
    public void SetPing(Packet_ServerPing value) { Ping = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerPlayerPing PlayerPing;
    public Packet_ServerPlayerPing GetPlayerPing() { return PlayerPing; } 
    public void SetPlayerPing(Packet_ServerPlayerPing value) { PlayerPing = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerSound Sound;
    public Packet_ServerSound GetSound() { return Sound; } 
    public void SetSound(Packet_ServerSound value) { Sound = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerPlayerStats PlayerStats;
    public Packet_ServerPlayerStats GetPlayerStats() { return PlayerStats; } 
    public void SetPlayerStats(Packet_ServerPlayerStats value) { PlayerStats = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerMonsters Monster;
    public Packet_ServerMonsters GetMonster() { return Monster; } 
    public void SetMonster(Packet_ServerMonsters value) { Monster = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerPlayerSpawnPosition PlayerSpawnPosition;
    public Packet_ServerPlayerSpawnPosition GetPlayerSpawnPosition() { return PlayerSpawnPosition; } 
    public void SetPlayerSpawnPosition(Packet_ServerPlayerSpawnPosition value) { PlayerSpawnPosition = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerBlockTypes BlockTypes;
    public Packet_ServerBlockTypes GetBlockTypes() { return BlockTypes; } 
    public void SetBlockTypes(Packet_ServerBlockTypes value) { BlockTypes = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerSunLevels SunLevels;
    public Packet_ServerSunLevels GetSunLevels() { return SunLevels; } 
    public void SetSunLevels(Packet_ServerSunLevels value) { SunLevels = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerLightLevels LightLevels;
    public Packet_ServerLightLevels GetLightLevels() { return LightLevels; } 
    public void SetLightLevels(Packet_ServerLightLevels value) { LightLevels = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerCraftingRecipes CraftingRecipes;
    public Packet_ServerCraftingRecipes GetCraftingRecipes() { return CraftingRecipes; } 
    public void SetCraftingRecipes(Packet_ServerCraftingRecipes value) { CraftingRecipes = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerDialog Dialog;
    public Packet_ServerDialog GetDialog() { return Dialog; } 
    public void SetDialog(Packet_ServerDialog value) { Dialog = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerFollow Follow;
    public Packet_ServerFollow GetFollow() { return Follow; } 
    public void SetFollow(Packet_ServerFollow value) { Follow = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerBullet Bullet;
    public Packet_ServerBullet GetBullet() { return Bullet; } 
    public void SetBullet(Packet_ServerBullet value) { Bullet = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerAmmo Ammo;
    public Packet_ServerAmmo GetAmmo() { return Ammo; } 
    public void SetAmmo(Packet_ServerAmmo value) { Ammo = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerBlockType BlockType;
    public Packet_ServerBlockType GetBlockType() { return BlockType; } 
    public void SetBlockType(Packet_ServerBlockType value) { BlockType = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerChunkPart ChunkPart;
    public Packet_ServerChunkPart GetChunkPart() { return ChunkPart; } 
    public void SetChunkPart(Packet_ServerChunkPart value) { ChunkPart = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerExplosion Explosion;
    public Packet_ServerExplosion GetExplosion() { return Explosion; } 
    public void SetExplosion(Packet_ServerExplosion value) { Explosion = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerProjectile Projectile;
    public Packet_ServerProjectile GetProjectile() { return Projectile; } 
    public void SetProjectile(Packet_ServerProjectile value) { Projectile = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerTranslatedString Translation;
    public Packet_ServerTranslatedString GetTranslation() { return Translation; } 
    public void SetTranslation(Packet_ServerTranslatedString value) { Translation = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerQueryAnswer QueryAnswer;
    public Packet_ServerQueryAnswer GetQueryAnswer() { return QueryAnswer; } 
    public void SetQueryAnswer(Packet_ServerQueryAnswer value) { QueryAnswer = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerRedirect Redirect;
    public Packet_ServerRedirect GetRedirect() { return Redirect; } 
    public void SetRedirect(Packet_ServerRedirect value) { Redirect = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntitySpawn EntitySpawn;
    public Packet_ServerEntitySpawn GetEntitySpawn() { return EntitySpawn; } 
    public void SetEntitySpawn(Packet_ServerEntitySpawn value) { EntitySpawn = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityPositionAndOrientation EntityPosition;
    public Packet_ServerEntityPositionAndOrientation GetEntityPosition() { return EntityPosition; } 
    public void SetEntityPosition(Packet_ServerEntityPositionAndOrientation value) { EntityPosition = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityDespawn EntityDespawn;
    public Packet_ServerEntityDespawn GetEntityDespawn() { return EntityDespawn; } 
    public void SetEntityDespawn(Packet_ServerEntityDespawn value) { EntityDespawn = value; } 
    
    
}

public class Packet_ServerEntitySpawn
{
    
    #if !CITO
     internal
    #endif
     int Id;
    public int GetId() { return Id; } 
    public void SetId(int value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntity Entity_;
    public Packet_ServerEntity GetEntity_() { return Entity_; } 
    public void SetEntity_(Packet_ServerEntity value) { Entity_ = value; } 
    
    
}

public class Packet_ServerEntityPositionAndOrientation
{
    
    #if !CITO
     internal
    #endif
     int Id;
    public int GetId() { return Id; } 
    public void SetId(int value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_PositionAndOrientation PositionAndOrientation;
    public Packet_PositionAndOrientation GetPositionAndOrientation() { return PositionAndOrientation; } 
    public void SetPositionAndOrientation(Packet_PositionAndOrientation value) { PositionAndOrientation = value; } 
    
    
}

public class Packet_ServerEntityDespawn
{
    
    #if !CITO
     internal
    #endif
     int Id;
    public int GetId() { return Id; } 
    public void SetId(int value) { Id = value; } 
    
    
}

public class Packet_ServerEntity
{
    
    #if !CITO
     internal
    #endif
     Packet_PositionAndOrientation Position;
    public Packet_PositionAndOrientation GetPosition() { return Position; } 
    public void SetPosition(Packet_PositionAndOrientation value) { Position = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityAnimatedModel DrawModel;
    public Packet_ServerEntityAnimatedModel GetDrawModel() { return DrawModel; } 
    public void SetDrawModel(Packet_ServerEntityAnimatedModel value) { DrawModel = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityDrawName DrawName_;
    public Packet_ServerEntityDrawName GetDrawName_() { return DrawName_; } 
    public void SetDrawName_(Packet_ServerEntityDrawName value) { DrawName_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityDrawText DrawText;
    public Packet_ServerEntityDrawText GetDrawText() { return DrawText; } 
    public void SetDrawText(Packet_ServerEntityDrawText value) { DrawText = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityDrawBlock DrawBlock;
    public Packet_ServerEntityDrawBlock GetDrawBlock() { return DrawBlock; } 
    public void SetDrawBlock(Packet_ServerEntityDrawBlock value) { DrawBlock = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityPush Push;
    public Packet_ServerEntityPush GetPush() { return Push; } 
    public void SetPush(Packet_ServerEntityPush value) { Push = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool Usable;
    public bool GetUsable() { return Usable; } 
    public void SetUsable(bool value) { Usable = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerPlayerStats PlayerStats;
    public Packet_ServerPlayerStats GetPlayerStats() { return PlayerStats; } 
    public void SetPlayerStats(Packet_ServerPlayerStats value) { PlayerStats = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_ServerEntityDrawArea DrawArea;
    public Packet_ServerEntityDrawArea GetDrawArea() { return DrawArea; } 
    public void SetDrawArea(Packet_ServerEntityDrawArea value) { DrawArea = value; } 
    
    
}

public class Packet_ServerEntityDrawArea
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Sizex;
    public int GetSizex() { return Sizex; } 
    public void SetSizex(int value) { Sizex = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Sizey;
    public int GetSizey() { return Sizey; } 
    public void SetSizey(int value) { Sizey = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Sizez;
    public int GetSizez() { return Sizez; } 
    public void SetSizez(int value) { Sizez = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int VisibleToClientId;
    public int GetVisibleToClientId() { return VisibleToClientId; } 
    public void SetVisibleToClientId(int value) { VisibleToClientId = value; } 
    
    
}

public class Packet_ServerEntityAnimatedModel
{
    
    #if !CITO
     internal
    #endif
     string Model_;
    public string GetModel_() { return Model_; } 
    public void SetModel_(string value) { Model_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Texture_;
    public string GetTexture_() { return Texture_; } 
    public void SetTexture_(string value) { Texture_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int EyeHeight;
    public int GetEyeHeight() { return EyeHeight; } 
    public void SetEyeHeight(int value) { EyeHeight = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ModelHeight;
    public int GetModelHeight() { return ModelHeight; } 
    public void SetModelHeight(int value) { ModelHeight = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int DownloadSkin;
    public int GetDownloadSkin() { return DownloadSkin; } 
    public void SetDownloadSkin(int value) { DownloadSkin = value; } 
    
    
}

public class Packet_ServerEntityDrawName
{
    
    #if !CITO
     internal
    #endif
     string Name;
    public string GetName() { return Name; } 
    public void SetName(string value) { Name = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool OnlyWhenSelected;
    public bool GetOnlyWhenSelected() { return OnlyWhenSelected; } 
    public void SetOnlyWhenSelected(bool value) { OnlyWhenSelected = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     bool ClientAutoComplete;
    public bool GetClientAutoComplete() { return ClientAutoComplete; } 
    public void SetClientAutoComplete(bool value) { ClientAutoComplete = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Color;
    public string GetColor() { return Color; } 
    public void SetColor(string value) { Color = value; } 
    
    
}

public class Packet_ServerEntityDrawText
{
    
    #if !CITO
     internal
    #endif
     string Text;
    public string GetText() { return Text; } 
    public void SetText(string value) { Text = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Dx;
    public int GetDx() { return Dx; } 
    public void SetDx(int value) { Dx = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Dy;
    public int GetDy() { return Dy; } 
    public void SetDy(int value) { Dy = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Dz;
    public int GetDz() { return Dz; } 
    public void SetDz(int value) { Dz = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Rotx;
    public int GetRotx() { return Rotx; } 
    public void SetRotx(int value) { Rotx = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Roty;
    public int GetRoty() { return Roty; } 
    public void SetRoty(int value) { Roty = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Rotz;
    public int GetRotz() { return Rotz; } 
    public void SetRotz(int value) { Rotz = value; } 
    
    
}

public class Packet_ServerEntityDrawBlock
{
    
    #if !CITO
     internal
    #endif
     int BlockType;
    public int GetBlockType() { return BlockType; } 
    public void SetBlockType(int value) { BlockType = value; } 
    
    
}

public class Packet_ServerEntityPush
{
    
    #if !CITO
     internal
    #endif
     int RangeFloat;
    public int GetRangeFloat() { return RangeFloat; } 
    public void SetRangeFloat(int value) { RangeFloat = value; } 
    
    
}

public class Packet_IntInt
{
    
    #if !CITO
     internal
    #endif
     int Key_;
    public int GetKey_() { return Key_; } 
    public void SetKey_(int value) { Key_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Value_;
    public int GetValue_() { return Value_; } 
    public void SetValue_(int value) { Value_ = value; } 
    
    
}

public class Packet_ServerAmmo
{
    
    #if !CITO
     internal
    #endif
     Packet_IntInt[] TotalAmmo;
    public Packet_IntInt[] GetTotalAmmo() { return TotalAmmo; } 
    public void SetTotalAmmo(Packet_IntInt[] value, int count, int length) { TotalAmmo = value; TotalAmmoCount = count; TotalAmmoLength = length; } 
    
    #if !CITO
     internal
    #endif
     int TotalAmmoCount;
    public int GetTotalAmmoCount() { return TotalAmmoCount; } 
    
    #if !CITO
     internal
    #endif
     int TotalAmmoLength;
    public int GetTotalAmmoLength() { return TotalAmmoLength; } 
    public void TotalAmmoAdd(Packet_IntInt value){if(TotalAmmoCount >= TotalAmmoLength)
    {
    Packet_IntInt[] TotalAmmo2 = new Packet_IntInt[TotalAmmoLength*2];
    TotalAmmoLength = TotalAmmoLength*2;
    for(int i=0;i<TotalAmmoCount;i++)
    {
    TotalAmmo2[i] = TotalAmmo[i];
    }
    TotalAmmo=TotalAmmo2;
    }
    TotalAmmo[TotalAmmoCount] = value;
    TotalAmmoCount++;
    }
    
    
}

public class Packet_ServerChunkPart
{
    
    #if !CITO
     internal
    #endif
     byte[] CompressedChunkPart;
    public byte[] GetCompressedChunkPart() { return CompressedChunkPart; } 
    public void SetCompressedChunkPart(byte[] value) { CompressedChunkPart = value; } 
    
    
}

public class Packet_ServerChunk
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Z;
    public int GetZ() { return Z; } 
    public void SetZ(int value) { Z = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SizeX;
    public int GetSizeX() { return SizeX; } 
    public void SetSizeX(int value) { SizeX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SizeY;
    public int GetSizeY() { return SizeY; } 
    public void SetSizeY(int value) { SizeY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SizeZ;
    public int GetSizeZ() { return SizeZ; } 
    public void SetSizeZ(int value) { SizeZ = value; } 
    
    
}

/// <summary>
/// <para>needed for drawing shadows.</para>
/// <para>sent before any chunks or blocks in the column.</para>
/// </summary>
public class Packet_ServerHeightmapChunk
{
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SizeX;
    public int GetSizeX() { return SizeX; } 
    public void SetSizeX(int value) { SizeX = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SizeY;
    public int GetSizeY() { return SizeY; } 
    public void SetSizeY(int value) { SizeY = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     byte[] CompressedHeightmap;
    public byte[] GetCompressedHeightmap() { return CompressedHeightmap; } 
    public void SetCompressedHeightmap(byte[] value) { CompressedHeightmap = value; } 
    
    
}

public class Packet_ServerInventory
{
    
    #if !CITO
     internal
    #endif
     Packet_Inventory Inventory;
    public Packet_Inventory GetInventory() { return Inventory; } 
    public void SetInventory(Packet_Inventory value) { Inventory = value; } 
    
    
}

public class Packet_ServerPlayerStats
{
    
    #if !CITO
     internal
    #endif
     int CurrentHealth;
    public int GetCurrentHealth() { return CurrentHealth; } 
    public void SetCurrentHealth(int value) { CurrentHealth = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MaxHealth;
    public int GetMaxHealth() { return MaxHealth; } 
    public void SetMaxHealth(int value) { MaxHealth = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int CurrentOxygen;
    public int GetCurrentOxygen() { return CurrentOxygen; } 
    public void SetCurrentOxygen(int value) { CurrentOxygen = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MaxOxygen;
    public int GetMaxOxygen() { return MaxOxygen; } 
    public void SetMaxOxygen(int value) { MaxOxygen = value; } 
    
    
}

public class Packet_ServerMonsters
{
    
    #if !CITO
     internal
    #endif
     Packet_ServerMonster[] Monsters;
    public Packet_ServerMonster[] GetMonsters() { return Monsters; } 
    public void SetMonsters(Packet_ServerMonster[] value, int count, int length) { Monsters = value; MonstersCount = count; MonstersLength = length; } 
    
    #if !CITO
     internal
    #endif
     int MonstersCount;
    public int GetMonstersCount() { return MonstersCount; } 
    
    #if !CITO
     internal
    #endif
     int MonstersLength;
    public int GetMonstersLength() { return MonstersLength; } 
    public void MonstersAdd(Packet_ServerMonster value){if(MonstersCount >= MonstersLength)
    {
    Packet_ServerMonster[] Monsters2 = new Packet_ServerMonster[MonstersLength*2];
    MonstersLength = MonstersLength*2;
    for(int i=0;i<MonstersCount;i++)
    {
    Monsters2[i] = Monsters[i];
    }
    Monsters=Monsters2;
    }
    Monsters[MonstersCount] = value;
    MonstersCount++;
    }
    
    
}

public class Packet_ServerMonster
{
    
    #if !CITO
     internal
    #endif
     int Id;
    public int GetId() { return Id; } 
    public void SetId(int value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int MonsterType;
    public int GetMonsterType() { return MonsterType; } 
    public void SetMonsterType(int value) { MonsterType = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_PositionAndOrientation PositionAndOrientation;
    public Packet_PositionAndOrientation GetPositionAndOrientation() { return PositionAndOrientation; } 
    public void SetPositionAndOrientation(Packet_PositionAndOrientation value) { PositionAndOrientation = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Health;
    public int GetHealth() { return Health; } 
    public void SetHealth(int value) { Health = value; } 
    
    
}

public class Packet_ServerSeason
{
    /// <summary>optional int32 Season;</summary>
    
    #if !CITO
     internal
    #endif
     int Hour;
    public int GetHour() { return Hour; } 
    public void SetHour(int value) { Hour = value; } 
    
    
    /// <summary>1-24*4</summary>
    
    #if !CITO
     internal
    #endif
     int DayNightCycleSpeedup;
    public int GetDayNightCycleSpeedup() { return DayNightCycleSpeedup; } 
    public void SetDayNightCycleSpeedup(int value) { DayNightCycleSpeedup = value; } 
    
    
    /// <summary>used for predicting sun speed.</summary>
    
    #if !CITO
     internal
    #endif
     int Moon;
    public int GetMoon() { return Moon; } 
    public void SetMoon(int value) { Moon = value; } 
    
    
}

public class Packet_ServerDialog
{
    
    #if !CITO
     internal
    #endif
     string DialogId;
    public string GetDialogId() { return DialogId; } 
    public void SetDialogId(string value) { DialogId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Dialog Dialog;
    public Packet_Dialog GetDialog() { return Dialog; } 
    public void SetDialog(Packet_Dialog value) { Dialog = value; } 
    
    
}

public class Packet_ServerPing
{
}

public class Packet_ServerPlayerPing
{
    
    #if !CITO
     internal
    #endif
     int ClientId;
    public int GetClientId() { return ClientId; } 
    public void SetClientId(int value) { ClientId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Ping;
    public int GetPing() { return Ping; } 
    public void SetPing(int value) { Ping = value; } 
    
    
}

public class Packet_ServerTranslatedString
{
    
    #if !CITO
     internal
    #endif
     string Lang;
    public string GetLang() { return Lang; } 
    public void SetLang(string value) { Lang = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Id;
    public string GetId() { return Id; } 
    public void SetId(string value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Translation;
    public string GetTranslation() { return Translation; } 
    public void SetTranslation(string value) { Translation = value; } 
    
    
}

public class Packet_Inventory
{
    
    #if !CITO
     internal
    #endif
     Packet_Item MainArmor;
    public Packet_Item GetMainArmor() { return MainArmor; } 
    public void SetMainArmor(Packet_Item value) { MainArmor = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Item Boots;
    public Packet_Item GetBoots() { return Boots; } 
    public void SetBoots(Packet_Item value) { Boots = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Item Helmet;
    public Packet_Item GetHelmet() { return Helmet; } 
    public void SetHelmet(Packet_Item value) { Helmet = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Item Gauntlet;
    public Packet_Item GetGauntlet() { return Gauntlet; } 
    public void SetGauntlet(Packet_Item value) { Gauntlet = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_PositionItem[] Items;
    public Packet_PositionItem[] GetItems() { return Items; } 
    public void SetItems(Packet_PositionItem[] value, int count, int length) { Items = value; ItemsCount = count; ItemsLength = length; } 
    
    #if !CITO
     internal
    #endif
     int ItemsCount;
    public int GetItemsCount() { return ItemsCount; } 
    
    #if !CITO
     internal
    #endif
     int ItemsLength;
    public int GetItemsLength() { return ItemsLength; } 
    public void ItemsAdd(Packet_PositionItem value){if(ItemsCount >= ItemsLength)
    {
    Packet_PositionItem[] Items2 = new Packet_PositionItem[ItemsLength*2];
    ItemsLength = ItemsLength*2;
    for(int i=0;i<ItemsCount;i++)
    {
    Items2[i] = Items[i];
    }
    Items=Items2;
    }
    Items[ItemsCount] = value;
    ItemsCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Item DragDropItem;
    public Packet_Item GetDragDropItem() { return DragDropItem; } 
    public void SetDragDropItem(Packet_Item value) { DragDropItem = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Item[] RightHand;
    public Packet_Item[] GetRightHand() { return RightHand; } 
    public void SetRightHand(Packet_Item[] value, int count, int length) { RightHand = value; RightHandCount = count; RightHandLength = length; } 
    
    #if !CITO
     internal
    #endif
     int RightHandCount;
    public int GetRightHandCount() { return RightHandCount; } 
    
    #if !CITO
     internal
    #endif
     int RightHandLength;
    public int GetRightHandLength() { return RightHandLength; } 
    public void RightHandAdd(Packet_Item value){if(RightHandCount >= RightHandLength)
    {
    Packet_Item[] RightHand2 = new Packet_Item[RightHandLength*2];
    RightHandLength = RightHandLength*2;
    for(int i=0;i<RightHandCount;i++)
    {
    RightHand2[i] = RightHand[i];
    }
    RightHand=RightHand2;
    }
    RightHand[RightHandCount] = value;
    RightHandCount++;
    }
    
    
}

public class Packet_Item
{
    
    #if !CITO
     internal
    #endif
     int ItemClass;
    public int GetItemClass() { return ItemClass; } 
    public void SetItemClass(int value) { ItemClass = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string ItemId;
    public string GetItemId() { return ItemId; } 
    public void SetItemId(string value) { ItemId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockId;
    public int GetBlockId() { return BlockId; } 
    public void SetBlockId(int value) { BlockId = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int BlockCount;
    public int GetBlockCount() { return BlockCount; } 
    public void SetBlockCount(int value) { BlockCount = value; } 
    
    
}

public class Packet_PositionItem
{
    
    #if !CITO
     internal
    #endif
     string Key_;
    public string GetKey_() { return Key_; } 
    public void SetKey_(string value) { Key_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     Packet_Item Value_;
    public Packet_Item GetValue_() { return Value_; } 
    public void SetValue_(Packet_Item value) { Value_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
}

public class Packet_Dialog
{
    
    #if !CITO
     internal
    #endif
     Packet_Widget[] Widgets;
    public Packet_Widget[] GetWidgets() { return Widgets; } 
    public void SetWidgets(Packet_Widget[] value, int count, int length) { Widgets = value; WidgetsCount = count; WidgetsLength = length; } 
    
    #if !CITO
     internal
    #endif
     int WidgetsCount;
    public int GetWidgetsCount() { return WidgetsCount; } 
    
    #if !CITO
     internal
    #endif
     int WidgetsLength;
    public int GetWidgetsLength() { return WidgetsLength; } 
    public void WidgetsAdd(Packet_Widget value){if(WidgetsCount >= WidgetsLength)
    {
    Packet_Widget[] Widgets2 = new Packet_Widget[WidgetsLength*2];
    WidgetsLength = WidgetsLength*2;
    for(int i=0;i<WidgetsCount;i++)
    {
    Widgets2[i] = Widgets[i];
    }
    Widgets=Widgets2;
    }
    Widgets[WidgetsCount] = value;
    WidgetsCount++;
    }
    
    
    
    #if !CITO
     internal
    #endif
     int Width;
    public int GetWidth() { return Width; } 
    public void SetWidth(int value) { Width = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Height_;
    public int GetHeight_() { return Height_; } 
    public void SetHeight_(int value) { Height_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int IsModal;
    public int GetIsModal() { return IsModal; } 
    public void SetIsModal(int value) { IsModal = value; } 
    
    
}

public class Packet_Widget
{
    
    #if !CITO
     internal
    #endif
     string Id;
    public string GetId() { return Id; } 
    public void SetId(string value) { Id = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Click;
    public int GetClick() { return Click; } 
    public void SetClick(int value) { Click = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int X;
    public int GetX() { return X; } 
    public void SetX(int value) { X = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Y;
    public int GetY() { return Y; } 
    public void SetY(int value) { Y = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Width;
    public int GetWidth() { return Width; } 
    public void SetWidth(int value) { Width = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Height_;
    public int GetHeight_() { return Height_; } 
    public void SetHeight_(int value) { Height_ = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Text;
    public string GetText() { return Text; } 
    public void SetText(string value) { Text = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int ClickKey;
    public int GetClickKey() { return ClickKey; } 
    public void SetClickKey(int value) { ClickKey = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     string Image;
    public string GetImage() { return Image; } 
    public void SetImage(string value) { Image = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Color;
    public int GetColor() { return Color; } 
    public void SetColor(int value) { Color = value; } 
    
    
    /// <summary>white</summary>
    
    #if !CITO
     internal
    #endif
     Packet_DialogFont Font;
    public Packet_DialogFont GetFont() { return Font; } 
    public void SetFont(Packet_DialogFont value) { Font = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int Type;
    public int GetType() { return Type; } 
    public void SetType(int value) { Type = value; } 
    
    
}

public class Packet_DialogFont
{
    
    #if !CITO
     internal
    #endif
     string FamilyName;
    public string GetFamilyName() { return FamilyName; } 
    public void SetFamilyName(string value) { FamilyName = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int SizeFloat;
    public int GetSizeFloat() { return SizeFloat; } 
    public void SetSizeFloat(int value) { SizeFloat = value; } 
    
    
    
    #if !CITO
     internal
    #endif
     int FontStyle;
    public int GetFontStyle() { return FontStyle; } 
    public void SetFontStyle(int value) { FontStyle = value; } 
    
    
}

public class Packet_ClientIdEnum
{
    public const int PlayerIdentification = 0;
    public const int PingReply = 1;
    public const int SetBlock = 5;
    public const int FillArea = 510;
    public const int PositionandOrientation = 8;
    public const int Craft = 9;
    public const int Message = 13;
    public const int DialogClick = 14;
    public const int RequestBlob = 50;
    public const int InventoryAction = 51;
    public const int Health = 52;
    public const int MonsterHit = 53;
    public const int Shot = 54;
    public const int SpecialKey = 55;
    public const int ActiveMaterialSlot = 56;
    public const int Leave = 57;
    public const int Reload = 58;
    public const int Oxygen = 59;
    public const int Death = 60;
    public const int EntityInteraction = 61;
    public const int ServerQuery = 64;
    public const int GameResolution = 10;
    public const int ExtendedPacketCommand = 100;
}


public class Packet_InventoryActionTypeEnum
{
    public const int Click = 0;
    public const int WearItem = 1;
    public const int MoveToInventory = 2;
}


public class Packet_InventoryPositionTypeEnum
{
    public const int MainArea = 0;
    public const int Ground = 1;
    public const int MaterialSelector = 2;
    public const int WearPlace = 3;
}


public class Packet_BlockSetModeEnum
{
    public const int Destroy = 0;
    public const int Create = 1;
    public const int Use = 2;
    /// <summary>open doors, use crafting table, etc.</summary>
    public const int UseWithTool = 3;
}


public class Packet_LeaveReasonEnum
{
    public const int Leave = 0;
    public const int Crash = 1;
}


public class Packet_SpecialKeyEnum
{
    public const int Respawn = 0;
    public const int SetSpawn = 1;
    public const int TabPlayerList = 2;
    public const int SelectTeam = 3;
}


public class Packet_DeathReasonEnum
{
    public const int FallDamage = 0;
    public const int BlockDamage = 1;
    public const int Drowning = 2;
    public const int Explosion = 3;
}


public class Packet_EntityInteractionTypeEnum
{
    public const int Use = 0;
    public const int Hit = 1;
}


public class Packet_DrawTypeEnum
{
    public const int Empty = 0;
    public const int Solid = 1;
    public const int Transparent = 2;
    public const int Fluid = 3;
    public const int Torch = 4;
    public const int Plant = 5;
    public const int OpenDoorLeft = 6;
    public const int OpenDoorRight = 7;
    public const int ClosedDoor = 8;
    public const int Ladder = 9;
    public const int Fence = 10;
    public const int HalfHeight = 11;
    public const int Flat = 12;
    public const int Cactus = 13;
}


public class Packet_WalkableTypeEnum
{
    public const int Empty = 0;
    public const int Fluid = 1;
    public const int Solid = 2;
}


public class Packet_PistolTypeEnum
{
    public const int Normal = 0;
    public const int Grenade = 1;
}


public class Packet_ServerIdEnum
{
    public const int ServerIdentification = 0;
    public const int Ping = 1;
    public const int PlayerPing = 111;
    public const int LevelInitialize = 2;
    public const int LevelDataChunk = 3;
    public const int LevelFinalize = 4;
    public const int SetBlock = 6;
    public const int FillArea = 61;
    public const int FillAreaLimit = 62;
    public const int Message = 13;
    public const int DisconnectPlayer = 14;
    public const int Chunk_ = 15;
    public const int FiniteInventory = 16;
    public const int Season = 17;
    public const int BlobInitialize = 18;
    public const int BlobPart = 19;
    public const int BlobFinalize = 20;
    public const int HeightmapChunk = 21;
    public const int Sound = 22;
    public const int PlayerStats = 23;
    public const int Monster = 24;
    public const int ActiveMonsters = 25;
    public const int PlayerSpawnPosition = 26;
    public const int BlockTypes = 27;
    public const int SunLevels = 28;
    public const int LightLevels = 29;
    public const int CraftingRecipes = 30;
    public const int RemoveMonsters = 50;
    public const int Freemove = 51;
    public const int Dialog = 52;
    public const int Follow = 53;
    public const int Bullet = 54;
    public const int Ammo = 55;
    public const int BlockType = 56;
    public const int ChunkPart = 57;
    public const int Explosion = 58;
    public const int Projectile = 59;
    public const int Translation = 60;
    public const int QueryAnswer = 64;
    public const int ServerRedirect = 65;
    public const int EntitySpawn = 66;
    public const int EntityPosition = 67;
    public const int EntityDespawn = 68;
    public const int ExtendedPacketCommand = 100;
    public const int ExtendedPacketTick = 101;
}


public class Packet_ItemClassEnum
{
    public const int Block = 0;
    public const int Weapon = 1;
    public const int MainArmor = 2;
    public const int Boots = 3;
    public const int Helmet = 4;
    public const int Gauntlet = 5;
    public const int Shield = 6;
    public const int Other = 7;
}


public class Packet_WidgetTypeEnum
{
    public const int Image = 0;
    public const int Text = 1;
    public const int TextBox = 2;
}


public class Packet_DialogFontStyleEnum
{
    public const int Regular = 0;
    public const int Bold = 1;
    public const int Italic = 2;
    public const int Underline = 4;
    public const int Strikeout = 8;
}


// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.

public class Packet_ClientIdentificationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientIdentification DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientIdentification instance = new Packet_ClientIdentification();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientIdentification DeserializeBuffer(byte[] buffer, int length, Packet_ClientIdentification instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientIdentification Deserialize(CitoStream stream, Packet_ClientIdentification instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Username = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.VerificationKey = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerPassword = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.RequestPosition == null)
                    instance.RequestPosition = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.RequestPosition);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientIdentification DeserializeLengthDelimited(CitoStream stream, Packet_ClientIdentification instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Username = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.VerificationKey = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerPassword = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.RequestPosition == null)
                    instance.RequestPosition = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.RequestPosition);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientIdentification DeserializeLength(CitoStream stream, int length, Packet_ClientIdentification instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Username = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.VerificationKey = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerPassword = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.RequestPosition == null)
                    instance.RequestPosition = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.RequestPosition);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientIdentification instance)
    {
        if (instance.MdProtocolVersion != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.MdProtocolVersion));
        }
        if (instance.Username != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Username));
        }
        if (instance.VerificationKey != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.VerificationKey));
        }
        if (instance.ServerPassword != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerPassword));
        }
        if (instance.RequestPosition != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms5, instance.RequestPosition);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientIdentification instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientIdentification instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientRequestBlobSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientRequestBlob DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientRequestBlob instance = new Packet_ClientRequestBlob();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientRequestBlob DeserializeBuffer(byte[] buffer, int length, Packet_ClientRequestBlob instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientRequestBlob Deserialize(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.RequestedMd5 == null)
                    instance.RequestedMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequestedMd5);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientRequestBlob DeserializeLengthDelimited(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.RequestedMd5 == null)
                    instance.RequestedMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequestedMd5);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientRequestBlob DeserializeLength(CitoStream stream, int length, Packet_ClientRequestBlob instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.RequestedMd5 == null)
                    instance.RequestedMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequestedMd5);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        if (instance.RequestedMd5 != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            CitoMemoryStream ms1 = new CitoMemoryStream();
            Packet_StringListSerializer.Serialize(ms1, instance.RequestedMd5);
            // Length delimited byte array
            int ms1Length = ms1.Length();
            ProtocolParser.WriteUInt32_(stream, ms1Length);
            stream.Write(ms1.GetBuffer(), 0, ms1Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientRequestBlob instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientSetBlockSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientSetBlock DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientSetBlock instance = new Packet_ClientSetBlock();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientSetBlock DeserializeBuffer(byte[] buffer, int length, Packet_ClientSetBlock instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSetBlock Deserialize(CitoStream stream, Packet_ClientSetBlock instance)
    {
        instance.Mode = Packet_BlockSetModeEnum.Destroy;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Mode = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSetBlock DeserializeLengthDelimited(CitoStream stream, Packet_ClientSetBlock instance)
    {
        instance.Mode = Packet_BlockSetModeEnum.Destroy;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Mode = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSetBlock DeserializeLength(CitoStream stream, int length, Packet_ClientSetBlock instance)
    {
        instance.Mode = Packet_BlockSetModeEnum.Destroy;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Mode = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientSetBlock instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        if (instance.Mode != Packet_BlockSetModeEnum.Destroy)
        {
            // Key for field: 4, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(32));
            ProtocolParser.WriteUInt64(stream,instance.Mode);
        }
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.MaterialSlot);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientSetBlock instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientSetBlock instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientFillAreaSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientFillArea DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientFillArea instance = new Packet_ClientFillArea();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientFillArea DeserializeBuffer(byte[] buffer, int length, Packet_ClientFillArea instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientFillArea Deserialize(CitoStream stream, Packet_ClientFillArea instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientFillArea DeserializeLengthDelimited(CitoStream stream, Packet_ClientFillArea instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientFillArea DeserializeLength(CitoStream stream, int length, Packet_ClientFillArea instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientFillArea instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X1);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X2);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y1);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y2);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Z1);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Z2);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.MaterialSlot);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientFillArea instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientFillArea instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientPositionAndOrientationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientPositionAndOrientation DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientPositionAndOrientation instance = new Packet_ClientPositionAndOrientation();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientPositionAndOrientation DeserializeBuffer(byte[] buffer, int length, Packet_ClientPositionAndOrientation instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPositionAndOrientation Deserialize(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.PlayerId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPositionAndOrientation DeserializeLengthDelimited(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.PlayerId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPositionAndOrientation DeserializeLength(CitoStream stream, int length, Packet_ClientPositionAndOrientation instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.PlayerId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.PlayerId);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Heading);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Pitch);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.Stance);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientPositionAndOrientation instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientMessageSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientMessage DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientMessage instance = new Packet_ClientMessage();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientMessage DeserializeBuffer(byte[] buffer, int length, Packet_ClientMessage instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientMessage Deserialize(CitoStream stream, Packet_ClientMessage instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.IsTeamchat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientMessage DeserializeLengthDelimited(CitoStream stream, Packet_ClientMessage instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.IsTeamchat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientMessage DeserializeLength(CitoStream stream, int length, Packet_ClientMessage instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.IsTeamchat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientMessage instance)
    {
        if (instance.Message != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Message));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.IsTeamchat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientMessage instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientMessage instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientInventoryActionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientInventoryAction DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientInventoryAction instance = new Packet_ClientInventoryAction();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientInventoryAction DeserializeBuffer(byte[] buffer, int length, Packet_ClientInventoryAction instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientInventoryAction Deserialize(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        instance.Action = Packet_InventoryActionTypeEnum.Click;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Action = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.A == null)
                    instance.A = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.A);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.B == null)
                    instance.B = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.B);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientInventoryAction DeserializeLengthDelimited(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        instance.Action = Packet_InventoryActionTypeEnum.Click;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Action = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.A == null)
                    instance.A = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.A);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.B == null)
                    instance.B = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.B);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientInventoryAction DeserializeLength(CitoStream stream, int length, Packet_ClientInventoryAction instance)
    {
        instance.Action = Packet_InventoryActionTypeEnum.Click;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Action = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.A == null)
                    instance.A = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.A);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.B == null)
                    instance.B = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.B);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        if (instance.Action != Packet_InventoryActionTypeEnum.Click)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Action);
        }
        if (instance.A != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_InventoryPositionSerializer.Serialize(ms2, instance.A);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.B != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_InventoryPositionSerializer.Serialize(ms3, instance.B);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientInventoryAction instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_InventoryPositionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_InventoryPosition DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_InventoryPosition instance = new Packet_InventoryPosition();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_InventoryPosition DeserializeBuffer(byte[] buffer, int length, Packet_InventoryPosition instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_InventoryPosition Deserialize(CitoStream stream, Packet_InventoryPosition instance)
    {
        instance.Type = Packet_InventoryPositionTypeEnum.MainArea;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AreaX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.AreaY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaterialId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.WearPlace = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ActiveMaterial = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.GroundPositionX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.GroundPositionY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.GroundPositionZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_InventoryPosition DeserializeLengthDelimited(CitoStream stream, Packet_InventoryPosition instance)
    {
        instance.Type = Packet_InventoryPositionTypeEnum.MainArea;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AreaX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.AreaY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaterialId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.WearPlace = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ActiveMaterial = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.GroundPositionX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.GroundPositionY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.GroundPositionZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_InventoryPosition DeserializeLength(CitoStream stream, int length, Packet_InventoryPosition instance)
    {
        instance.Type = Packet_InventoryPositionTypeEnum.MainArea;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AreaX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.AreaY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaterialId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.WearPlace = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ActiveMaterial = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.GroundPositionX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.GroundPositionY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.GroundPositionZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_InventoryPosition instance)
    {
        if (instance.Type != Packet_InventoryPositionTypeEnum.MainArea)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Type);
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.AreaX);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.AreaY);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.MaterialId);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.WearPlace);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.ActiveMaterial);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.GroundPositionX);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.GroundPositionY);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.GroundPositionZ);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_InventoryPosition instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_InventoryPosition instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_PositionAndOrientationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_PositionAndOrientation DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_PositionAndOrientation instance = new Packet_PositionAndOrientation();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_PositionAndOrientation DeserializeBuffer(byte[] buffer, int length, Packet_PositionAndOrientation instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_PositionAndOrientation Deserialize(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionAndOrientation DeserializeLengthDelimited(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionAndOrientation DeserializeLength(CitoStream stream, int length, Packet_PositionAndOrientation instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Heading);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Pitch);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Stance);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_PositionAndOrientation instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientReloadSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientReload DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientReload instance = new Packet_ClientReload();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientReload DeserializeBuffer(byte[] buffer, int length, Packet_ClientReload instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientReload Deserialize(CitoStream stream, Packet_ClientReload instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientReload DeserializeLengthDelimited(CitoStream stream, Packet_ClientReload instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientReload DeserializeLength(CitoStream stream, int length, Packet_ClientReload instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientReload instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientReload instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientReload instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientLeaveSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientLeave DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientLeave instance = new Packet_ClientLeave();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientLeave DeserializeBuffer(byte[] buffer, int length, Packet_ClientLeave instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientLeave Deserialize(CitoStream stream, Packet_ClientLeave instance)
    {
        instance.Reason = Packet_LeaveReasonEnum.Leave;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientLeave DeserializeLengthDelimited(CitoStream stream, Packet_ClientLeave instance)
    {
        instance.Reason = Packet_LeaveReasonEnum.Leave;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientLeave DeserializeLength(CitoStream stream, int length, Packet_ClientLeave instance)
    {
        instance.Reason = Packet_LeaveReasonEnum.Leave;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientLeave instance)
    {
        if (instance.Reason != Packet_LeaveReasonEnum.Leave)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Reason);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientLeave instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientLeave instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientHealthSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientHealth DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientHealth instance = new Packet_ClientHealth();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientHealth DeserializeBuffer(byte[] buffer, int length, Packet_ClientHealth instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientHealth Deserialize(CitoStream stream, Packet_ClientHealth instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientHealth DeserializeLengthDelimited(CitoStream stream, Packet_ClientHealth instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientHealth DeserializeLength(CitoStream stream, int length, Packet_ClientHealth instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientHealth instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.CurrentHealth);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientHealth instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientHealth instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientOxygenSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientOxygen DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientOxygen instance = new Packet_ClientOxygen();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientOxygen DeserializeBuffer(byte[] buffer, int length, Packet_ClientOxygen instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientOxygen Deserialize(CitoStream stream, Packet_ClientOxygen instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientOxygen DeserializeLengthDelimited(CitoStream stream, Packet_ClientOxygen instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientOxygen DeserializeLength(CitoStream stream, int length, Packet_ClientOxygen instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientOxygen instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.CurrentOxygen);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientOxygen instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientOxygen instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientDialogClickSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientDialogClick DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientDialogClick instance = new Packet_ClientDialogClick();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientDialogClick DeserializeBuffer(byte[] buffer, int length, Packet_ClientDialogClick instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDialogClick Deserialize(CitoStream stream, Packet_ClientDialogClick instance)
    {
        if (instance.TextBoxValue == null)
        {
            instance.TextBoxValue = new string[1];
            instance.TextBoxValueCount = 0;
            instance.TextBoxValueLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.WidgetId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.TextBoxValueAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDialogClick DeserializeLengthDelimited(CitoStream stream, Packet_ClientDialogClick instance)
    {
        if (instance.TextBoxValue == null)
        {
            instance.TextBoxValue = new string[1];
            instance.TextBoxValueCount = 0;
            instance.TextBoxValueLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.WidgetId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.TextBoxValueAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDialogClick DeserializeLength(CitoStream stream, int length, Packet_ClientDialogClick instance)
    {
        if (instance.TextBoxValue == null)
        {
            instance.TextBoxValue = new string[1];
            instance.TextBoxValueCount = 0;
            instance.TextBoxValueLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.WidgetId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.TextBoxValueAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientDialogClick instance)
    {
        if (instance.WidgetId != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.WidgetId));
        }
        if (instance.TextBoxValue != null)
        {
            for(int k=0; k < instance.TextBoxValueCount; k++)
            {
                string i3 = instance.TextBoxValue[k];
                // Key for field: 3, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(26));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i3));
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientDialogClick instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientDialogClick instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientPingReplySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientPingReply DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientPingReply instance = new Packet_ClientPingReply();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientPingReply DeserializeBuffer(byte[] buffer, int length, Packet_ClientPingReply instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPingReply Deserialize(CitoStream stream, Packet_ClientPingReply instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPingReply DeserializeLengthDelimited(CitoStream stream, Packet_ClientPingReply instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPingReply DeserializeLength(CitoStream stream, int length, Packet_ClientPingReply instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientPingReply instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientPingReply instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientPingReply instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientCraftSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientCraft DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientCraft instance = new Packet_ClientCraft();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientCraft DeserializeBuffer(byte[] buffer, int length, Packet_ClientCraft instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientCraft Deserialize(CitoStream stream, Packet_ClientCraft instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.RecipeId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientCraft DeserializeLengthDelimited(CitoStream stream, Packet_ClientCraft instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.RecipeId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientCraft DeserializeLength(CitoStream stream, int length, Packet_ClientCraft instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.RecipeId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientCraft instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.RecipeId);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientCraft instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientCraft instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientShotSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientShot DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientShot instance = new Packet_ClientShot();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientShot DeserializeBuffer(byte[] buffer, int length, Packet_ClientShot instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientShot Deserialize(CitoStream stream, Packet_ClientShot instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.WeaponBlock = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.HitPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.IsHitHead = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.ExplodesAfter = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientShot DeserializeLengthDelimited(CitoStream stream, Packet_ClientShot instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.WeaponBlock = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.HitPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.IsHitHead = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.ExplodesAfter = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientShot DeserializeLength(CitoStream stream, int length, Packet_ClientShot instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.WeaponBlock = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.HitPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.IsHitHead = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.ExplodesAfter = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientShot instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.FromX);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.FromY);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.FromZ);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.ToX);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.ToY);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.ToZ);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.WeaponBlock);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.HitPlayer);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.IsHitHead);
        // Key for field: 10, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(80));
        ProtocolParser.WriteUInt64(stream,instance.ExplodesAfter);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientShot instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientShot instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientSpecialKeySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientSpecialKey DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientSpecialKey instance = new Packet_ClientSpecialKey();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientSpecialKey DeserializeBuffer(byte[] buffer, int length, Packet_ClientSpecialKey instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSpecialKey Deserialize(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        instance.Key_ = Packet_SpecialKeyEnum.Respawn;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSpecialKey DeserializeLengthDelimited(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        instance.Key_ = Packet_SpecialKeyEnum.Respawn;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSpecialKey DeserializeLength(CitoStream stream, int length, Packet_ClientSpecialKey instance)
    {
        instance.Key_ = Packet_SpecialKeyEnum.Respawn;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        if (instance.Key_ != Packet_SpecialKeyEnum.Respawn)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Key_);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientSpecialKey instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientActiveMaterialSlotSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientActiveMaterialSlot instance = new Packet_ClientActiveMaterialSlot();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeBuffer(byte[] buffer, int length, Packet_ClientActiveMaterialSlot instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientActiveMaterialSlot Deserialize(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ActiveMaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeLengthDelimited(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ActiveMaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeLength(CitoStream stream, int length, Packet_ClientActiveMaterialSlot instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ActiveMaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.ActiveMaterialSlot);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientActiveMaterialSlot instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientDeathSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientDeath DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientDeath instance = new Packet_ClientDeath();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientDeath DeserializeBuffer(byte[] buffer, int length, Packet_ClientDeath instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDeath Deserialize(CitoStream stream, Packet_ClientDeath instance)
    {
        instance.Reason = Packet_DeathReasonEnum.FallDamage;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SourcePlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDeath DeserializeLengthDelimited(CitoStream stream, Packet_ClientDeath instance)
    {
        instance.Reason = Packet_DeathReasonEnum.FallDamage;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SourcePlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDeath DeserializeLength(CitoStream stream, int length, Packet_ClientDeath instance)
    {
        instance.Reason = Packet_DeathReasonEnum.FallDamage;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SourcePlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientDeath instance)
    {
        if (instance.Reason != Packet_DeathReasonEnum.FallDamage)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Reason);
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.SourcePlayer);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientDeath instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientDeath instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientServerQuerySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientServerQuery DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientServerQuery instance = new Packet_ClientServerQuery();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientServerQuery DeserializeBuffer(byte[] buffer, int length, Packet_ClientServerQuery instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientServerQuery Deserialize(CitoStream stream, Packet_ClientServerQuery instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientServerQuery DeserializeLengthDelimited(CitoStream stream, Packet_ClientServerQuery instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientServerQuery DeserializeLength(CitoStream stream, int length, Packet_ClientServerQuery instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientServerQuery instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientServerQuery instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientServerQuery instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientGameResolutionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientGameResolution DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientGameResolution instance = new Packet_ClientGameResolution();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientGameResolution DeserializeBuffer(byte[] buffer, int length, Packet_ClientGameResolution instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientGameResolution Deserialize(CitoStream stream, Packet_ClientGameResolution instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Height = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientGameResolution DeserializeLengthDelimited(CitoStream stream, Packet_ClientGameResolution instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Height = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientGameResolution DeserializeLength(CitoStream stream, int length, Packet_ClientGameResolution instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Height = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientGameResolution instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Width);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Height);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientGameResolution instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientGameResolution instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Client DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Client instance = new Packet_Client();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Client DeserializeBuffer(byte[] buffer, int length, Packet_Client instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Client Deserialize(CitoStream stream, Packet_Client instance)
    {
        instance.Id = Packet_ClientIdEnum.PlayerIdentification;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Identification == null)
                    instance.Identification = Packet_ClientIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ClientSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Message == null)
                    instance.Message = Packet_ClientMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Craft == null)
                    instance.Craft = Packet_ClientCraftSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientCraftSerializer.DeserializeLengthDelimited(stream, instance.Craft);
                continue;
                // Field 7 LengthDelimited
            case 58:
                if (instance.RequestBlob == null)
                    instance.RequestBlob = Packet_ClientRequestBlobSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientRequestBlobSerializer.DeserializeLengthDelimited(stream, instance.RequestBlob);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.InventoryAction == null)
                    instance.InventoryAction = Packet_ClientInventoryActionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientInventoryActionSerializer.DeserializeLengthDelimited(stream, instance.InventoryAction);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Health == null)
                    instance.Health = Packet_ClientHealthSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientHealthSerializer.DeserializeLengthDelimited(stream, instance.Health);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.PingReply == null)
                    instance.PingReply = Packet_ClientPingReplySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPingReplySerializer.DeserializeLengthDelimited(stream, instance.PingReply);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.DialogClick_ == null)
                    instance.DialogClick_ = Packet_ClientDialogClickSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDialogClickSerializer.DeserializeLengthDelimited(stream, instance.DialogClick_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Shot == null)
                    instance.Shot = Packet_ClientShotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientShotSerializer.DeserializeLengthDelimited(stream, instance.Shot);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.SpecialKey_ == null)
                    instance.SpecialKey_ = Packet_ClientSpecialKeySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSpecialKeySerializer.DeserializeLengthDelimited(stream, instance.SpecialKey_);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.ActiveMaterialSlot == null)
                    instance.ActiveMaterialSlot = Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimited(stream, instance.ActiveMaterialSlot);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.Leave == null)
                    instance.Leave = Packet_ClientLeaveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientLeaveSerializer.DeserializeLengthDelimited(stream, instance.Leave);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ClientFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Reload == null)
                    instance.Reload = Packet_ClientReloadSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientReloadSerializer.DeserializeLengthDelimited(stream, instance.Reload);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Oxygen == null)
                    instance.Oxygen = Packet_ClientOxygenSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientOxygenSerializer.DeserializeLengthDelimited(stream, instance.Oxygen);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Death == null)
                    instance.Death = Packet_ClientDeathSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDeathSerializer.DeserializeLengthDelimited(stream, instance.Death);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Query == null)
                    instance.Query = Packet_ClientServerQuerySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientServerQuerySerializer.DeserializeLengthDelimited(stream, instance.Query);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.GameResolution == null)
                    instance.GameResolution = Packet_ClientGameResolutionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientGameResolutionSerializer.DeserializeLengthDelimited(stream, instance.GameResolution);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityInteraction == null)
                    instance.EntityInteraction = Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimited(stream, instance.EntityInteraction);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Client DeserializeLengthDelimited(CitoStream stream, Packet_Client instance)
    {
        instance.Id = Packet_ClientIdEnum.PlayerIdentification;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Identification == null)
                    instance.Identification = Packet_ClientIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ClientSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Message == null)
                    instance.Message = Packet_ClientMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Craft == null)
                    instance.Craft = Packet_ClientCraftSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientCraftSerializer.DeserializeLengthDelimited(stream, instance.Craft);
                continue;
                // Field 7 LengthDelimited
            case 58:
                if (instance.RequestBlob == null)
                    instance.RequestBlob = Packet_ClientRequestBlobSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientRequestBlobSerializer.DeserializeLengthDelimited(stream, instance.RequestBlob);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.InventoryAction == null)
                    instance.InventoryAction = Packet_ClientInventoryActionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientInventoryActionSerializer.DeserializeLengthDelimited(stream, instance.InventoryAction);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Health == null)
                    instance.Health = Packet_ClientHealthSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientHealthSerializer.DeserializeLengthDelimited(stream, instance.Health);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.PingReply == null)
                    instance.PingReply = Packet_ClientPingReplySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPingReplySerializer.DeserializeLengthDelimited(stream, instance.PingReply);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.DialogClick_ == null)
                    instance.DialogClick_ = Packet_ClientDialogClickSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDialogClickSerializer.DeserializeLengthDelimited(stream, instance.DialogClick_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Shot == null)
                    instance.Shot = Packet_ClientShotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientShotSerializer.DeserializeLengthDelimited(stream, instance.Shot);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.SpecialKey_ == null)
                    instance.SpecialKey_ = Packet_ClientSpecialKeySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSpecialKeySerializer.DeserializeLengthDelimited(stream, instance.SpecialKey_);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.ActiveMaterialSlot == null)
                    instance.ActiveMaterialSlot = Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimited(stream, instance.ActiveMaterialSlot);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.Leave == null)
                    instance.Leave = Packet_ClientLeaveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientLeaveSerializer.DeserializeLengthDelimited(stream, instance.Leave);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ClientFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Reload == null)
                    instance.Reload = Packet_ClientReloadSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientReloadSerializer.DeserializeLengthDelimited(stream, instance.Reload);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Oxygen == null)
                    instance.Oxygen = Packet_ClientOxygenSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientOxygenSerializer.DeserializeLengthDelimited(stream, instance.Oxygen);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Death == null)
                    instance.Death = Packet_ClientDeathSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDeathSerializer.DeserializeLengthDelimited(stream, instance.Death);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Query == null)
                    instance.Query = Packet_ClientServerQuerySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientServerQuerySerializer.DeserializeLengthDelimited(stream, instance.Query);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.GameResolution == null)
                    instance.GameResolution = Packet_ClientGameResolutionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientGameResolutionSerializer.DeserializeLengthDelimited(stream, instance.GameResolution);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityInteraction == null)
                    instance.EntityInteraction = Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimited(stream, instance.EntityInteraction);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Client DeserializeLength(CitoStream stream, int length, Packet_Client instance)
    {
        instance.Id = Packet_ClientIdEnum.PlayerIdentification;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Identification == null)
                    instance.Identification = Packet_ClientIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ClientSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Message == null)
                    instance.Message = Packet_ClientMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Craft == null)
                    instance.Craft = Packet_ClientCraftSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientCraftSerializer.DeserializeLengthDelimited(stream, instance.Craft);
                continue;
                // Field 7 LengthDelimited
            case 58:
                if (instance.RequestBlob == null)
                    instance.RequestBlob = Packet_ClientRequestBlobSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientRequestBlobSerializer.DeserializeLengthDelimited(stream, instance.RequestBlob);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.InventoryAction == null)
                    instance.InventoryAction = Packet_ClientInventoryActionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientInventoryActionSerializer.DeserializeLengthDelimited(stream, instance.InventoryAction);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Health == null)
                    instance.Health = Packet_ClientHealthSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientHealthSerializer.DeserializeLengthDelimited(stream, instance.Health);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.PingReply == null)
                    instance.PingReply = Packet_ClientPingReplySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPingReplySerializer.DeserializeLengthDelimited(stream, instance.PingReply);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.DialogClick_ == null)
                    instance.DialogClick_ = Packet_ClientDialogClickSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDialogClickSerializer.DeserializeLengthDelimited(stream, instance.DialogClick_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Shot == null)
                    instance.Shot = Packet_ClientShotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientShotSerializer.DeserializeLengthDelimited(stream, instance.Shot);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.SpecialKey_ == null)
                    instance.SpecialKey_ = Packet_ClientSpecialKeySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSpecialKeySerializer.DeserializeLengthDelimited(stream, instance.SpecialKey_);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.ActiveMaterialSlot == null)
                    instance.ActiveMaterialSlot = Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimited(stream, instance.ActiveMaterialSlot);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.Leave == null)
                    instance.Leave = Packet_ClientLeaveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientLeaveSerializer.DeserializeLengthDelimited(stream, instance.Leave);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ClientFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Reload == null)
                    instance.Reload = Packet_ClientReloadSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientReloadSerializer.DeserializeLengthDelimited(stream, instance.Reload);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Oxygen == null)
                    instance.Oxygen = Packet_ClientOxygenSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientOxygenSerializer.DeserializeLengthDelimited(stream, instance.Oxygen);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Death == null)
                    instance.Death = Packet_ClientDeathSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDeathSerializer.DeserializeLengthDelimited(stream, instance.Death);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Query == null)
                    instance.Query = Packet_ClientServerQuerySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientServerQuerySerializer.DeserializeLengthDelimited(stream, instance.Query);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.GameResolution == null)
                    instance.GameResolution = Packet_ClientGameResolutionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientGameResolutionSerializer.DeserializeLengthDelimited(stream, instance.GameResolution);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityInteraction == null)
                    instance.EntityInteraction = Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimited(stream, instance.EntityInteraction);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Client instance)
    {
        if (instance.Id != Packet_ClientIdEnum.PlayerIdentification)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Id);
        }
        if (instance.Identification != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ClientIdentificationSerializer.Serialize(ms2, instance.Identification);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.SetBlock != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ClientSetBlockSerializer.Serialize(ms3, instance.SetBlock);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.FillArea != null)
        {
            // Key for field: 31, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(250));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms31 = new CitoMemoryStream();
            Packet_ClientFillAreaSerializer.Serialize(ms31, instance.FillArea);
            // Length delimited byte array
            int ms31Length = ms31.Length();
            ProtocolParser.WriteUInt32_(stream, ms31Length);
            stream.Write(ms31.GetBuffer(), 0, ms31Length);
            
        }
        if (instance.PositionAndOrientation != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ClientPositionAndOrientationSerializer.Serialize(ms4, instance.PositionAndOrientation);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.Message != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ClientMessageSerializer.Serialize(ms5, instance.Message);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.Craft != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            CitoMemoryStream ms6 = new CitoMemoryStream();
            Packet_ClientCraftSerializer.Serialize(ms6, instance.Craft);
            // Length delimited byte array
            int ms6Length = ms6.Length();
            ProtocolParser.WriteUInt32_(stream, ms6Length);
            stream.Write(ms6.GetBuffer(), 0, ms6Length);
            
        }
        if (instance.RequestBlob != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            CitoMemoryStream ms7 = new CitoMemoryStream();
            Packet_ClientRequestBlobSerializer.Serialize(ms7, instance.RequestBlob);
            // Length delimited byte array
            int ms7Length = ms7.Length();
            ProtocolParser.WriteUInt32_(stream, ms7Length);
            stream.Write(ms7.GetBuffer(), 0, ms7Length);
            
        }
        if (instance.InventoryAction != null)
        {
            // Key for field: 8, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(66));
            CitoMemoryStream ms8 = new CitoMemoryStream();
            Packet_ClientInventoryActionSerializer.Serialize(ms8, instance.InventoryAction);
            // Length delimited byte array
            int ms8Length = ms8.Length();
            ProtocolParser.WriteUInt32_(stream, ms8Length);
            stream.Write(ms8.GetBuffer(), 0, ms8Length);
            
        }
        if (instance.Health != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            CitoMemoryStream ms9 = new CitoMemoryStream();
            Packet_ClientHealthSerializer.Serialize(ms9, instance.Health);
            // Length delimited byte array
            int ms9Length = ms9.Length();
            ProtocolParser.WriteUInt32_(stream, ms9Length);
            stream.Write(ms9.GetBuffer(), 0, ms9Length);
            
        }
        if (instance.PingReply != null)
        {
            // Key for field: 10, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(82));
            CitoMemoryStream ms10 = new CitoMemoryStream();
            Packet_ClientPingReplySerializer.Serialize(ms10, instance.PingReply);
            // Length delimited byte array
            int ms10Length = ms10.Length();
            ProtocolParser.WriteUInt32_(stream, ms10Length);
            stream.Write(ms10.GetBuffer(), 0, ms10Length);
            
        }
        if (instance.DialogClick_ != null)
        {
            // Key for field: 11, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(90));
            CitoMemoryStream ms11 = new CitoMemoryStream();
            Packet_ClientDialogClickSerializer.Serialize(ms11, instance.DialogClick_);
            // Length delimited byte array
            int ms11Length = ms11.Length();
            ProtocolParser.WriteUInt32_(stream, ms11Length);
            stream.Write(ms11.GetBuffer(), 0, ms11Length);
            
        }
        if (instance.Shot != null)
        {
            // Key for field: 12, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(98));
            CitoMemoryStream ms12 = new CitoMemoryStream();
            Packet_ClientShotSerializer.Serialize(ms12, instance.Shot);
            // Length delimited byte array
            int ms12Length = ms12.Length();
            ProtocolParser.WriteUInt32_(stream, ms12Length);
            stream.Write(ms12.GetBuffer(), 0, ms12Length);
            
        }
        if (instance.SpecialKey_ != null)
        {
            // Key for field: 13, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(106));
            CitoMemoryStream ms13 = new CitoMemoryStream();
            Packet_ClientSpecialKeySerializer.Serialize(ms13, instance.SpecialKey_);
            // Length delimited byte array
            int ms13Length = ms13.Length();
            ProtocolParser.WriteUInt32_(stream, ms13Length);
            stream.Write(ms13.GetBuffer(), 0, ms13Length);
            
        }
        if (instance.ActiveMaterialSlot != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            CitoMemoryStream ms14 = new CitoMemoryStream();
            Packet_ClientActiveMaterialSlotSerializer.Serialize(ms14, instance.ActiveMaterialSlot);
            // Length delimited byte array
            int ms14Length = ms14.Length();
            ProtocolParser.WriteUInt32_(stream, ms14Length);
            stream.Write(ms14.GetBuffer(), 0, ms14Length);
            
        }
        if (instance.Leave != null)
        {
            // Key for field: 15, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(122));
            CitoMemoryStream ms15 = new CitoMemoryStream();
            Packet_ClientLeaveSerializer.Serialize(ms15, instance.Leave);
            // Length delimited byte array
            int ms15Length = ms15.Length();
            ProtocolParser.WriteUInt32_(stream, ms15Length);
            stream.Write(ms15.GetBuffer(), 0, ms15Length);
            
        }
        if (instance.Reload != null)
        {
            // Key for field: 16, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(130));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms16 = new CitoMemoryStream();
            Packet_ClientReloadSerializer.Serialize(ms16, instance.Reload);
            // Length delimited byte array
            int ms16Length = ms16.Length();
            ProtocolParser.WriteUInt32_(stream, ms16Length);
            stream.Write(ms16.GetBuffer(), 0, ms16Length);
            
        }
        if (instance.Oxygen != null)
        {
            // Key for field: 17, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms17 = new CitoMemoryStream();
            Packet_ClientOxygenSerializer.Serialize(ms17, instance.Oxygen);
            // Length delimited byte array
            int ms17Length = ms17.Length();
            ProtocolParser.WriteUInt32_(stream, ms17Length);
            stream.Write(ms17.GetBuffer(), 0, ms17Length);
            
        }
        if (instance.Death != null)
        {
            // Key for field: 18, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(146));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms18 = new CitoMemoryStream();
            Packet_ClientDeathSerializer.Serialize(ms18, instance.Death);
            // Length delimited byte array
            int ms18Length = ms18.Length();
            ProtocolParser.WriteUInt32_(stream, ms18Length);
            stream.Write(ms18.GetBuffer(), 0, ms18Length);
            
        }
        if (instance.Query != null)
        {
            // Key for field: 19, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms19 = new CitoMemoryStream();
            Packet_ClientServerQuerySerializer.Serialize(ms19, instance.Query);
            // Length delimited byte array
            int ms19Length = ms19.Length();
            ProtocolParser.WriteUInt32_(stream, ms19Length);
            stream.Write(ms19.GetBuffer(), 0, ms19Length);
            
        }
        if (instance.GameResolution != null)
        {
            // Key for field: 20, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms20 = new CitoMemoryStream();
            Packet_ClientGameResolutionSerializer.Serialize(ms20, instance.GameResolution);
            // Length delimited byte array
            int ms20Length = ms20.Length();
            ProtocolParser.WriteUInt32_(stream, ms20Length);
            stream.Write(ms20.GetBuffer(), 0, ms20Length);
            
        }
        if (instance.EntityInteraction != null)
        {
            // Key for field: 21, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms21 = new CitoMemoryStream();
            Packet_ClientEntityInteractionSerializer.Serialize(ms21, instance.EntityInteraction);
            // Length delimited byte array
            int ms21Length = ms21.Length();
            ProtocolParser.WriteUInt32_(stream, ms21Length);
            stream.Write(ms21.GetBuffer(), 0, ms21Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Client instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Client instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientEntityInteractionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientEntityInteraction DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientEntityInteraction instance = new Packet_ClientEntityInteraction();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientEntityInteraction DeserializeBuffer(byte[] buffer, int length, Packet_ClientEntityInteraction instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientEntityInteraction Deserialize(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        instance.InteractionType = Packet_EntityInteractionTypeEnum.Use;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.EntityId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.InteractionType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientEntityInteraction DeserializeLengthDelimited(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        instance.InteractionType = Packet_EntityInteractionTypeEnum.Use;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.EntityId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.InteractionType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientEntityInteraction DeserializeLength(CitoStream stream, int length, Packet_ClientEntityInteraction instance)
    {
        instance.InteractionType = Packet_EntityInteractionTypeEnum.Use;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.EntityId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.InteractionType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.EntityId);
        if (instance.InteractionType != Packet_EntityInteractionTypeEnum.Use)
        {
            // Key for field: 2, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(16));
            ProtocolParser.WriteUInt64(stream,instance.InteractionType);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientEntityInteraction instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_SoundSetSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_SoundSet DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_SoundSet instance = new Packet_SoundSet();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_SoundSet DeserializeBuffer(byte[] buffer, int length, Packet_SoundSet instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_SoundSet Deserialize(CitoStream stream, Packet_SoundSet instance)
    {
        if (instance.Walk == null)
        {
            instance.Walk = new string[1];
            instance.WalkCount = 0;
            instance.WalkLength = 1;
        }
        if (instance.Break1 == null)
        {
            instance.Break1 = new string[1];
            instance.Break1Count = 0;
            instance.Break1Length = 1;
        }
        if (instance.Build == null)
        {
            instance.Build = new string[1];
            instance.BuildCount = 0;
            instance.BuildLength = 1;
        }
        if (instance.Clone == null)
        {
            instance.Clone = new string[1];
            instance.CloneCount = 0;
            instance.CloneLength = 1;
        }
        if (instance.Shoot == null)
        {
            instance.Shoot = new string[1];
            instance.ShootCount = 0;
            instance.ShootLength = 1;
        }
        if (instance.ShootEnd == null)
        {
            instance.ShootEnd = new string[1];
            instance.ShootEndCount = 0;
            instance.ShootEndLength = 1;
        }
        if (instance.Reload == null)
        {
            instance.Reload = new string[1];
            instance.ReloadCount = 0;
            instance.ReloadLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WalkAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                // repeated
                instance.Break1Add(ProtocolParser.ReadString(stream));
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.BuildAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 4 LengthDelimited
            case 34:
                // repeated
                instance.CloneAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 5 LengthDelimited
            case 42:
                // repeated
                instance.ShootAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 6 LengthDelimited
            case 50:
                // repeated
                instance.ShootEndAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ReloadAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_SoundSet DeserializeLengthDelimited(CitoStream stream, Packet_SoundSet instance)
    {
        if (instance.Walk == null)
        {
            instance.Walk = new string[1];
            instance.WalkCount = 0;
            instance.WalkLength = 1;
        }
        if (instance.Break1 == null)
        {
            instance.Break1 = new string[1];
            instance.Break1Count = 0;
            instance.Break1Length = 1;
        }
        if (instance.Build == null)
        {
            instance.Build = new string[1];
            instance.BuildCount = 0;
            instance.BuildLength = 1;
        }
        if (instance.Clone == null)
        {
            instance.Clone = new string[1];
            instance.CloneCount = 0;
            instance.CloneLength = 1;
        }
        if (instance.Shoot == null)
        {
            instance.Shoot = new string[1];
            instance.ShootCount = 0;
            instance.ShootLength = 1;
        }
        if (instance.ShootEnd == null)
        {
            instance.ShootEnd = new string[1];
            instance.ShootEndCount = 0;
            instance.ShootEndLength = 1;
        }
        if (instance.Reload == null)
        {
            instance.Reload = new string[1];
            instance.ReloadCount = 0;
            instance.ReloadLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WalkAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                // repeated
                instance.Break1Add(ProtocolParser.ReadString(stream));
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.BuildAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 4 LengthDelimited
            case 34:
                // repeated
                instance.CloneAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 5 LengthDelimited
            case 42:
                // repeated
                instance.ShootAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 6 LengthDelimited
            case 50:
                // repeated
                instance.ShootEndAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ReloadAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_SoundSet DeserializeLength(CitoStream stream, int length, Packet_SoundSet instance)
    {
        if (instance.Walk == null)
        {
            instance.Walk = new string[1];
            instance.WalkCount = 0;
            instance.WalkLength = 1;
        }
        if (instance.Break1 == null)
        {
            instance.Break1 = new string[1];
            instance.Break1Count = 0;
            instance.Break1Length = 1;
        }
        if (instance.Build == null)
        {
            instance.Build = new string[1];
            instance.BuildCount = 0;
            instance.BuildLength = 1;
        }
        if (instance.Clone == null)
        {
            instance.Clone = new string[1];
            instance.CloneCount = 0;
            instance.CloneLength = 1;
        }
        if (instance.Shoot == null)
        {
            instance.Shoot = new string[1];
            instance.ShootCount = 0;
            instance.ShootLength = 1;
        }
        if (instance.ShootEnd == null)
        {
            instance.ShootEnd = new string[1];
            instance.ShootEndCount = 0;
            instance.ShootEndLength = 1;
        }
        if (instance.Reload == null)
        {
            instance.Reload = new string[1];
            instance.ReloadCount = 0;
            instance.ReloadLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WalkAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                // repeated
                instance.Break1Add(ProtocolParser.ReadString(stream));
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.BuildAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 4 LengthDelimited
            case 34:
                // repeated
                instance.CloneAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 5 LengthDelimited
            case 42:
                // repeated
                instance.ShootAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 6 LengthDelimited
            case 50:
                // repeated
                instance.ShootEndAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ReloadAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_SoundSet instance)
    {
        if (instance.Walk != null)
        {
            for(int k=0; k < instance.WalkCount; k++)
            {
                string i1 = instance.Walk[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i1));
            }
        }
        if (instance.Break1 != null)
        {
            for(int k=0; k < instance.Break1Count; k++)
            {
                string i2 = instance.Break1[k];
                // Key for field: 2, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(18));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i2));
            }
        }
        if (instance.Build != null)
        {
            for(int k=0; k < instance.BuildCount; k++)
            {
                string i3 = instance.Build[k];
                // Key for field: 3, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(26));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i3));
            }
        }
        if (instance.Clone != null)
        {
            for(int k=0; k < instance.CloneCount; k++)
            {
                string i4 = instance.Clone[k];
                // Key for field: 4, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(34));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i4));
            }
        }
        if (instance.Shoot != null)
        {
            for(int k=0; k < instance.ShootCount; k++)
            {
                string i5 = instance.Shoot[k];
                // Key for field: 5, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(42));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i5));
            }
        }
        if (instance.ShootEnd != null)
        {
            for(int k=0; k < instance.ShootEndCount; k++)
            {
                string i6 = instance.ShootEnd[k];
                // Key for field: 6, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(50));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i6));
            }
        }
        if (instance.Reload != null)
        {
            for(int k=0; k < instance.ReloadCount; k++)
            {
                string i7 = instance.Reload[k];
                // Key for field: 7, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(58));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i7));
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_SoundSet instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_SoundSet instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_BlockTypeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_BlockType DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_BlockType instance = new Packet_BlockType();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_BlockType DeserializeBuffer(byte[] buffer, int length, Packet_BlockType instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_BlockType Deserialize(CitoStream stream, Packet_BlockType instance)
    {
        instance.DrawType = Packet_DrawTypeEnum.Empty;
        instance.WalkableType = Packet_WalkableTypeEnum.Empty;
        instance.PistolType = Packet_PistolTypeEnum.Normal;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.TextureIdTop = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.TextureIdBottom = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.TextureIdFront = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.TextureIdBack = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.TextureIdLeft = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 LengthDelimited
            case 50:
                instance.TextureIdRight = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.TextureIdForInventory = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.DrawType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.WalkableType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Rail = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.WalkSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.IsSlipperyWalk = ProtocolParser.ReadBool(stream);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Sounds == null)
                    instance.Sounds = Packet_SoundSetSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_SoundSetSerializer.DeserializeLengthDelimited(stream, instance.Sounds);
                continue;
                // Field 14 Varint
            case 112:
                instance.LightRadius = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 15 Varint
            case 120:
                instance.StartInventoryAmount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 16:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Strength = ProtocolParser.ReadUInt64(stream);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
            case 18:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsBuildable = ProtocolParser.ReadBool(stream);
                continue;
            case 19:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsUsable = ProtocolParser.ReadBool(stream);
                continue;
            case 20:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsTool = ProtocolParser.ReadBool(stream);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Handimage = ProtocolParser.ReadString(stream);
                continue;
            case 22:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsPistol = ProtocolParser.ReadBool(stream);
                continue;
            case 23:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 24:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.RecoilFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 25:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 26:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.BulletsPerShotFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 27:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WalkSpeedWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 28:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsEnabled = ProtocolParser.ReadBool(stream);
                continue;
            case 29:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsMoveSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.IronSightsImage = ProtocolParser.ReadString(stream);
                continue;
            case 31:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsAimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 32:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsFovFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 33:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoMagazine = ProtocolParser.ReadUInt64(stream);
                continue;
            case 34:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoTotal = ProtocolParser.ReadUInt64(stream);
                continue;
            case 35:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ReloadDelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 36:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionRangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 37:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionTimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 38:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 39:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileBounce = ProtocolParser.ReadBool(stream);
                continue;
            case 40:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageBodyFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 41:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageHeadFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 42:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PistolType = ProtocolParser.ReadUInt64(stream);
                continue;
            case 43:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageToPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
            case 44:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WhenPlacedGetsConvertedTo = ProtocolParser.ReadUInt64(stream);
                continue;
            case 45:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PickDistanceWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_BlockType DeserializeLengthDelimited(CitoStream stream, Packet_BlockType instance)
    {
        instance.DrawType = Packet_DrawTypeEnum.Empty;
        instance.WalkableType = Packet_WalkableTypeEnum.Empty;
        instance.PistolType = Packet_PistolTypeEnum.Normal;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.TextureIdTop = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.TextureIdBottom = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.TextureIdFront = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.TextureIdBack = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.TextureIdLeft = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 LengthDelimited
            case 50:
                instance.TextureIdRight = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.TextureIdForInventory = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.DrawType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.WalkableType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Rail = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.WalkSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.IsSlipperyWalk = ProtocolParser.ReadBool(stream);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Sounds == null)
                    instance.Sounds = Packet_SoundSetSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_SoundSetSerializer.DeserializeLengthDelimited(stream, instance.Sounds);
                continue;
                // Field 14 Varint
            case 112:
                instance.LightRadius = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 15 Varint
            case 120:
                instance.StartInventoryAmount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 16:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Strength = ProtocolParser.ReadUInt64(stream);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
            case 18:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsBuildable = ProtocolParser.ReadBool(stream);
                continue;
            case 19:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsUsable = ProtocolParser.ReadBool(stream);
                continue;
            case 20:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsTool = ProtocolParser.ReadBool(stream);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Handimage = ProtocolParser.ReadString(stream);
                continue;
            case 22:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsPistol = ProtocolParser.ReadBool(stream);
                continue;
            case 23:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 24:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.RecoilFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 25:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 26:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.BulletsPerShotFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 27:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WalkSpeedWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 28:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsEnabled = ProtocolParser.ReadBool(stream);
                continue;
            case 29:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsMoveSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.IronSightsImage = ProtocolParser.ReadString(stream);
                continue;
            case 31:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsAimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 32:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsFovFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 33:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoMagazine = ProtocolParser.ReadUInt64(stream);
                continue;
            case 34:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoTotal = ProtocolParser.ReadUInt64(stream);
                continue;
            case 35:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ReloadDelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 36:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionRangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 37:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionTimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 38:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 39:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileBounce = ProtocolParser.ReadBool(stream);
                continue;
            case 40:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageBodyFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 41:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageHeadFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 42:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PistolType = ProtocolParser.ReadUInt64(stream);
                continue;
            case 43:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageToPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
            case 44:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WhenPlacedGetsConvertedTo = ProtocolParser.ReadUInt64(stream);
                continue;
            case 45:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PickDistanceWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_BlockType DeserializeLength(CitoStream stream, int length, Packet_BlockType instance)
    {
        instance.DrawType = Packet_DrawTypeEnum.Empty;
        instance.WalkableType = Packet_WalkableTypeEnum.Empty;
        instance.PistolType = Packet_PistolTypeEnum.Normal;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.TextureIdTop = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.TextureIdBottom = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.TextureIdFront = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.TextureIdBack = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.TextureIdLeft = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 LengthDelimited
            case 50:
                instance.TextureIdRight = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.TextureIdForInventory = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.DrawType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.WalkableType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Rail = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.WalkSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.IsSlipperyWalk = ProtocolParser.ReadBool(stream);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Sounds == null)
                    instance.Sounds = Packet_SoundSetSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_SoundSetSerializer.DeserializeLengthDelimited(stream, instance.Sounds);
                continue;
                // Field 14 Varint
            case 112:
                instance.LightRadius = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 15 Varint
            case 120:
                instance.StartInventoryAmount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 16:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Strength = ProtocolParser.ReadUInt64(stream);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
            case 18:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsBuildable = ProtocolParser.ReadBool(stream);
                continue;
            case 19:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsUsable = ProtocolParser.ReadBool(stream);
                continue;
            case 20:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsTool = ProtocolParser.ReadBool(stream);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Handimage = ProtocolParser.ReadString(stream);
                continue;
            case 22:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsPistol = ProtocolParser.ReadBool(stream);
                continue;
            case 23:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 24:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.RecoilFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 25:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 26:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.BulletsPerShotFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 27:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WalkSpeedWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 28:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsEnabled = ProtocolParser.ReadBool(stream);
                continue;
            case 29:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsMoveSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.IronSightsImage = ProtocolParser.ReadString(stream);
                continue;
            case 31:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsAimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 32:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsFovFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 33:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoMagazine = ProtocolParser.ReadUInt64(stream);
                continue;
            case 34:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoTotal = ProtocolParser.ReadUInt64(stream);
                continue;
            case 35:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ReloadDelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 36:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionRangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 37:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionTimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 38:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 39:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileBounce = ProtocolParser.ReadBool(stream);
                continue;
            case 40:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageBodyFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 41:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageHeadFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 42:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PistolType = ProtocolParser.ReadUInt64(stream);
                continue;
            case 43:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageToPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
            case 44:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WhenPlacedGetsConvertedTo = ProtocolParser.ReadUInt64(stream);
                continue;
            case 45:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PickDistanceWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_BlockType instance)
    {
        if (instance.TextureIdTop != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdTop));
        }
        if (instance.TextureIdBottom != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdBottom));
        }
        if (instance.TextureIdFront != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdFront));
        }
        if (instance.TextureIdBack != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdBack));
        }
        if (instance.TextureIdLeft != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdLeft));
        }
        if (instance.TextureIdRight != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdRight));
        }
        if (instance.TextureIdForInventory != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdForInventory));
        }
        if (instance.DrawType != Packet_DrawTypeEnum.Empty)
        {
            // Key for field: 8, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(64));
            ProtocolParser.WriteUInt64(stream,instance.DrawType);
        }
        if (instance.WalkableType != Packet_WalkableTypeEnum.Empty)
        {
            // Key for field: 9, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(72));
            ProtocolParser.WriteUInt64(stream,instance.WalkableType);
        }
        // Key for field: 10, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(80));
        ProtocolParser.WriteUInt64(stream,instance.Rail);
        // Key for field: 11, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(88));
        ProtocolParser.WriteUInt64(stream,instance.WalkSpeedFloat);
        // Key for field: 12, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(96));
        ProtocolParser.WriteBool(stream, instance.IsSlipperyWalk);
        if (instance.Sounds != null)
        {
            // Key for field: 13, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(106));
            CitoMemoryStream ms13 = new CitoMemoryStream();
            Packet_SoundSetSerializer.Serialize(ms13, instance.Sounds);
            // Length delimited byte array
            int ms13Length = ms13.Length();
            ProtocolParser.WriteUInt32_(stream, ms13Length);
            stream.Write(ms13.GetBuffer(), 0, ms13Length);
            
        }
        // Key for field: 14, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(112));
        ProtocolParser.WriteUInt64(stream,instance.LightRadius);
        // Key for field: 15, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(120));
        ProtocolParser.WriteUInt64(stream,instance.StartInventoryAmount);
        // Key for field: 16, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(128));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.Strength);
        if (instance.Name != null)
        {
            // Key for field: 17, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        // Key for field: 18, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(144));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsBuildable);
        // Key for field: 19, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(152));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsUsable);
        // Key for field: 20, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(160));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsTool);
        if (instance.Handimage != null)
        {
            // Key for field: 21, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Handimage));
        }
        // Key for field: 22, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(176));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsPistol);
        // Key for field: 23, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(184));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.AimRadiusFloat);
        // Key for field: 24, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(192));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.RecoilFloat);
        // Key for field: 25, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(200));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.DelayFloat);
        // Key for field: 26, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(208));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.BulletsPerShotFloat);
        // Key for field: 27, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(216));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.WalkSpeedWhenUsedFloat);
        // Key for field: 28, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(224));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IronSightsEnabled);
        // Key for field: 29, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(232));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.IronSightsMoveSpeedFloat);
        if (instance.IronSightsImage != null)
        {
            // Key for field: 30, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(242));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.IronSightsImage));
        }
        // Key for field: 31, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(248));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.IronSightsAimRadiusFloat);
        // Key for field: 32, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(128));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.IronSightsFovFloat);
        // Key for field: 33, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(136));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.AmmoMagazine);
        // Key for field: 34, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(144));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.AmmoTotal);
        // Key for field: 35, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(152));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ReloadDelayFloat);
        // Key for field: 36, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(160));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ExplosionRangeFloat);
        // Key for field: 37, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(168));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ExplosionTimeFloat);
        // Key for field: 38, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(176));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ProjectileSpeedFloat);
        // Key for field: 39, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(184));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteBool(stream, instance.ProjectileBounce);
        // Key for field: 40, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(192));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.DamageBodyFloat);
        // Key for field: 41, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(200));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.DamageHeadFloat);
        if (instance.PistolType != Packet_PistolTypeEnum.Normal)
        {
            // Key for field: 42, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(208));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            ProtocolParser.WriteUInt64(stream,instance.PistolType);
        }
        // Key for field: 43, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(216));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.DamageToPlayer);
        // Key for field: 44, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(224));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.WhenPlacedGetsConvertedTo);
        // Key for field: 45, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(232));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.PickDistanceWhenUsedFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_BlockType instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_BlockType instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerIdentificationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerIdentification DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerIdentification instance = new Packet_ServerIdentification();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerIdentification DeserializeBuffer(byte[] buffer, int length, Packet_ServerIdentification instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerIdentification Deserialize(CitoStream stream, Packet_ServerIdentification instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AssignedClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.ServerName = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerMotd = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.DisableShadows = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.PlayerAreaSize = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.RenderHint_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.RequiredBlobMd5 == null)
                    instance.RequiredBlobMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobMd5);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.RequiredBlobName == null)
                    instance.RequiredBlobName = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobName);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerIdentification DeserializeLengthDelimited(CitoStream stream, Packet_ServerIdentification instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AssignedClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.ServerName = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerMotd = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.DisableShadows = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.PlayerAreaSize = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.RenderHint_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.RequiredBlobMd5 == null)
                    instance.RequiredBlobMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobMd5);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.RequiredBlobName == null)
                    instance.RequiredBlobName = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobName);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerIdentification DeserializeLength(CitoStream stream, int length, Packet_ServerIdentification instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AssignedClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.ServerName = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerMotd = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.DisableShadows = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.PlayerAreaSize = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.RenderHint_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.RequiredBlobMd5 == null)
                    instance.RequiredBlobMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobMd5);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.RequiredBlobName == null)
                    instance.RequiredBlobName = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobName);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerIdentification instance)
    {
        if (instance.MdProtocolVersion != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.MdProtocolVersion));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.AssignedClientId);
        if (instance.ServerName != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerName));
        }
        if (instance.ServerMotd != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerMotd));
        }
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeX);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeY);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeZ);
        // Key for field: 11, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(88));
        ProtocolParser.WriteUInt64(stream,instance.DisableShadows);
        // Key for field: 12, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(96));
        ProtocolParser.WriteUInt64(stream,instance.PlayerAreaSize);
        // Key for field: 13, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(104));
        ProtocolParser.WriteUInt64(stream,instance.RenderHint_);
        if (instance.RequiredBlobMd5 != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            CitoMemoryStream ms14 = new CitoMemoryStream();
            Packet_StringListSerializer.Serialize(ms14, instance.RequiredBlobMd5);
            // Length delimited byte array
            int ms14Length = ms14.Length();
            ProtocolParser.WriteUInt32_(stream, ms14Length);
            stream.Write(ms14.GetBuffer(), 0, ms14Length);
            
        }
        if (instance.RequiredBlobName != null)
        {
            // Key for field: 15, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(122));
            CitoMemoryStream ms15 = new CitoMemoryStream();
            Packet_StringListSerializer.Serialize(ms15, instance.RequiredBlobName);
            // Length delimited byte array
            int ms15Length = ms15.Length();
            ProtocolParser.WriteUInt32_(stream, ms15Length);
            stream.Write(ms15.GetBuffer(), 0, ms15Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerIdentification instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerIdentification instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_StringListSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_StringList DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_StringList instance = new Packet_StringList();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_StringList DeserializeBuffer(byte[] buffer, int length, Packet_StringList instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_StringList Deserialize(CitoStream stream, Packet_StringList instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new string[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.ItemsAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_StringList DeserializeLengthDelimited(CitoStream stream, Packet_StringList instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new string[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.ItemsAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_StringList DeserializeLength(CitoStream stream, int length, Packet_StringList instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new string[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.ItemsAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_StringList instance)
    {
        if (instance.Items != null)
        {
            for(int k=0; k < instance.ItemsCount; k++)
            {
                string i1 = instance.Items[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i1));
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_StringList instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_StringList instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_IntStringSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_IntString DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_IntString instance = new Packet_IntString();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_IntString DeserializeBuffer(byte[] buffer, int length, Packet_IntString instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_IntString Deserialize(CitoStream stream, Packet_IntString instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Value_ = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntString DeserializeLengthDelimited(CitoStream stream, Packet_IntString instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Value_ = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntString DeserializeLength(CitoStream stream, int length, Packet_IntString instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Value_ = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_IntString instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Key_);
        if (instance.Value_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Value_));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_IntString instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_IntString instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPlayerSpawnPositionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPlayerSpawnPosition instance = new Packet_ServerPlayerSpawnPosition();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeBuffer(byte[] buffer, int length, Packet_ServerPlayerSpawnPosition instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerSpawnPosition Deserialize(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeLengthDelimited(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeLength(CitoStream stream, int length, Packet_ServerPlayerSpawnPosition instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPlayerSpawnPosition instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLevelInitializeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLevelInitialize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLevelInitialize instance = new Packet_ServerLevelInitialize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLevelInitialize DeserializeBuffer(byte[] buffer, int length, Packet_ServerLevelInitialize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelInitialize Deserialize(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelInitialize DeserializeLengthDelimited(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelInitialize DeserializeLength(CitoStream stream, int length, Packet_ServerLevelInitialize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLevelInitialize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlobInitializeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlobInitialize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlobInitialize instance = new Packet_ServerBlobInitialize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlobInitialize DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlobInitialize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobInitialize Deserialize(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Md5 = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobInitialize DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Md5 = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobInitialize DeserializeLength(CitoStream stream, int length, Packet_ServerBlobInitialize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Md5 = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        if (instance.Md5 != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Md5));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlobInitialize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlobPartSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlobPart DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlobPart instance = new Packet_ServerBlobPart();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlobPart DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlobPart instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobPart Deserialize(CitoStream stream, Packet_ServerBlobPart instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Data = ProtocolParser.ReadBytes(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Islastpart = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobPart DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlobPart instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Data = ProtocolParser.ReadBytes(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Islastpart = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobPart DeserializeLength(CitoStream stream, int length, Packet_ServerBlobPart instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Data = ProtocolParser.ReadBytes(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Islastpart = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlobPart instance)
    {
        if (instance.Data != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, instance.Data);
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Islastpart);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlobPart instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlobPart instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlobFinalizeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlobFinalize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlobFinalize instance = new Packet_ServerBlobFinalize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlobFinalize DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlobFinalize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobFinalize Deserialize(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobFinalize DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobFinalize DeserializeLength(CitoStream stream, int length, Packet_ServerBlobFinalize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlobFinalize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlockTypesSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlockTypes DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlockTypes instance = new Packet_ServerBlockTypes();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlockTypes DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlockTypes instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockTypes Deserialize(CitoStream stream, Packet_ServerBlockTypes instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockTypes DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlockTypes instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockTypes DeserializeLength(CitoStream stream, int length, Packet_ServerBlockTypes instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlockTypes instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlockTypes instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlockTypes instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlockTypeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlockType DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlockType instance = new Packet_ServerBlockType();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlockType DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlockType instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockType Deserialize(CitoStream stream, Packet_ServerBlockType instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Blocktype == null)
                    instance.Blocktype = Packet_BlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_BlockTypeSerializer.DeserializeLengthDelimited(stream, instance.Blocktype);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockType DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlockType instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Blocktype == null)
                    instance.Blocktype = Packet_BlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_BlockTypeSerializer.DeserializeLengthDelimited(stream, instance.Blocktype);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockType DeserializeLength(CitoStream stream, int length, Packet_ServerBlockType instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Blocktype == null)
                    instance.Blocktype = Packet_BlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_BlockTypeSerializer.DeserializeLengthDelimited(stream, instance.Blocktype);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlockType instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        if (instance.Blocktype != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_BlockTypeSerializer.Serialize(ms2, instance.Blocktype);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlockType instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlockType instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSunLevelsSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSunLevels DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSunLevels instance = new Packet_ServerSunLevels();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSunLevels DeserializeBuffer(byte[] buffer, int length, Packet_ServerSunLevels instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSunLevels Deserialize(CitoStream stream, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels == null)
        {
            instance.Sunlevels = new int[1];
            instance.SunlevelsCount = 0;
            instance.SunlevelsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.SunlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSunLevels DeserializeLengthDelimited(CitoStream stream, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels == null)
        {
            instance.Sunlevels = new int[1];
            instance.SunlevelsCount = 0;
            instance.SunlevelsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.SunlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSunLevels DeserializeLength(CitoStream stream, int length, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels == null)
        {
            instance.Sunlevels = new int[1];
            instance.SunlevelsCount = 0;
            instance.SunlevelsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.SunlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels != null)
        {
            for(int k=0; k < instance.SunlevelsCount; k++)
            {
                int i1 = instance.Sunlevels[k];
                // Key for field: 1, Varint
                stream.WriteByte(ProtoPlatform.IntToByte(8));
                ProtocolParser.WriteUInt64(stream,i1);
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSunLevels instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSunLevels instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLightLevelsSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLightLevels DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLightLevels instance = new Packet_ServerLightLevels();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLightLevels DeserializeBuffer(byte[] buffer, int length, Packet_ServerLightLevels instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLightLevels Deserialize(CitoStream stream, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels == null)
        {
            instance.Lightlevels = new int[1];
            instance.LightlevelsCount = 0;
            instance.LightlevelsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.LightlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLightLevels DeserializeLengthDelimited(CitoStream stream, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels == null)
        {
            instance.Lightlevels = new int[1];
            instance.LightlevelsCount = 0;
            instance.LightlevelsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.LightlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLightLevels DeserializeLength(CitoStream stream, int length, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels == null)
        {
            instance.Lightlevels = new int[1];
            instance.LightlevelsCount = 0;
            instance.LightlevelsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.LightlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels != null)
        {
            for(int k=0; k < instance.LightlevelsCount; k++)
            {
                int i1 = instance.Lightlevels[k];
                // Key for field: 1, Varint
                stream.WriteByte(ProtoPlatform.IntToByte(8));
                ProtocolParser.WriteUInt64(stream,i1);
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLightLevels instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLightLevels instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerCraftingRecipesSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerCraftingRecipes DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerCraftingRecipes instance = new Packet_ServerCraftingRecipes();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerCraftingRecipes DeserializeBuffer(byte[] buffer, int length, Packet_ServerCraftingRecipes instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerCraftingRecipes Deserialize(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes == null)
        {
            instance.CraftingRecipes = new Packet_CraftingRecipe[1];
            instance.CraftingRecipesCount = 0;
            instance.CraftingRecipesLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.CraftingRecipesAdd(Packet_CraftingRecipeSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerCraftingRecipes DeserializeLengthDelimited(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes == null)
        {
            instance.CraftingRecipes = new Packet_CraftingRecipe[1];
            instance.CraftingRecipesCount = 0;
            instance.CraftingRecipesLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.CraftingRecipesAdd(Packet_CraftingRecipeSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerCraftingRecipes DeserializeLength(CitoStream stream, int length, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes == null)
        {
            instance.CraftingRecipes = new Packet_CraftingRecipe[1];
            instance.CraftingRecipesCount = 0;
            instance.CraftingRecipesLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.CraftingRecipesAdd(Packet_CraftingRecipeSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes != null)
        {
            for(int k=0; k < instance.CraftingRecipesCount; k++)
            {
                Packet_CraftingRecipe i1 = instance.CraftingRecipes[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_CraftingRecipeSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerCraftingRecipes instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_IngredientSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Ingredient DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Ingredient instance = new Packet_Ingredient();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Ingredient DeserializeBuffer(byte[] buffer, int length, Packet_Ingredient instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Ingredient Deserialize(CitoStream stream, Packet_Ingredient instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Amount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Ingredient DeserializeLengthDelimited(CitoStream stream, Packet_Ingredient instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Amount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Ingredient DeserializeLength(CitoStream stream, int length, Packet_Ingredient instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Amount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Ingredient instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Type);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Amount);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Ingredient instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Ingredient instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_CraftingRecipeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_CraftingRecipe DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_CraftingRecipe instance = new Packet_CraftingRecipe();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_CraftingRecipe DeserializeBuffer(byte[] buffer, int length, Packet_CraftingRecipe instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_CraftingRecipe Deserialize(CitoStream stream, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients == null)
        {
            instance.Ingredients = new Packet_Ingredient[1];
            instance.IngredientsCount = 0;
            instance.IngredientsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.IngredientsAdd(Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Output == null)
                    instance.Output = Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_IngredientSerializer.DeserializeLengthDelimited(stream, instance.Output);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_CraftingRecipe DeserializeLengthDelimited(CitoStream stream, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients == null)
        {
            instance.Ingredients = new Packet_Ingredient[1];
            instance.IngredientsCount = 0;
            instance.IngredientsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.IngredientsAdd(Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Output == null)
                    instance.Output = Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_IngredientSerializer.DeserializeLengthDelimited(stream, instance.Output);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_CraftingRecipe DeserializeLength(CitoStream stream, int length, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients == null)
        {
            instance.Ingredients = new Packet_Ingredient[1];
            instance.IngredientsCount = 0;
            instance.IngredientsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.IngredientsAdd(Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Output == null)
                    instance.Output = Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_IngredientSerializer.DeserializeLengthDelimited(stream, instance.Output);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients != null)
        {
            for(int k=0; k < instance.IngredientsCount; k++)
            {
                Packet_Ingredient i1 = instance.Ingredients[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_IngredientSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
        if (instance.Output != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_IngredientSerializer.Serialize(ms2, instance.Output);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_CraftingRecipe instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_CraftingRecipe instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLevelProgressSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLevelProgress DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLevelProgress instance = new Packet_ServerLevelProgress();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLevelProgress DeserializeBuffer(byte[] buffer, int length, Packet_ServerLevelProgress instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelProgress Deserialize(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.PercentComplete = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Status = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.PercentCompleteSubitem = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelProgress DeserializeLengthDelimited(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.PercentComplete = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Status = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.PercentCompleteSubitem = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelProgress DeserializeLength(CitoStream stream, int length, Packet_ServerLevelProgress instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.PercentComplete = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Status = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.PercentCompleteSubitem = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.PercentComplete);
        if (instance.Status != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Status));
        }
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.PercentCompleteSubitem);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLevelProgress instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLevelFinalizeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLevelFinalize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLevelFinalize instance = new Packet_ServerLevelFinalize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLevelFinalize DeserializeBuffer(byte[] buffer, int length, Packet_ServerLevelFinalize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelFinalize Deserialize(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelFinalize DeserializeLengthDelimited(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelFinalize DeserializeLength(CitoStream stream, int length, Packet_ServerLevelFinalize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLevelFinalize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSetBlockSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSetBlock DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSetBlock instance = new Packet_ServerSetBlock();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSetBlock DeserializeBuffer(byte[] buffer, int length, Packet_ServerSetBlock instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSetBlock Deserialize(CitoStream stream, Packet_ServerSetBlock instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSetBlock DeserializeLengthDelimited(CitoStream stream, Packet_ServerSetBlock instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSetBlock DeserializeLength(CitoStream stream, int length, Packet_ServerSetBlock instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSetBlock instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSetBlock instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSetBlock instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFillAreaSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFillArea DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFillArea instance = new Packet_ServerFillArea();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFillArea DeserializeBuffer(byte[] buffer, int length, Packet_ServerFillArea instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillArea Deserialize(CitoStream stream, Packet_ServerFillArea instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillArea DeserializeLengthDelimited(CitoStream stream, Packet_ServerFillArea instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillArea DeserializeLength(CitoStream stream, int length, Packet_ServerFillArea instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFillArea instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X1);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X2);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y1);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y2);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Z1);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Z2);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.BlockCount);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFillArea instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFillArea instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFillAreaLimitSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFillAreaLimit DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFillAreaLimit instance = new Packet_ServerFillAreaLimit();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFillAreaLimit DeserializeBuffer(byte[] buffer, int length, Packet_ServerFillAreaLimit instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillAreaLimit Deserialize(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Limit = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillAreaLimit DeserializeLengthDelimited(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Limit = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillAreaLimit DeserializeLength(CitoStream stream, int length, Packet_ServerFillAreaLimit instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Limit = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Limit);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFillAreaLimit instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFreemoveSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFreemove DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFreemove instance = new Packet_ServerFreemove();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFreemove DeserializeBuffer(byte[] buffer, int length, Packet_ServerFreemove instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFreemove Deserialize(CitoStream stream, Packet_ServerFreemove instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.IsEnabled = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFreemove DeserializeLengthDelimited(CitoStream stream, Packet_ServerFreemove instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.IsEnabled = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFreemove DeserializeLength(CitoStream stream, int length, Packet_ServerFreemove instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.IsEnabled = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFreemove instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.IsEnabled);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFreemove instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFreemove instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerMessageSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerMessage DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerMessage instance = new Packet_ServerMessage();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerMessage DeserializeBuffer(byte[] buffer, int length, Packet_ServerMessage instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMessage Deserialize(CitoStream stream, Packet_ServerMessage instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMessage DeserializeLengthDelimited(CitoStream stream, Packet_ServerMessage instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMessage DeserializeLength(CitoStream stream, int length, Packet_ServerMessage instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerMessage instance)
    {
        if (instance.Message != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Message));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerMessage instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerMessage instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerDisconnectPlayerSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerDisconnectPlayer DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerDisconnectPlayer instance = new Packet_ServerDisconnectPlayer();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerDisconnectPlayer DeserializeBuffer(byte[] buffer, int length, Packet_ServerDisconnectPlayer instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDisconnectPlayer Deserialize(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DisconnectReason = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDisconnectPlayer DeserializeLengthDelimited(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DisconnectReason = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDisconnectPlayer DeserializeLength(CitoStream stream, int length, Packet_ServerDisconnectPlayer instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DisconnectReason = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        if (instance.DisconnectReason != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.DisconnectReason));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerDisconnectPlayer instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSoundSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSound DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSound instance = new Packet_ServerSound();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSound DeserializeBuffer(byte[] buffer, int length, Packet_ServerSound instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSound Deserialize(CitoStream stream, Packet_ServerSound instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSound DeserializeLengthDelimited(CitoStream stream, Packet_ServerSound instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSound DeserializeLength(CitoStream stream, int length, Packet_ServerSound instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSound instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Z);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSound instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSound instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFollowSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFollow DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFollow instance = new Packet_ServerFollow();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFollow DeserializeBuffer(byte[] buffer, int length, Packet_ServerFollow instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFollow Deserialize(CitoStream stream, Packet_ServerFollow instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Client = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Tpp = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFollow DeserializeLengthDelimited(CitoStream stream, Packet_ServerFollow instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Client = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Tpp = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFollow DeserializeLength(CitoStream stream, int length, Packet_ServerFollow instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Client = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Tpp = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFollow instance)
    {
        if (instance.Client != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Client));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Tpp);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFollow instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFollow instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBulletSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBullet DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBullet instance = new Packet_ServerBullet();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBullet DeserializeBuffer(byte[] buffer, int length, Packet_ServerBullet instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBullet Deserialize(CitoStream stream, Packet_ServerBullet instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.SpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBullet DeserializeLengthDelimited(CitoStream stream, Packet_ServerBullet instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.SpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBullet DeserializeLength(CitoStream stream, int length, Packet_ServerBullet instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.SpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBullet instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.FromXFloat);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.FromYFloat);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.FromZFloat);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.ToXFloat);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.ToYFloat);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.ToZFloat);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.SpeedFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBullet instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBullet instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerProjectileSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerProjectile DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerProjectile instance = new Packet_ServerProjectile();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerProjectile DeserializeBuffer(byte[] buffer, int length, Packet_ServerProjectile instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerProjectile Deserialize(CitoStream stream, Packet_ServerProjectile instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.VelocityXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.VelocityYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.VelocityZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ExplodesAfterFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.SourcePlayerID = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerProjectile DeserializeLengthDelimited(CitoStream stream, Packet_ServerProjectile instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.VelocityXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.VelocityYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.VelocityZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ExplodesAfterFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.SourcePlayerID = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerProjectile DeserializeLength(CitoStream stream, int length, Packet_ServerProjectile instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.VelocityXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.VelocityYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.VelocityZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ExplodesAfterFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.SourcePlayerID = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerProjectile instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.FromXFloat);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.FromYFloat);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.FromZFloat);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.VelocityXFloat);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.VelocityYFloat);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.VelocityZFloat);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.BlockId);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.ExplodesAfterFloat);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.SourcePlayerID);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerProjectile instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerProjectile instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerExplosionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerExplosion DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerExplosion instance = new Packet_ServerExplosion();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerExplosion DeserializeBuffer(byte[] buffer, int length, Packet_ServerExplosion instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerExplosion Deserialize(CitoStream stream, Packet_ServerExplosion instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.XFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.YFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsRelativeToPlayerPosition = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.TimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerExplosion DeserializeLengthDelimited(CitoStream stream, Packet_ServerExplosion instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.XFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.YFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsRelativeToPlayerPosition = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.TimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerExplosion DeserializeLength(CitoStream stream, int length, Packet_ServerExplosion instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.XFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.YFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsRelativeToPlayerPosition = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.TimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerExplosion instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.XFloat);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.YFloat);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.ZFloat);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.IsRelativeToPlayerPosition);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.RangeFloat);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.TimeFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerExplosion instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerExplosion instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerQueryAnswerSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerQueryAnswer DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerQueryAnswer instance = new Packet_ServerQueryAnswer();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerQueryAnswer DeserializeBuffer(byte[] buffer, int length, Packet_ServerQueryAnswer instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerQueryAnswer Deserialize(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.MOTD = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.PlayerCount = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxPlayers = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.PlayerList = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.GameMode = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.Password = ProtocolParser.ReadBool(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.PublicHash = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 LengthDelimited
            case 82:
                instance.ServerVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                instance.ServerThumbnail = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerQueryAnswer DeserializeLengthDelimited(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.MOTD = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.PlayerCount = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxPlayers = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.PlayerList = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.GameMode = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.Password = ProtocolParser.ReadBool(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.PublicHash = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 LengthDelimited
            case 82:
                instance.ServerVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                instance.ServerThumbnail = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerQueryAnswer DeserializeLength(CitoStream stream, int length, Packet_ServerQueryAnswer instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.MOTD = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.PlayerCount = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxPlayers = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.PlayerList = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.GameMode = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.Password = ProtocolParser.ReadBool(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.PublicHash = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 LengthDelimited
            case 82:
                instance.ServerVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                instance.ServerThumbnail = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        if (instance.MOTD != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.MOTD));
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.PlayerCount);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.MaxPlayers);
        if (instance.PlayerList != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.PlayerList));
        }
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Port);
        if (instance.GameMode != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.GameMode));
        }
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteBool(stream, instance.Password);
        if (instance.PublicHash != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.PublicHash));
        }
        if (instance.ServerVersion != null)
        {
            // Key for field: 10, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(82));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerVersion));
        }
        // Key for field: 11, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(88));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeX);
        // Key for field: 12, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(96));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeY);
        // Key for field: 13, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(104));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeZ);
        if (instance.ServerThumbnail != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            ProtocolParser.WriteBytes(stream, instance.ServerThumbnail);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerQueryAnswer instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerRedirectSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerRedirect DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerRedirect instance = new Packet_ServerRedirect();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerRedirect DeserializeBuffer(byte[] buffer, int length, Packet_ServerRedirect instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerRedirect Deserialize(CitoStream stream, Packet_ServerRedirect instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.IP = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerRedirect DeserializeLengthDelimited(CitoStream stream, Packet_ServerRedirect instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.IP = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerRedirect DeserializeLength(CitoStream stream, int length, Packet_ServerRedirect instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.IP = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerRedirect instance)
    {
        if (instance.IP != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.IP));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Port);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerRedirect instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerRedirect instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Server DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Server instance = new Packet_Server();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Server DeserializeBuffer(byte[] buffer, int length, Packet_Server instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Server Deserialize(CitoStream stream, Packet_Server instance)
    {
        instance.Id = Packet_ServerIdEnum.ServerIdentification;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Identification == null)
                    instance.Identification = Packet_ServerIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.LevelInitialize == null)
                    instance.LevelInitialize = Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimited(stream, instance.LevelInitialize);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.LevelDataChunk == null)
                    instance.LevelDataChunk = Packet_ServerLevelProgressSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelProgressSerializer.DeserializeLengthDelimited(stream, instance.LevelDataChunk);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.LevelFinalize == null)
                    instance.LevelFinalize = Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimited(stream, instance.LevelFinalize);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ServerSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Message == null)
                    instance.Message = Packet_ServerMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.DisconnectPlayer == null)
                    instance.DisconnectPlayer = Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimited(stream, instance.DisconnectPlayer);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Chunk_ == null)
                    instance.Chunk_ = Packet_ServerChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkSerializer.DeserializeLengthDelimited(stream, instance.Chunk_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_ServerInventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerInventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Season == null)
                    instance.Season = Packet_ServerSeasonSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSeasonSerializer.DeserializeLengthDelimited(stream, instance.Season);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.BlobInitialize == null)
                    instance.BlobInitialize = Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimited(stream, instance.BlobInitialize);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.BlobPart == null)
                    instance.BlobPart = Packet_ServerBlobPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobPartSerializer.DeserializeLengthDelimited(stream, instance.BlobPart);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 90:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
            case 51:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ServerFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 52:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillAreaLimit == null)
                    instance.FillAreaLimit = Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimited(stream, instance.FillAreaLimit);
                continue;
            case 53:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Freemove == null)
                    instance.Freemove = Packet_ServerFreemoveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFreemoveSerializer.DeserializeLengthDelimited(stream, instance.Freemove);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlobFinalize == null)
                    instance.BlobFinalize = Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimited(stream, instance.BlobFinalize);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.HeightmapChunk == null)
                    instance.HeightmapChunk = Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimited(stream, instance.HeightmapChunk);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ping == null)
                    instance.Ping = Packet_ServerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPingSerializer.DeserializeLengthDelimited(stream, instance.Ping);
                continue;
            case 181:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerPing == null)
                    instance.PlayerPing = Packet_ServerPlayerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerPingSerializer.DeserializeLengthDelimited(stream, instance.PlayerPing);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Sound == null)
                    instance.Sound = Packet_ServerSoundSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSoundSerializer.DeserializeLengthDelimited(stream, instance.Sound);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Monster == null)
                    instance.Monster = Packet_ServerMonstersSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMonstersSerializer.DeserializeLengthDelimited(stream, instance.Monster);
                continue;
            case 22:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerSpawnPosition == null)
                    instance.PlayerSpawnPosition = Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimited(stream, instance.PlayerSpawnPosition);
                continue;
            case 23:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockTypes == null)
                    instance.BlockTypes = Packet_ServerBlockTypesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypesSerializer.DeserializeLengthDelimited(stream, instance.BlockTypes);
                continue;
            case 24:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.SunLevels == null)
                    instance.SunLevels = Packet_ServerSunLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSunLevelsSerializer.DeserializeLengthDelimited(stream, instance.SunLevels);
                continue;
            case 25:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.LightLevels == null)
                    instance.LightLevels = Packet_ServerLightLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLightLevelsSerializer.DeserializeLengthDelimited(stream, instance.LightLevels);
                continue;
            case 26:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.CraftingRecipes == null)
                    instance.CraftingRecipes = Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimited(stream, instance.CraftingRecipes);
                continue;
            case 27:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Dialog == null)
                    instance.Dialog = Packet_ServerDialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
            case 28:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Follow == null)
                    instance.Follow = Packet_ServerFollowSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFollowSerializer.DeserializeLengthDelimited(stream, instance.Follow);
                continue;
            case 29:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Bullet == null)
                    instance.Bullet = Packet_ServerBulletSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBulletSerializer.DeserializeLengthDelimited(stream, instance.Bullet);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ammo == null)
                    instance.Ammo = Packet_ServerAmmoSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerAmmoSerializer.DeserializeLengthDelimited(stream, instance.Ammo);
                continue;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockType == null)
                    instance.BlockType = Packet_ServerBlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypeSerializer.DeserializeLengthDelimited(stream, instance.BlockType);
                continue;
            case 32:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.ChunkPart == null)
                    instance.ChunkPart = Packet_ServerChunkPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkPartSerializer.DeserializeLengthDelimited(stream, instance.ChunkPart);
                continue;
            case 33:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Explosion == null)
                    instance.Explosion = Packet_ServerExplosionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerExplosionSerializer.DeserializeLengthDelimited(stream, instance.Explosion);
                continue;
            case 34:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Projectile == null)
                    instance.Projectile = Packet_ServerProjectileSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerProjectileSerializer.DeserializeLengthDelimited(stream, instance.Projectile);
                continue;
            case 35:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Translation == null)
                    instance.Translation = Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimited(stream, instance.Translation);
                continue;
            case 36:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.QueryAnswer == null)
                    instance.QueryAnswer = Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimited(stream, instance.QueryAnswer);
                continue;
            case 37:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Redirect == null)
                    instance.Redirect = Packet_ServerRedirectSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerRedirectSerializer.DeserializeLengthDelimited(stream, instance.Redirect);
                continue;
            case 39:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntitySpawn == null)
                    instance.EntitySpawn = Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimited(stream, instance.EntitySpawn);
                continue;
            case 40:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityPosition == null)
                    instance.EntityPosition = Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.EntityPosition);
                continue;
            case 41:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityDespawn == null)
                    instance.EntityDespawn = Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimited(stream, instance.EntityDespawn);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Server DeserializeLengthDelimited(CitoStream stream, Packet_Server instance)
    {
        instance.Id = Packet_ServerIdEnum.ServerIdentification;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Identification == null)
                    instance.Identification = Packet_ServerIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.LevelInitialize == null)
                    instance.LevelInitialize = Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimited(stream, instance.LevelInitialize);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.LevelDataChunk == null)
                    instance.LevelDataChunk = Packet_ServerLevelProgressSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelProgressSerializer.DeserializeLengthDelimited(stream, instance.LevelDataChunk);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.LevelFinalize == null)
                    instance.LevelFinalize = Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimited(stream, instance.LevelFinalize);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ServerSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Message == null)
                    instance.Message = Packet_ServerMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.DisconnectPlayer == null)
                    instance.DisconnectPlayer = Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimited(stream, instance.DisconnectPlayer);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Chunk_ == null)
                    instance.Chunk_ = Packet_ServerChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkSerializer.DeserializeLengthDelimited(stream, instance.Chunk_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_ServerInventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerInventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Season == null)
                    instance.Season = Packet_ServerSeasonSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSeasonSerializer.DeserializeLengthDelimited(stream, instance.Season);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.BlobInitialize == null)
                    instance.BlobInitialize = Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimited(stream, instance.BlobInitialize);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.BlobPart == null)
                    instance.BlobPart = Packet_ServerBlobPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobPartSerializer.DeserializeLengthDelimited(stream, instance.BlobPart);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 90:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
            case 51:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ServerFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 52:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillAreaLimit == null)
                    instance.FillAreaLimit = Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimited(stream, instance.FillAreaLimit);
                continue;
            case 53:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Freemove == null)
                    instance.Freemove = Packet_ServerFreemoveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFreemoveSerializer.DeserializeLengthDelimited(stream, instance.Freemove);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlobFinalize == null)
                    instance.BlobFinalize = Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimited(stream, instance.BlobFinalize);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.HeightmapChunk == null)
                    instance.HeightmapChunk = Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimited(stream, instance.HeightmapChunk);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ping == null)
                    instance.Ping = Packet_ServerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPingSerializer.DeserializeLengthDelimited(stream, instance.Ping);
                continue;
            case 181:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerPing == null)
                    instance.PlayerPing = Packet_ServerPlayerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerPingSerializer.DeserializeLengthDelimited(stream, instance.PlayerPing);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Sound == null)
                    instance.Sound = Packet_ServerSoundSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSoundSerializer.DeserializeLengthDelimited(stream, instance.Sound);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Monster == null)
                    instance.Monster = Packet_ServerMonstersSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMonstersSerializer.DeserializeLengthDelimited(stream, instance.Monster);
                continue;
            case 22:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerSpawnPosition == null)
                    instance.PlayerSpawnPosition = Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimited(stream, instance.PlayerSpawnPosition);
                continue;
            case 23:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockTypes == null)
                    instance.BlockTypes = Packet_ServerBlockTypesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypesSerializer.DeserializeLengthDelimited(stream, instance.BlockTypes);
                continue;
            case 24:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.SunLevels == null)
                    instance.SunLevels = Packet_ServerSunLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSunLevelsSerializer.DeserializeLengthDelimited(stream, instance.SunLevels);
                continue;
            case 25:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.LightLevels == null)
                    instance.LightLevels = Packet_ServerLightLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLightLevelsSerializer.DeserializeLengthDelimited(stream, instance.LightLevels);
                continue;
            case 26:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.CraftingRecipes == null)
                    instance.CraftingRecipes = Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimited(stream, instance.CraftingRecipes);
                continue;
            case 27:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Dialog == null)
                    instance.Dialog = Packet_ServerDialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
            case 28:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Follow == null)
                    instance.Follow = Packet_ServerFollowSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFollowSerializer.DeserializeLengthDelimited(stream, instance.Follow);
                continue;
            case 29:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Bullet == null)
                    instance.Bullet = Packet_ServerBulletSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBulletSerializer.DeserializeLengthDelimited(stream, instance.Bullet);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ammo == null)
                    instance.Ammo = Packet_ServerAmmoSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerAmmoSerializer.DeserializeLengthDelimited(stream, instance.Ammo);
                continue;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockType == null)
                    instance.BlockType = Packet_ServerBlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypeSerializer.DeserializeLengthDelimited(stream, instance.BlockType);
                continue;
            case 32:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.ChunkPart == null)
                    instance.ChunkPart = Packet_ServerChunkPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkPartSerializer.DeserializeLengthDelimited(stream, instance.ChunkPart);
                continue;
            case 33:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Explosion == null)
                    instance.Explosion = Packet_ServerExplosionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerExplosionSerializer.DeserializeLengthDelimited(stream, instance.Explosion);
                continue;
            case 34:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Projectile == null)
                    instance.Projectile = Packet_ServerProjectileSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerProjectileSerializer.DeserializeLengthDelimited(stream, instance.Projectile);
                continue;
            case 35:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Translation == null)
                    instance.Translation = Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimited(stream, instance.Translation);
                continue;
            case 36:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.QueryAnswer == null)
                    instance.QueryAnswer = Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimited(stream, instance.QueryAnswer);
                continue;
            case 37:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Redirect == null)
                    instance.Redirect = Packet_ServerRedirectSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerRedirectSerializer.DeserializeLengthDelimited(stream, instance.Redirect);
                continue;
            case 39:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntitySpawn == null)
                    instance.EntitySpawn = Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimited(stream, instance.EntitySpawn);
                continue;
            case 40:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityPosition == null)
                    instance.EntityPosition = Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.EntityPosition);
                continue;
            case 41:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityDespawn == null)
                    instance.EntityDespawn = Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimited(stream, instance.EntityDespawn);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Server DeserializeLength(CitoStream stream, int length, Packet_Server instance)
    {
        instance.Id = Packet_ServerIdEnum.ServerIdentification;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Identification == null)
                    instance.Identification = Packet_ServerIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.LevelInitialize == null)
                    instance.LevelInitialize = Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimited(stream, instance.LevelInitialize);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.LevelDataChunk == null)
                    instance.LevelDataChunk = Packet_ServerLevelProgressSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelProgressSerializer.DeserializeLengthDelimited(stream, instance.LevelDataChunk);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.LevelFinalize == null)
                    instance.LevelFinalize = Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimited(stream, instance.LevelFinalize);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ServerSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Message == null)
                    instance.Message = Packet_ServerMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.DisconnectPlayer == null)
                    instance.DisconnectPlayer = Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimited(stream, instance.DisconnectPlayer);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Chunk_ == null)
                    instance.Chunk_ = Packet_ServerChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkSerializer.DeserializeLengthDelimited(stream, instance.Chunk_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_ServerInventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerInventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Season == null)
                    instance.Season = Packet_ServerSeasonSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSeasonSerializer.DeserializeLengthDelimited(stream, instance.Season);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.BlobInitialize == null)
                    instance.BlobInitialize = Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimited(stream, instance.BlobInitialize);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.BlobPart == null)
                    instance.BlobPart = Packet_ServerBlobPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobPartSerializer.DeserializeLengthDelimited(stream, instance.BlobPart);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 90:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
            case 51:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ServerFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 52:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillAreaLimit == null)
                    instance.FillAreaLimit = Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimited(stream, instance.FillAreaLimit);
                continue;
            case 53:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Freemove == null)
                    instance.Freemove = Packet_ServerFreemoveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFreemoveSerializer.DeserializeLengthDelimited(stream, instance.Freemove);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlobFinalize == null)
                    instance.BlobFinalize = Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimited(stream, instance.BlobFinalize);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.HeightmapChunk == null)
                    instance.HeightmapChunk = Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimited(stream, instance.HeightmapChunk);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ping == null)
                    instance.Ping = Packet_ServerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPingSerializer.DeserializeLengthDelimited(stream, instance.Ping);
                continue;
            case 181:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerPing == null)
                    instance.PlayerPing = Packet_ServerPlayerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerPingSerializer.DeserializeLengthDelimited(stream, instance.PlayerPing);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Sound == null)
                    instance.Sound = Packet_ServerSoundSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSoundSerializer.DeserializeLengthDelimited(stream, instance.Sound);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Monster == null)
                    instance.Monster = Packet_ServerMonstersSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMonstersSerializer.DeserializeLengthDelimited(stream, instance.Monster);
                continue;
            case 22:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerSpawnPosition == null)
                    instance.PlayerSpawnPosition = Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimited(stream, instance.PlayerSpawnPosition);
                continue;
            case 23:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockTypes == null)
                    instance.BlockTypes = Packet_ServerBlockTypesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypesSerializer.DeserializeLengthDelimited(stream, instance.BlockTypes);
                continue;
            case 24:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.SunLevels == null)
                    instance.SunLevels = Packet_ServerSunLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSunLevelsSerializer.DeserializeLengthDelimited(stream, instance.SunLevels);
                continue;
            case 25:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.LightLevels == null)
                    instance.LightLevels = Packet_ServerLightLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLightLevelsSerializer.DeserializeLengthDelimited(stream, instance.LightLevels);
                continue;
            case 26:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.CraftingRecipes == null)
                    instance.CraftingRecipes = Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimited(stream, instance.CraftingRecipes);
                continue;
            case 27:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Dialog == null)
                    instance.Dialog = Packet_ServerDialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
            case 28:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Follow == null)
                    instance.Follow = Packet_ServerFollowSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFollowSerializer.DeserializeLengthDelimited(stream, instance.Follow);
                continue;
            case 29:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Bullet == null)
                    instance.Bullet = Packet_ServerBulletSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBulletSerializer.DeserializeLengthDelimited(stream, instance.Bullet);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ammo == null)
                    instance.Ammo = Packet_ServerAmmoSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerAmmoSerializer.DeserializeLengthDelimited(stream, instance.Ammo);
                continue;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockType == null)
                    instance.BlockType = Packet_ServerBlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypeSerializer.DeserializeLengthDelimited(stream, instance.BlockType);
                continue;
            case 32:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.ChunkPart == null)
                    instance.ChunkPart = Packet_ServerChunkPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkPartSerializer.DeserializeLengthDelimited(stream, instance.ChunkPart);
                continue;
            case 33:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Explosion == null)
                    instance.Explosion = Packet_ServerExplosionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerExplosionSerializer.DeserializeLengthDelimited(stream, instance.Explosion);
                continue;
            case 34:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Projectile == null)
                    instance.Projectile = Packet_ServerProjectileSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerProjectileSerializer.DeserializeLengthDelimited(stream, instance.Projectile);
                continue;
            case 35:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Translation == null)
                    instance.Translation = Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimited(stream, instance.Translation);
                continue;
            case 36:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.QueryAnswer == null)
                    instance.QueryAnswer = Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimited(stream, instance.QueryAnswer);
                continue;
            case 37:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Redirect == null)
                    instance.Redirect = Packet_ServerRedirectSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerRedirectSerializer.DeserializeLengthDelimited(stream, instance.Redirect);
                continue;
            case 39:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntitySpawn == null)
                    instance.EntitySpawn = Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimited(stream, instance.EntitySpawn);
                continue;
            case 40:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityPosition == null)
                    instance.EntityPosition = Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.EntityPosition);
                continue;
            case 41:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityDespawn == null)
                    instance.EntityDespawn = Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimited(stream, instance.EntityDespawn);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Server instance)
    {
        if (instance.Id != Packet_ServerIdEnum.ServerIdentification)
        {
            // Key for field: 90, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(208));
            stream.WriteByte(ProtoPlatform.IntToByte(5));
            ProtocolParser.WriteUInt64(stream,instance.Id);
        }
        if (instance.Identification != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            CitoMemoryStream ms1 = new CitoMemoryStream();
            Packet_ServerIdentificationSerializer.Serialize(ms1, instance.Identification);
            // Length delimited byte array
            int ms1Length = ms1.Length();
            ProtocolParser.WriteUInt32_(stream, ms1Length);
            stream.Write(ms1.GetBuffer(), 0, ms1Length);
            
        }
        if (instance.LevelInitialize != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ServerLevelInitializeSerializer.Serialize(ms2, instance.LevelInitialize);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.LevelDataChunk != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ServerLevelProgressSerializer.Serialize(ms3, instance.LevelDataChunk);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.LevelFinalize != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ServerLevelFinalizeSerializer.Serialize(ms4, instance.LevelFinalize);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.SetBlock != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ServerSetBlockSerializer.Serialize(ms5, instance.SetBlock);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.FillArea != null)
        {
            // Key for field: 51, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(3));
            CitoMemoryStream ms51 = new CitoMemoryStream();
            Packet_ServerFillAreaSerializer.Serialize(ms51, instance.FillArea);
            // Length delimited byte array
            int ms51Length = ms51.Length();
            ProtocolParser.WriteUInt32_(stream, ms51Length);
            stream.Write(ms51.GetBuffer(), 0, ms51Length);
            
        }
        if (instance.FillAreaLimit != null)
        {
            // Key for field: 52, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(3));
            CitoMemoryStream ms52 = new CitoMemoryStream();
            Packet_ServerFillAreaLimitSerializer.Serialize(ms52, instance.FillAreaLimit);
            // Length delimited byte array
            int ms52Length = ms52.Length();
            ProtocolParser.WriteUInt32_(stream, ms52Length);
            stream.Write(ms52.GetBuffer(), 0, ms52Length);
            
        }
        if (instance.Freemove != null)
        {
            // Key for field: 53, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(3));
            CitoMemoryStream ms53 = new CitoMemoryStream();
            Packet_ServerFreemoveSerializer.Serialize(ms53, instance.Freemove);
            // Length delimited byte array
            int ms53Length = ms53.Length();
            ProtocolParser.WriteUInt32_(stream, ms53Length);
            stream.Write(ms53.GetBuffer(), 0, ms53Length);
            
        }
        if (instance.Message != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            CitoMemoryStream ms9 = new CitoMemoryStream();
            Packet_ServerMessageSerializer.Serialize(ms9, instance.Message);
            // Length delimited byte array
            int ms9Length = ms9.Length();
            ProtocolParser.WriteUInt32_(stream, ms9Length);
            stream.Write(ms9.GetBuffer(), 0, ms9Length);
            
        }
        if (instance.DisconnectPlayer != null)
        {
            // Key for field: 10, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(82));
            CitoMemoryStream ms10 = new CitoMemoryStream();
            Packet_ServerDisconnectPlayerSerializer.Serialize(ms10, instance.DisconnectPlayer);
            // Length delimited byte array
            int ms10Length = ms10.Length();
            ProtocolParser.WriteUInt32_(stream, ms10Length);
            stream.Write(ms10.GetBuffer(), 0, ms10Length);
            
        }
        if (instance.Chunk_ != null)
        {
            // Key for field: 11, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(90));
            CitoMemoryStream ms11 = new CitoMemoryStream();
            Packet_ServerChunkSerializer.Serialize(ms11, instance.Chunk_);
            // Length delimited byte array
            int ms11Length = ms11.Length();
            ProtocolParser.WriteUInt32_(stream, ms11Length);
            stream.Write(ms11.GetBuffer(), 0, ms11Length);
            
        }
        if (instance.Inventory != null)
        {
            // Key for field: 12, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(98));
            CitoMemoryStream ms12 = new CitoMemoryStream();
            Packet_ServerInventorySerializer.Serialize(ms12, instance.Inventory);
            // Length delimited byte array
            int ms12Length = ms12.Length();
            ProtocolParser.WriteUInt32_(stream, ms12Length);
            stream.Write(ms12.GetBuffer(), 0, ms12Length);
            
        }
        if (instance.Season != null)
        {
            // Key for field: 13, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(106));
            CitoMemoryStream ms13 = new CitoMemoryStream();
            Packet_ServerSeasonSerializer.Serialize(ms13, instance.Season);
            // Length delimited byte array
            int ms13Length = ms13.Length();
            ProtocolParser.WriteUInt32_(stream, ms13Length);
            stream.Write(ms13.GetBuffer(), 0, ms13Length);
            
        }
        if (instance.BlobInitialize != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            CitoMemoryStream ms14 = new CitoMemoryStream();
            Packet_ServerBlobInitializeSerializer.Serialize(ms14, instance.BlobInitialize);
            // Length delimited byte array
            int ms14Length = ms14.Length();
            ProtocolParser.WriteUInt32_(stream, ms14Length);
            stream.Write(ms14.GetBuffer(), 0, ms14Length);
            
        }
        if (instance.BlobPart != null)
        {
            // Key for field: 15, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(122));
            CitoMemoryStream ms15 = new CitoMemoryStream();
            Packet_ServerBlobPartSerializer.Serialize(ms15, instance.BlobPart);
            // Length delimited byte array
            int ms15Length = ms15.Length();
            ProtocolParser.WriteUInt32_(stream, ms15Length);
            stream.Write(ms15.GetBuffer(), 0, ms15Length);
            
        }
        if (instance.BlobFinalize != null)
        {
            // Key for field: 16, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(130));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms16 = new CitoMemoryStream();
            Packet_ServerBlobFinalizeSerializer.Serialize(ms16, instance.BlobFinalize);
            // Length delimited byte array
            int ms16Length = ms16.Length();
            ProtocolParser.WriteUInt32_(stream, ms16Length);
            stream.Write(ms16.GetBuffer(), 0, ms16Length);
            
        }
        if (instance.HeightmapChunk != null)
        {
            // Key for field: 17, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms17 = new CitoMemoryStream();
            Packet_ServerHeightmapChunkSerializer.Serialize(ms17, instance.HeightmapChunk);
            // Length delimited byte array
            int ms17Length = ms17.Length();
            ProtocolParser.WriteUInt32_(stream, ms17Length);
            stream.Write(ms17.GetBuffer(), 0, ms17Length);
            
        }
        if (instance.Ping != null)
        {
            // Key for field: 18, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(146));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms18 = new CitoMemoryStream();
            Packet_ServerPingSerializer.Serialize(ms18, instance.Ping);
            // Length delimited byte array
            int ms18Length = ms18.Length();
            ProtocolParser.WriteUInt32_(stream, ms18Length);
            stream.Write(ms18.GetBuffer(), 0, ms18Length);
            
        }
        if (instance.PlayerPing != null)
        {
            // Key for field: 181, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(11));
            CitoMemoryStream ms181 = new CitoMemoryStream();
            Packet_ServerPlayerPingSerializer.Serialize(ms181, instance.PlayerPing);
            // Length delimited byte array
            int ms181Length = ms181.Length();
            ProtocolParser.WriteUInt32_(stream, ms181Length);
            stream.Write(ms181.GetBuffer(), 0, ms181Length);
            
        }
        if (instance.Sound != null)
        {
            // Key for field: 19, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms19 = new CitoMemoryStream();
            Packet_ServerSoundSerializer.Serialize(ms19, instance.Sound);
            // Length delimited byte array
            int ms19Length = ms19.Length();
            ProtocolParser.WriteUInt32_(stream, ms19Length);
            stream.Write(ms19.GetBuffer(), 0, ms19Length);
            
        }
        if (instance.PlayerStats != null)
        {
            // Key for field: 20, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms20 = new CitoMemoryStream();
            Packet_ServerPlayerStatsSerializer.Serialize(ms20, instance.PlayerStats);
            // Length delimited byte array
            int ms20Length = ms20.Length();
            ProtocolParser.WriteUInt32_(stream, ms20Length);
            stream.Write(ms20.GetBuffer(), 0, ms20Length);
            
        }
        if (instance.Monster != null)
        {
            // Key for field: 21, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms21 = new CitoMemoryStream();
            Packet_ServerMonstersSerializer.Serialize(ms21, instance.Monster);
            // Length delimited byte array
            int ms21Length = ms21.Length();
            ProtocolParser.WriteUInt32_(stream, ms21Length);
            stream.Write(ms21.GetBuffer(), 0, ms21Length);
            
        }
        if (instance.PlayerSpawnPosition != null)
        {
            // Key for field: 22, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(178));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms22 = new CitoMemoryStream();
            Packet_ServerPlayerSpawnPositionSerializer.Serialize(ms22, instance.PlayerSpawnPosition);
            // Length delimited byte array
            int ms22Length = ms22.Length();
            ProtocolParser.WriteUInt32_(stream, ms22Length);
            stream.Write(ms22.GetBuffer(), 0, ms22Length);
            
        }
        if (instance.BlockTypes != null)
        {
            // Key for field: 23, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(186));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms23 = new CitoMemoryStream();
            Packet_ServerBlockTypesSerializer.Serialize(ms23, instance.BlockTypes);
            // Length delimited byte array
            int ms23Length = ms23.Length();
            ProtocolParser.WriteUInt32_(stream, ms23Length);
            stream.Write(ms23.GetBuffer(), 0, ms23Length);
            
        }
        if (instance.SunLevels != null)
        {
            // Key for field: 24, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(194));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms24 = new CitoMemoryStream();
            Packet_ServerSunLevelsSerializer.Serialize(ms24, instance.SunLevels);
            // Length delimited byte array
            int ms24Length = ms24.Length();
            ProtocolParser.WriteUInt32_(stream, ms24Length);
            stream.Write(ms24.GetBuffer(), 0, ms24Length);
            
        }
        if (instance.LightLevels != null)
        {
            // Key for field: 25, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(202));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms25 = new CitoMemoryStream();
            Packet_ServerLightLevelsSerializer.Serialize(ms25, instance.LightLevels);
            // Length delimited byte array
            int ms25Length = ms25.Length();
            ProtocolParser.WriteUInt32_(stream, ms25Length);
            stream.Write(ms25.GetBuffer(), 0, ms25Length);
            
        }
        if (instance.CraftingRecipes != null)
        {
            // Key for field: 26, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(210));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms26 = new CitoMemoryStream();
            Packet_ServerCraftingRecipesSerializer.Serialize(ms26, instance.CraftingRecipes);
            // Length delimited byte array
            int ms26Length = ms26.Length();
            ProtocolParser.WriteUInt32_(stream, ms26Length);
            stream.Write(ms26.GetBuffer(), 0, ms26Length);
            
        }
        if (instance.Dialog != null)
        {
            // Key for field: 27, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(218));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms27 = new CitoMemoryStream();
            Packet_ServerDialogSerializer.Serialize(ms27, instance.Dialog);
            // Length delimited byte array
            int ms27Length = ms27.Length();
            ProtocolParser.WriteUInt32_(stream, ms27Length);
            stream.Write(ms27.GetBuffer(), 0, ms27Length);
            
        }
        if (instance.Follow != null)
        {
            // Key for field: 28, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(226));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms28 = new CitoMemoryStream();
            Packet_ServerFollowSerializer.Serialize(ms28, instance.Follow);
            // Length delimited byte array
            int ms28Length = ms28.Length();
            ProtocolParser.WriteUInt32_(stream, ms28Length);
            stream.Write(ms28.GetBuffer(), 0, ms28Length);
            
        }
        if (instance.Bullet != null)
        {
            // Key for field: 29, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(234));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms29 = new CitoMemoryStream();
            Packet_ServerBulletSerializer.Serialize(ms29, instance.Bullet);
            // Length delimited byte array
            int ms29Length = ms29.Length();
            ProtocolParser.WriteUInt32_(stream, ms29Length);
            stream.Write(ms29.GetBuffer(), 0, ms29Length);
            
        }
        if (instance.Ammo != null)
        {
            // Key for field: 30, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(242));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms30 = new CitoMemoryStream();
            Packet_ServerAmmoSerializer.Serialize(ms30, instance.Ammo);
            // Length delimited byte array
            int ms30Length = ms30.Length();
            ProtocolParser.WriteUInt32_(stream, ms30Length);
            stream.Write(ms30.GetBuffer(), 0, ms30Length);
            
        }
        if (instance.BlockType != null)
        {
            // Key for field: 31, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(250));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms31 = new CitoMemoryStream();
            Packet_ServerBlockTypeSerializer.Serialize(ms31, instance.BlockType);
            // Length delimited byte array
            int ms31Length = ms31.Length();
            ProtocolParser.WriteUInt32_(stream, ms31Length);
            stream.Write(ms31.GetBuffer(), 0, ms31Length);
            
        }
        if (instance.ChunkPart != null)
        {
            // Key for field: 32, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(130));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms32 = new CitoMemoryStream();
            Packet_ServerChunkPartSerializer.Serialize(ms32, instance.ChunkPart);
            // Length delimited byte array
            int ms32Length = ms32.Length();
            ProtocolParser.WriteUInt32_(stream, ms32Length);
            stream.Write(ms32.GetBuffer(), 0, ms32Length);
            
        }
        if (instance.Explosion != null)
        {
            // Key for field: 33, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms33 = new CitoMemoryStream();
            Packet_ServerExplosionSerializer.Serialize(ms33, instance.Explosion);
            // Length delimited byte array
            int ms33Length = ms33.Length();
            ProtocolParser.WriteUInt32_(stream, ms33Length);
            stream.Write(ms33.GetBuffer(), 0, ms33Length);
            
        }
        if (instance.Projectile != null)
        {
            // Key for field: 34, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(146));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms34 = new CitoMemoryStream();
            Packet_ServerProjectileSerializer.Serialize(ms34, instance.Projectile);
            // Length delimited byte array
            int ms34Length = ms34.Length();
            ProtocolParser.WriteUInt32_(stream, ms34Length);
            stream.Write(ms34.GetBuffer(), 0, ms34Length);
            
        }
        if (instance.Translation != null)
        {
            // Key for field: 35, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms35 = new CitoMemoryStream();
            Packet_ServerTranslatedStringSerializer.Serialize(ms35, instance.Translation);
            // Length delimited byte array
            int ms35Length = ms35.Length();
            ProtocolParser.WriteUInt32_(stream, ms35Length);
            stream.Write(ms35.GetBuffer(), 0, ms35Length);
            
        }
        if (instance.QueryAnswer != null)
        {
            // Key for field: 36, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms36 = new CitoMemoryStream();
            Packet_ServerQueryAnswerSerializer.Serialize(ms36, instance.QueryAnswer);
            // Length delimited byte array
            int ms36Length = ms36.Length();
            ProtocolParser.WriteUInt32_(stream, ms36Length);
            stream.Write(ms36.GetBuffer(), 0, ms36Length);
            
        }
        if (instance.Redirect != null)
        {
            // Key for field: 37, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms37 = new CitoMemoryStream();
            Packet_ServerRedirectSerializer.Serialize(ms37, instance.Redirect);
            // Length delimited byte array
            int ms37Length = ms37.Length();
            ProtocolParser.WriteUInt32_(stream, ms37Length);
            stream.Write(ms37.GetBuffer(), 0, ms37Length);
            
        }
        if (instance.EntitySpawn != null)
        {
            // Key for field: 39, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(186));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms39 = new CitoMemoryStream();
            Packet_ServerEntitySpawnSerializer.Serialize(ms39, instance.EntitySpawn);
            // Length delimited byte array
            int ms39Length = ms39.Length();
            ProtocolParser.WriteUInt32_(stream, ms39Length);
            stream.Write(ms39.GetBuffer(), 0, ms39Length);
            
        }
        if (instance.EntityPosition != null)
        {
            // Key for field: 40, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(194));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms40 = new CitoMemoryStream();
            Packet_ServerEntityPositionAndOrientationSerializer.Serialize(ms40, instance.EntityPosition);
            // Length delimited byte array
            int ms40Length = ms40.Length();
            ProtocolParser.WriteUInt32_(stream, ms40Length);
            stream.Write(ms40.GetBuffer(), 0, ms40Length);
            
        }
        if (instance.EntityDespawn != null)
        {
            // Key for field: 41, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(202));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms41 = new CitoMemoryStream();
            Packet_ServerEntityDespawnSerializer.Serialize(ms41, instance.EntityDespawn);
            // Length delimited byte array
            int ms41Length = ms41.Length();
            ProtocolParser.WriteUInt32_(stream, ms41Length);
            stream.Write(ms41.GetBuffer(), 0, ms41Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Server instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Server instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntitySpawnSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntitySpawn DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntitySpawn instance = new Packet_ServerEntitySpawn();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntitySpawn DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntitySpawn instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntitySpawn Deserialize(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Entity_ == null)
                    instance.Entity_ = Packet_ServerEntitySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySerializer.DeserializeLengthDelimited(stream, instance.Entity_);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntitySpawn DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Entity_ == null)
                    instance.Entity_ = Packet_ServerEntitySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySerializer.DeserializeLengthDelimited(stream, instance.Entity_);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntitySpawn DeserializeLength(CitoStream stream, int length, Packet_ServerEntitySpawn instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Entity_ == null)
                    instance.Entity_ = Packet_ServerEntitySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySerializer.DeserializeLengthDelimited(stream, instance.Entity_);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        if (instance.Entity_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ServerEntitySerializer.Serialize(ms2, instance.Entity_);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntitySpawn instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityPositionAndOrientationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityPositionAndOrientation instance = new Packet_ServerEntityPositionAndOrientation();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityPositionAndOrientation instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPositionAndOrientation Deserialize(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeLength(CitoStream stream, int length, Packet_ServerEntityPositionAndOrientation instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        if (instance.PositionAndOrientation != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms2, instance.PositionAndOrientation);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityPositionAndOrientation instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDespawnSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDespawn DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDespawn instance = new Packet_ServerEntityDespawn();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDespawn DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDespawn instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDespawn Deserialize(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDespawn DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDespawn DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDespawn instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDespawn instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntitySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntity DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntity instance = new Packet_ServerEntity();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntity DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntity instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntity Deserialize(CitoStream stream, Packet_ServerEntity instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Position == null)
                    instance.Position = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.Position);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.DrawModel == null)
                    instance.DrawModel = Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimited(stream, instance.DrawModel);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.DrawName_ == null)
                    instance.DrawName_ = Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimited(stream, instance.DrawName_);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.DrawText == null)
                    instance.DrawText = Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimited(stream, instance.DrawText);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.DrawBlock == null)
                    instance.DrawBlock = Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimited(stream, instance.DrawBlock);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Push == null)
                    instance.Push = Packet_ServerEntityPushSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPushSerializer.DeserializeLengthDelimited(stream, instance.Push);
                continue;
                // Field 7 Varint
            case 56:
                instance.Usable = ProtocolParser.ReadBool(stream);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.DrawArea == null)
                    instance.DrawArea = Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimited(stream, instance.DrawArea);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntity DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntity instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Position == null)
                    instance.Position = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.Position);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.DrawModel == null)
                    instance.DrawModel = Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimited(stream, instance.DrawModel);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.DrawName_ == null)
                    instance.DrawName_ = Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimited(stream, instance.DrawName_);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.DrawText == null)
                    instance.DrawText = Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimited(stream, instance.DrawText);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.DrawBlock == null)
                    instance.DrawBlock = Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimited(stream, instance.DrawBlock);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Push == null)
                    instance.Push = Packet_ServerEntityPushSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPushSerializer.DeserializeLengthDelimited(stream, instance.Push);
                continue;
                // Field 7 Varint
            case 56:
                instance.Usable = ProtocolParser.ReadBool(stream);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.DrawArea == null)
                    instance.DrawArea = Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimited(stream, instance.DrawArea);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntity DeserializeLength(CitoStream stream, int length, Packet_ServerEntity instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Position == null)
                    instance.Position = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.Position);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.DrawModel == null)
                    instance.DrawModel = Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimited(stream, instance.DrawModel);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.DrawName_ == null)
                    instance.DrawName_ = Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimited(stream, instance.DrawName_);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.DrawText == null)
                    instance.DrawText = Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimited(stream, instance.DrawText);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.DrawBlock == null)
                    instance.DrawBlock = Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimited(stream, instance.DrawBlock);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Push == null)
                    instance.Push = Packet_ServerEntityPushSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPushSerializer.DeserializeLengthDelimited(stream, instance.Push);
                continue;
                // Field 7 Varint
            case 56:
                instance.Usable = ProtocolParser.ReadBool(stream);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.DrawArea == null)
                    instance.DrawArea = Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimited(stream, instance.DrawArea);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntity instance)
    {
        if (instance.Position != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            CitoMemoryStream ms1 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms1, instance.Position);
            // Length delimited byte array
            int ms1Length = ms1.Length();
            ProtocolParser.WriteUInt32_(stream, ms1Length);
            stream.Write(ms1.GetBuffer(), 0, ms1Length);
            
        }
        if (instance.DrawModel != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ServerEntityAnimatedModelSerializer.Serialize(ms2, instance.DrawModel);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.DrawName_ != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ServerEntityDrawNameSerializer.Serialize(ms3, instance.DrawName_);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.DrawText != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ServerEntityDrawTextSerializer.Serialize(ms4, instance.DrawText);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.DrawBlock != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ServerEntityDrawBlockSerializer.Serialize(ms5, instance.DrawBlock);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.Push != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            CitoMemoryStream ms6 = new CitoMemoryStream();
            Packet_ServerEntityPushSerializer.Serialize(ms6, instance.Push);
            // Length delimited byte array
            int ms6Length = ms6.Length();
            ProtocolParser.WriteUInt32_(stream, ms6Length);
            stream.Write(ms6.GetBuffer(), 0, ms6Length);
            
        }
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteBool(stream, instance.Usable);
        if (instance.PlayerStats != null)
        {
            // Key for field: 8, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(66));
            CitoMemoryStream ms8 = new CitoMemoryStream();
            Packet_ServerPlayerStatsSerializer.Serialize(ms8, instance.PlayerStats);
            // Length delimited byte array
            int ms8Length = ms8.Length();
            ProtocolParser.WriteUInt32_(stream, ms8Length);
            stream.Write(ms8.GetBuffer(), 0, ms8Length);
            
        }
        if (instance.DrawArea != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            CitoMemoryStream ms9 = new CitoMemoryStream();
            Packet_ServerEntityDrawAreaSerializer.Serialize(ms9, instance.DrawArea);
            // Length delimited byte array
            int ms9Length = ms9.Length();
            ProtocolParser.WriteUInt32_(stream, ms9Length);
            stream.Write(ms9.GetBuffer(), 0, ms9Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntity instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntity instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawAreaSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawArea DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawArea instance = new Packet_ServerEntityDrawArea();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawArea DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawArea instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawArea Deserialize(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Sizex = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Sizey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Sizez = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.VisibleToClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawArea DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Sizex = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Sizey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Sizez = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.VisibleToClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawArea DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawArea instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Sizex = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Sizey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Sizez = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.VisibleToClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Sizex);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Sizey);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Sizez);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.VisibleToClientId);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawArea instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityAnimatedModelSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityAnimatedModel instance = new Packet_ServerEntityAnimatedModel();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityAnimatedModel instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityAnimatedModel Deserialize(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Model_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Texture_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.EyeHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ModelHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.DownloadSkin = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Model_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Texture_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.EyeHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ModelHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.DownloadSkin = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeLength(CitoStream stream, int length, Packet_ServerEntityAnimatedModel instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Model_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Texture_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.EyeHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ModelHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.DownloadSkin = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        if (instance.Model_ != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Model_));
        }
        if (instance.Texture_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Texture_));
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.EyeHeight);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.ModelHeight);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.DownloadSkin);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityAnimatedModel instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawNameSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawName DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawName instance = new Packet_ServerEntityDrawName();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawName DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawName instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawName Deserialize(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.OnlyWhenSelected = ProtocolParser.ReadBool(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ClientAutoComplete = ProtocolParser.ReadBool(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.Color = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawName DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.OnlyWhenSelected = ProtocolParser.ReadBool(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ClientAutoComplete = ProtocolParser.ReadBool(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.Color = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawName DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawName instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.OnlyWhenSelected = ProtocolParser.ReadBool(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ClientAutoComplete = ProtocolParser.ReadBool(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.Color = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteBool(stream, instance.OnlyWhenSelected);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteBool(stream, instance.ClientAutoComplete);
        if (instance.Color != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Color));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawName instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawTextSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawText DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawText instance = new Packet_ServerEntityDrawText();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawText DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawText instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawText Deserialize(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Dx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Dy = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Dz = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Rotx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Roty = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Rotz = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawText DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Dx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Dy = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Dz = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Rotx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Roty = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Rotz = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawText DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawText instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Dx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Dy = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Dz = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Rotx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Roty = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Rotz = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        if (instance.Text != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Text));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Dx);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Dy);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Dz);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Rotx);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Roty);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.Rotz);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawText instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawBlockSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawBlock DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawBlock instance = new Packet_ServerEntityDrawBlock();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawBlock DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawBlock instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawBlock Deserialize(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawBlock DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawBlock DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawBlock instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawBlock instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityPushSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityPush DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityPush instance = new Packet_ServerEntityPush();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityPush DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityPush instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPush Deserialize(CitoStream stream, Packet_ServerEntityPush instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPush DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityPush instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPush DeserializeLength(CitoStream stream, int length, Packet_ServerEntityPush instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityPush instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.RangeFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityPush instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityPush instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_IntIntSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_IntInt DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_IntInt instance = new Packet_IntInt();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_IntInt DeserializeBuffer(byte[] buffer, int length, Packet_IntInt instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_IntInt Deserialize(CitoStream stream, Packet_IntInt instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Value_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntInt DeserializeLengthDelimited(CitoStream stream, Packet_IntInt instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Value_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntInt DeserializeLength(CitoStream stream, int length, Packet_IntInt instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Value_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_IntInt instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Key_);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Value_);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_IntInt instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_IntInt instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerAmmoSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerAmmo DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerAmmo instance = new Packet_ServerAmmo();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerAmmo DeserializeBuffer(byte[] buffer, int length, Packet_ServerAmmo instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerAmmo Deserialize(CitoStream stream, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo == null)
        {
            instance.TotalAmmo = new Packet_IntInt[1];
            instance.TotalAmmoCount = 0;
            instance.TotalAmmoLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.TotalAmmoAdd(Packet_IntIntSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerAmmo DeserializeLengthDelimited(CitoStream stream, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo == null)
        {
            instance.TotalAmmo = new Packet_IntInt[1];
            instance.TotalAmmoCount = 0;
            instance.TotalAmmoLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.TotalAmmoAdd(Packet_IntIntSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerAmmo DeserializeLength(CitoStream stream, int length, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo == null)
        {
            instance.TotalAmmo = new Packet_IntInt[1];
            instance.TotalAmmoCount = 0;
            instance.TotalAmmoLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.TotalAmmoAdd(Packet_IntIntSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo != null)
        {
            for(int k=0; k < instance.TotalAmmoCount; k++)
            {
                Packet_IntInt i1 = instance.TotalAmmo[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_IntIntSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerAmmo instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerAmmo instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerChunkPartSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerChunkPart DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerChunkPart instance = new Packet_ServerChunkPart();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerChunkPart DeserializeBuffer(byte[] buffer, int length, Packet_ServerChunkPart instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunkPart Deserialize(CitoStream stream, Packet_ServerChunkPart instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.CompressedChunkPart = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunkPart DeserializeLengthDelimited(CitoStream stream, Packet_ServerChunkPart instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.CompressedChunkPart = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunkPart DeserializeLength(CitoStream stream, int length, Packet_ServerChunkPart instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.CompressedChunkPart = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerChunkPart instance)
    {
        if (instance.CompressedChunkPart != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, instance.CompressedChunkPart);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerChunkPart instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerChunkPart instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerChunkSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerChunk DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerChunk instance = new Packet_ServerChunk();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerChunk DeserializeBuffer(byte[] buffer, int length, Packet_ServerChunk instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunk Deserialize(CitoStream stream, Packet_ServerChunk instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.SizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunk DeserializeLengthDelimited(CitoStream stream, Packet_ServerChunk instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.SizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunk DeserializeLength(CitoStream stream, int length, Packet_ServerChunk instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.SizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerChunk instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.SizeX);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.SizeY);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.SizeZ);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerChunk instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerChunk instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerHeightmapChunkSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerHeightmapChunk DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerHeightmapChunk instance = new Packet_ServerHeightmapChunk();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerHeightmapChunk DeserializeBuffer(byte[] buffer, int length, Packet_ServerHeightmapChunk instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerHeightmapChunk Deserialize(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.CompressedHeightmap = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerHeightmapChunk DeserializeLengthDelimited(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.CompressedHeightmap = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerHeightmapChunk DeserializeLength(CitoStream stream, int length, Packet_ServerHeightmapChunk instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.CompressedHeightmap = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.SizeX);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.SizeY);
        if (instance.CompressedHeightmap != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            ProtocolParser.WriteBytes(stream, instance.CompressedHeightmap);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerHeightmapChunk instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerInventorySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerInventory DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerInventory instance = new Packet_ServerInventory();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerInventory DeserializeBuffer(byte[] buffer, int length, Packet_ServerInventory instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerInventory Deserialize(CitoStream stream, Packet_ServerInventory instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 4 LengthDelimited
            case 34:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_InventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerInventory DeserializeLengthDelimited(CitoStream stream, Packet_ServerInventory instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 4 LengthDelimited
            case 34:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_InventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerInventory DeserializeLength(CitoStream stream, int length, Packet_ServerInventory instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 4 LengthDelimited
            case 34:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_InventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerInventory instance)
    {
        if (instance.Inventory != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_InventorySerializer.Serialize(ms4, instance.Inventory);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerInventory instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerInventory instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPlayerStatsSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPlayerStats DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPlayerStats instance = new Packet_ServerPlayerStats();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPlayerStats DeserializeBuffer(byte[] buffer, int length, Packet_ServerPlayerStats instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerStats Deserialize(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MaxHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerStats DeserializeLengthDelimited(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MaxHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerStats DeserializeLength(CitoStream stream, int length, Packet_ServerPlayerStats instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MaxHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.CurrentHealth);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.MaxHealth);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.CurrentOxygen);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.MaxOxygen);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPlayerStats instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerMonstersSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerMonsters DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerMonsters instance = new Packet_ServerMonsters();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerMonsters DeserializeBuffer(byte[] buffer, int length, Packet_ServerMonsters instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonsters Deserialize(CitoStream stream, Packet_ServerMonsters instance)
    {
        if (instance.Monsters == null)
        {
            instance.Monsters = new Packet_ServerMonster[1];
            instance.MonstersCount = 0;
            instance.MonstersLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.MonstersAdd(Packet_ServerMonsterSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonsters DeserializeLengthDelimited(CitoStream stream, Packet_ServerMonsters instance)
    {
        if (instance.Monsters == null)
        {
            instance.Monsters = new Packet_ServerMonster[1];
            instance.MonstersCount = 0;
            instance.MonstersLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.MonstersAdd(Packet_ServerMonsterSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonsters DeserializeLength(CitoStream stream, int length, Packet_ServerMonsters instance)
    {
        if (instance.Monsters == null)
        {
            instance.Monsters = new Packet_ServerMonster[1];
            instance.MonstersCount = 0;
            instance.MonstersLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.MonstersAdd(Packet_ServerMonsterSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerMonsters instance)
    {
        if (instance.Monsters != null)
        {
            for(int k=0; k < instance.MonstersCount; k++)
            {
                Packet_ServerMonster i1 = instance.Monsters[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_ServerMonsterSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerMonsters instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerMonsters instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerMonsterSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerMonster DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerMonster instance = new Packet_ServerMonster();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerMonster DeserializeBuffer(byte[] buffer, int length, Packet_ServerMonster instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonster Deserialize(CitoStream stream, Packet_ServerMonster instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MonsterType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 4 Varint
            case 32:
                instance.Health = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonster DeserializeLengthDelimited(CitoStream stream, Packet_ServerMonster instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MonsterType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 4 Varint
            case 32:
                instance.Health = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonster DeserializeLength(CitoStream stream, int length, Packet_ServerMonster instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MonsterType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 4 Varint
            case 32:
                instance.Health = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerMonster instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.MonsterType);
        if (instance.PositionAndOrientation != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms3, instance.PositionAndOrientation);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Health);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerMonster instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerMonster instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSeasonSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSeason DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSeason instance = new Packet_ServerSeason();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSeason DeserializeBuffer(byte[] buffer, int length, Packet_ServerSeason instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSeason Deserialize(CitoStream stream, Packet_ServerSeason instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.Hour = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.DayNightCycleSpeedup = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Moon = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSeason DeserializeLengthDelimited(CitoStream stream, Packet_ServerSeason instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.Hour = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.DayNightCycleSpeedup = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Moon = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSeason DeserializeLength(CitoStream stream, int length, Packet_ServerSeason instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.Hour = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.DayNightCycleSpeedup = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Moon = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSeason instance)
    {
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Hour);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.DayNightCycleSpeedup);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Moon);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSeason instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSeason instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerDialogSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerDialog DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerDialog instance = new Packet_ServerDialog();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerDialog DeserializeBuffer(byte[] buffer, int length, Packet_ServerDialog instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDialog Deserialize(CitoStream stream, Packet_ServerDialog instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DialogId = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Dialog == null)
                    instance.Dialog = Packet_DialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDialog DeserializeLengthDelimited(CitoStream stream, Packet_ServerDialog instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DialogId = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Dialog == null)
                    instance.Dialog = Packet_DialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDialog DeserializeLength(CitoStream stream, int length, Packet_ServerDialog instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DialogId = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Dialog == null)
                    instance.Dialog = Packet_DialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerDialog instance)
    {
        if (instance.DialogId != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.DialogId));
        }
        if (instance.Dialog != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_DialogSerializer.Serialize(ms2, instance.Dialog);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerDialog instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerDialog instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPingSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPing DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPing instance = new Packet_ServerPing();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPing DeserializeBuffer(byte[] buffer, int length, Packet_ServerPing instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPing Deserialize(CitoStream stream, Packet_ServerPing instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPing DeserializeLengthDelimited(CitoStream stream, Packet_ServerPing instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPing DeserializeLength(CitoStream stream, int length, Packet_ServerPing instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPing instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPing instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPing instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPlayerPingSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPlayerPing DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPlayerPing instance = new Packet_ServerPlayerPing();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPlayerPing DeserializeBuffer(byte[] buffer, int length, Packet_ServerPlayerPing instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerPing Deserialize(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Ping = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerPing DeserializeLengthDelimited(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Ping = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerPing DeserializeLength(CitoStream stream, int length, Packet_ServerPlayerPing instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Ping = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.ClientId);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Ping);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPlayerPing instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerTranslatedStringSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerTranslatedString DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerTranslatedString instance = new Packet_ServerTranslatedString();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerTranslatedString DeserializeBuffer(byte[] buffer, int length, Packet_ServerTranslatedString instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerTranslatedString Deserialize(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Lang = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Translation = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerTranslatedString DeserializeLengthDelimited(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Lang = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Translation = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerTranslatedString DeserializeLength(CitoStream stream, int length, Packet_ServerTranslatedString instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Lang = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Translation = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        if (instance.Lang != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Lang));
        }
        if (instance.Id != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Id));
        }
        if (instance.Translation != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Translation));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerTranslatedString instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_InventorySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Inventory DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Inventory instance = new Packet_Inventory();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Inventory DeserializeBuffer(byte[] buffer, int length, Packet_Inventory instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Inventory Deserialize(CitoStream stream, Packet_Inventory instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new Packet_PositionItem[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        if (instance.RightHand == null)
        {
            instance.RightHand = new Packet_Item[1];
            instance.RightHandCount = 0;
            instance.RightHandLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 3 LengthDelimited
            case 26:
                if (instance.MainArmor == null)
                    instance.MainArmor = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.MainArmor);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.Boots == null)
                    instance.Boots = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Boots);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Helmet == null)
                    instance.Helmet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Helmet);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Gauntlet == null)
                    instance.Gauntlet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Gauntlet);
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ItemsAdd(Packet_PositionItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.DragDropItem == null)
                    instance.DragDropItem = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.DragDropItem);
                continue;
                // Field 9 LengthDelimited
            case 74:
                // repeated
                instance.RightHandAdd(Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Inventory DeserializeLengthDelimited(CitoStream stream, Packet_Inventory instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new Packet_PositionItem[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        if (instance.RightHand == null)
        {
            instance.RightHand = new Packet_Item[1];
            instance.RightHandCount = 0;
            instance.RightHandLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 3 LengthDelimited
            case 26:
                if (instance.MainArmor == null)
                    instance.MainArmor = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.MainArmor);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.Boots == null)
                    instance.Boots = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Boots);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Helmet == null)
                    instance.Helmet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Helmet);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Gauntlet == null)
                    instance.Gauntlet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Gauntlet);
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ItemsAdd(Packet_PositionItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.DragDropItem == null)
                    instance.DragDropItem = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.DragDropItem);
                continue;
                // Field 9 LengthDelimited
            case 74:
                // repeated
                instance.RightHandAdd(Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Inventory DeserializeLength(CitoStream stream, int length, Packet_Inventory instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new Packet_PositionItem[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        if (instance.RightHand == null)
        {
            instance.RightHand = new Packet_Item[1];
            instance.RightHandCount = 0;
            instance.RightHandLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 3 LengthDelimited
            case 26:
                if (instance.MainArmor == null)
                    instance.MainArmor = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.MainArmor);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.Boots == null)
                    instance.Boots = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Boots);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Helmet == null)
                    instance.Helmet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Helmet);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Gauntlet == null)
                    instance.Gauntlet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Gauntlet);
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ItemsAdd(Packet_PositionItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.DragDropItem == null)
                    instance.DragDropItem = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.DragDropItem);
                continue;
                // Field 9 LengthDelimited
            case 74:
                // repeated
                instance.RightHandAdd(Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Inventory instance)
    {
        if (instance.MainArmor != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms3, instance.MainArmor);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.Boots != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms4, instance.Boots);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.Helmet != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms5, instance.Helmet);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.Gauntlet != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            CitoMemoryStream ms6 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms6, instance.Gauntlet);
            // Length delimited byte array
            int ms6Length = ms6.Length();
            ProtocolParser.WriteUInt32_(stream, ms6Length);
            stream.Write(ms6.GetBuffer(), 0, ms6Length);
            
        }
        if (instance.Items != null)
        {
            for(int k=0; k < instance.ItemsCount; k++)
            {
                Packet_PositionItem i7 = instance.Items[k];
                // Key for field: 7, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(58));
                CitoMemoryStream ms7 = new CitoMemoryStream();
                Packet_PositionItemSerializer.Serialize(ms7, i7);
                // Length delimited byte array
                int ms7Length = ms7.Length();
                ProtocolParser.WriteUInt32_(stream, ms7Length);
                stream.Write(ms7.GetBuffer(), 0, ms7Length);
                
            }
        }
        if (instance.DragDropItem != null)
        {
            // Key for field: 8, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(66));
            CitoMemoryStream ms8 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms8, instance.DragDropItem);
            // Length delimited byte array
            int ms8Length = ms8.Length();
            ProtocolParser.WriteUInt32_(stream, ms8Length);
            stream.Write(ms8.GetBuffer(), 0, ms8Length);
            
        }
        if (instance.RightHand != null)
        {
            for(int k=0; k < instance.RightHandCount; k++)
            {
                Packet_Item i9 = instance.RightHand[k];
                // Key for field: 9, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(74));
                CitoMemoryStream ms9 = new CitoMemoryStream();
                Packet_ItemSerializer.Serialize(ms9, i9);
                // Length delimited byte array
                int ms9Length = ms9.Length();
                ProtocolParser.WriteUInt32_(stream, ms9Length);
                stream.Write(ms9.GetBuffer(), 0, ms9Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Inventory instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Inventory instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ItemSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Item DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Item instance = new Packet_Item();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Item DeserializeBuffer(byte[] buffer, int length, Packet_Item instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Item Deserialize(CitoStream stream, Packet_Item instance)
    {
        instance.ItemClass = Packet_ItemClassEnum.Block;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ItemClass = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.ItemId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Item DeserializeLengthDelimited(CitoStream stream, Packet_Item instance)
    {
        instance.ItemClass = Packet_ItemClassEnum.Block;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ItemClass = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.ItemId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Item DeserializeLength(CitoStream stream, int length, Packet_Item instance)
    {
        instance.ItemClass = Packet_ItemClassEnum.Block;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ItemClass = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.ItemId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Item instance)
    {
        if (instance.ItemClass != Packet_ItemClassEnum.Block)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.ItemClass);
        }
        if (instance.ItemId != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ItemId));
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.BlockId);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.BlockCount);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Item instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Item instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_PositionItemSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_PositionItem DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_PositionItem instance = new Packet_PositionItem();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_PositionItem DeserializeBuffer(byte[] buffer, int length, Packet_PositionItem instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_PositionItem Deserialize(CitoStream stream, Packet_PositionItem instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Key_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Value_ == null)
                    instance.Value_ = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Value_);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionItem DeserializeLengthDelimited(CitoStream stream, Packet_PositionItem instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Key_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Value_ == null)
                    instance.Value_ = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Value_);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionItem DeserializeLength(CitoStream stream, int length, Packet_PositionItem instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Key_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Value_ == null)
                    instance.Value_ = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Value_);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_PositionItem instance)
    {
        if (instance.Key_ != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Key_));
        }
        if (instance.Value_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms2, instance.Value_);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_PositionItem instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_PositionItem instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_DialogSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Dialog DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Dialog instance = new Packet_Dialog();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Dialog DeserializeBuffer(byte[] buffer, int length, Packet_Dialog instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Dialog Deserialize(CitoStream stream, Packet_Dialog instance)
    {
        if (instance.Widgets == null)
        {
            instance.Widgets = new Packet_Widget[1];
            instance.WidgetsCount = 0;
            instance.WidgetsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WidgetsAdd(Packet_WidgetSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 Varint
            case 16:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsModal = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Dialog DeserializeLengthDelimited(CitoStream stream, Packet_Dialog instance)
    {
        if (instance.Widgets == null)
        {
            instance.Widgets = new Packet_Widget[1];
            instance.WidgetsCount = 0;
            instance.WidgetsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WidgetsAdd(Packet_WidgetSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 Varint
            case 16:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsModal = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Dialog DeserializeLength(CitoStream stream, int length, Packet_Dialog instance)
    {
        if (instance.Widgets == null)
        {
            instance.Widgets = new Packet_Widget[1];
            instance.WidgetsCount = 0;
            instance.WidgetsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WidgetsAdd(Packet_WidgetSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 Varint
            case 16:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsModal = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Dialog instance)
    {
        if (instance.Widgets != null)
        {
            for(int k=0; k < instance.WidgetsCount; k++)
            {
                Packet_Widget i1 = instance.Widgets[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_WidgetSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Width);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Height_);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.IsModal);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Dialog instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Dialog instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_WidgetSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Widget DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Widget instance = new Packet_Widget();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Widget DeserializeBuffer(byte[] buffer, int length, Packet_Widget instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Widget Deserialize(CitoStream stream, Packet_Widget instance)
    {
        instance.Type = Packet_WidgetTypeEnum.Image;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Click = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ClickKey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.Image = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Color = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Font == null)
                    instance.Font = Packet_DialogFontSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogFontSerializer.DeserializeLengthDelimited(stream, instance.Font);
                continue;
                // Field 12 Varint
            case 96:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Widget DeserializeLengthDelimited(CitoStream stream, Packet_Widget instance)
    {
        instance.Type = Packet_WidgetTypeEnum.Image;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Click = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ClickKey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.Image = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Color = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Font == null)
                    instance.Font = Packet_DialogFontSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogFontSerializer.DeserializeLengthDelimited(stream, instance.Font);
                continue;
                // Field 12 Varint
            case 96:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Widget DeserializeLength(CitoStream stream, int length, Packet_Widget instance)
    {
        instance.Type = Packet_WidgetTypeEnum.Image;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Click = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ClickKey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.Image = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Color = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Font == null)
                    instance.Font = Packet_DialogFontSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogFontSerializer.DeserializeLengthDelimited(stream, instance.Font);
                continue;
                // Field 12 Varint
            case 96:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Widget instance)
    {
        if (instance.Id != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Id));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Click);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Width);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Height_);
        if (instance.Text != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Text));
        }
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.ClickKey);
        if (instance.Image != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Image));
        }
        // Key for field: 10, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(80));
        ProtocolParser.WriteUInt64(stream,instance.Color);
        if (instance.Font != null)
        {
            // Key for field: 11, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(90));
            CitoMemoryStream ms11 = new CitoMemoryStream();
            Packet_DialogFontSerializer.Serialize(ms11, instance.Font);
            // Length delimited byte array
            int ms11Length = ms11.Length();
            ProtocolParser.WriteUInt32_(stream, ms11Length);
            stream.Write(ms11.GetBuffer(), 0, ms11Length);
            
        }
        if (instance.Type != Packet_WidgetTypeEnum.Image)
        {
            // Key for field: 12, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(96));
            ProtocolParser.WriteUInt64(stream,instance.Type);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Widget instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Widget instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_DialogFontSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_DialogFont DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_DialogFont instance = new Packet_DialogFont();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_DialogFont DeserializeBuffer(byte[] buffer, int length, Packet_DialogFont instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_DialogFont Deserialize(CitoStream stream, Packet_DialogFont instance)
    {
        instance.FontStyle = Packet_DialogFontStyleEnum.Regular;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.FamilyName = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SizeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FontStyle = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_DialogFont DeserializeLengthDelimited(CitoStream stream, Packet_DialogFont instance)
    {
        instance.FontStyle = Packet_DialogFontStyleEnum.Regular;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.FamilyName = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SizeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FontStyle = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_DialogFont DeserializeLength(CitoStream stream, int length, Packet_DialogFont instance)
    {
        instance.FontStyle = Packet_DialogFontStyleEnum.Regular;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.FamilyName = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SizeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FontStyle = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_DialogFont instance)
    {
        if (instance.FamilyName != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.FamilyName));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.SizeFloat);
        if (instance.FontStyle != Packet_DialogFontStyleEnum.Regular)
        {
            // Key for field: 3, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(24));
            ProtocolParser.WriteUInt64(stream,instance.FontStyle);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_DialogFont instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_DialogFont instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

