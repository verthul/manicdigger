// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.

public class Packet_ClientIdentificationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientIdentification DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientIdentification instance = new Packet_ClientIdentification();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientIdentification DeserializeBuffer(byte[] buffer, int length, Packet_ClientIdentification instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientIdentification Deserialize(CitoStream stream, Packet_ClientIdentification instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Username = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.VerificationKey = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerPassword = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.RequestPosition == null)
                    instance.RequestPosition = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.RequestPosition);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientIdentification DeserializeLengthDelimited(CitoStream stream, Packet_ClientIdentification instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Username = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.VerificationKey = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerPassword = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.RequestPosition == null)
                    instance.RequestPosition = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.RequestPosition);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientIdentification DeserializeLength(CitoStream stream, int length, Packet_ClientIdentification instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Username = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.VerificationKey = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerPassword = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.RequestPosition == null)
                    instance.RequestPosition = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.RequestPosition);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientIdentification instance)
    {
        if (instance.MdProtocolVersion != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.MdProtocolVersion));
        }
        if (instance.Username != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Username));
        }
        if (instance.VerificationKey != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.VerificationKey));
        }
        if (instance.ServerPassword != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerPassword));
        }
        if (instance.RequestPosition != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms5, instance.RequestPosition);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientIdentification instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientIdentification instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientRequestBlobSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientRequestBlob DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientRequestBlob instance = new Packet_ClientRequestBlob();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientRequestBlob DeserializeBuffer(byte[] buffer, int length, Packet_ClientRequestBlob instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientRequestBlob Deserialize(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.RequestedMd5 == null)
                    instance.RequestedMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequestedMd5);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientRequestBlob DeserializeLengthDelimited(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.RequestedMd5 == null)
                    instance.RequestedMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequestedMd5);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientRequestBlob DeserializeLength(CitoStream stream, int length, Packet_ClientRequestBlob instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.RequestedMd5 == null)
                    instance.RequestedMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequestedMd5);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        if (instance.RequestedMd5 != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            CitoMemoryStream ms1 = new CitoMemoryStream();
            Packet_StringListSerializer.Serialize(ms1, instance.RequestedMd5);
            // Length delimited byte array
            int ms1Length = ms1.Length();
            ProtocolParser.WriteUInt32_(stream, ms1Length);
            stream.Write(ms1.GetBuffer(), 0, ms1Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientRequestBlob instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientRequestBlob instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientSetBlockSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientSetBlock DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientSetBlock instance = new Packet_ClientSetBlock();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientSetBlock DeserializeBuffer(byte[] buffer, int length, Packet_ClientSetBlock instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSetBlock Deserialize(CitoStream stream, Packet_ClientSetBlock instance)
    {
        instance.Mode = Packet_BlockSetModeEnum.Destroy;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Mode = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSetBlock DeserializeLengthDelimited(CitoStream stream, Packet_ClientSetBlock instance)
    {
        instance.Mode = Packet_BlockSetModeEnum.Destroy;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Mode = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSetBlock DeserializeLength(CitoStream stream, int length, Packet_ClientSetBlock instance)
    {
        instance.Mode = Packet_BlockSetModeEnum.Destroy;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Mode = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientSetBlock instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        if (instance.Mode != Packet_BlockSetModeEnum.Destroy)
        {
            // Key for field: 4, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(32));
            ProtocolParser.WriteUInt64(stream,instance.Mode);
        }
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.MaterialSlot);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientSetBlock instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientSetBlock instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientFillAreaSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientFillArea DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientFillArea instance = new Packet_ClientFillArea();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientFillArea DeserializeBuffer(byte[] buffer, int length, Packet_ClientFillArea instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientFillArea Deserialize(CitoStream stream, Packet_ClientFillArea instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientFillArea DeserializeLengthDelimited(CitoStream stream, Packet_ClientFillArea instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientFillArea DeserializeLength(CitoStream stream, int length, Packet_ClientFillArea instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientFillArea instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X1);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X2);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y1);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y2);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Z1);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Z2);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.MaterialSlot);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientFillArea instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientFillArea instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientPositionAndOrientationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientPositionAndOrientation DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientPositionAndOrientation instance = new Packet_ClientPositionAndOrientation();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientPositionAndOrientation DeserializeBuffer(byte[] buffer, int length, Packet_ClientPositionAndOrientation instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPositionAndOrientation Deserialize(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.PlayerId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPositionAndOrientation DeserializeLengthDelimited(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.PlayerId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPositionAndOrientation DeserializeLength(CitoStream stream, int length, Packet_ClientPositionAndOrientation instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.PlayerId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.PlayerId);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Heading);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Pitch);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.Stance);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientPositionAndOrientation instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientPositionAndOrientation instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientMessageSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientMessage DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientMessage instance = new Packet_ClientMessage();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientMessage DeserializeBuffer(byte[] buffer, int length, Packet_ClientMessage instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientMessage Deserialize(CitoStream stream, Packet_ClientMessage instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.IsTeamchat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientMessage DeserializeLengthDelimited(CitoStream stream, Packet_ClientMessage instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.IsTeamchat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientMessage DeserializeLength(CitoStream stream, int length, Packet_ClientMessage instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.IsTeamchat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientMessage instance)
    {
        if (instance.Message != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Message));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.IsTeamchat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientMessage instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientMessage instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientInventoryActionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientInventoryAction DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientInventoryAction instance = new Packet_ClientInventoryAction();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientInventoryAction DeserializeBuffer(byte[] buffer, int length, Packet_ClientInventoryAction instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientInventoryAction Deserialize(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        instance.Action = Packet_InventoryActionTypeEnum.Click;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Action = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.A == null)
                    instance.A = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.A);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.B == null)
                    instance.B = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.B);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientInventoryAction DeserializeLengthDelimited(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        instance.Action = Packet_InventoryActionTypeEnum.Click;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Action = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.A == null)
                    instance.A = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.A);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.B == null)
                    instance.B = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.B);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientInventoryAction DeserializeLength(CitoStream stream, int length, Packet_ClientInventoryAction instance)
    {
        instance.Action = Packet_InventoryActionTypeEnum.Click;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Action = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.A == null)
                    instance.A = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.A);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.B == null)
                    instance.B = Packet_InventoryPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventoryPositionSerializer.DeserializeLengthDelimited(stream, instance.B);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        if (instance.Action != Packet_InventoryActionTypeEnum.Click)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Action);
        }
        if (instance.A != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_InventoryPositionSerializer.Serialize(ms2, instance.A);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.B != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_InventoryPositionSerializer.Serialize(ms3, instance.B);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientInventoryAction instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientInventoryAction instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_InventoryPositionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_InventoryPosition DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_InventoryPosition instance = new Packet_InventoryPosition();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_InventoryPosition DeserializeBuffer(byte[] buffer, int length, Packet_InventoryPosition instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_InventoryPosition Deserialize(CitoStream stream, Packet_InventoryPosition instance)
    {
        instance.Type = Packet_InventoryPositionTypeEnum.MainArea;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AreaX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.AreaY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaterialId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.WearPlace = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ActiveMaterial = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.GroundPositionX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.GroundPositionY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.GroundPositionZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_InventoryPosition DeserializeLengthDelimited(CitoStream stream, Packet_InventoryPosition instance)
    {
        instance.Type = Packet_InventoryPositionTypeEnum.MainArea;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AreaX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.AreaY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaterialId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.WearPlace = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ActiveMaterial = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.GroundPositionX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.GroundPositionY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.GroundPositionZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_InventoryPosition DeserializeLength(CitoStream stream, int length, Packet_InventoryPosition instance)
    {
        instance.Type = Packet_InventoryPositionTypeEnum.MainArea;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AreaX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.AreaY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaterialId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.WearPlace = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ActiveMaterial = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.GroundPositionX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.GroundPositionY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.GroundPositionZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_InventoryPosition instance)
    {
        if (instance.Type != Packet_InventoryPositionTypeEnum.MainArea)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Type);
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.AreaX);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.AreaY);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.MaterialId);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.WearPlace);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.ActiveMaterial);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.GroundPositionX);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.GroundPositionY);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.GroundPositionZ);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_InventoryPosition instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_InventoryPosition instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_PositionAndOrientationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_PositionAndOrientation DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_PositionAndOrientation instance = new Packet_PositionAndOrientation();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_PositionAndOrientation DeserializeBuffer(byte[] buffer, int length, Packet_PositionAndOrientation instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_PositionAndOrientation Deserialize(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionAndOrientation DeserializeLengthDelimited(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionAndOrientation DeserializeLength(CitoStream stream, int length, Packet_PositionAndOrientation instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Heading = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Pitch = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Stance = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Heading);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Pitch);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Stance);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_PositionAndOrientation instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_PositionAndOrientation instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientReloadSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientReload DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientReload instance = new Packet_ClientReload();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientReload DeserializeBuffer(byte[] buffer, int length, Packet_ClientReload instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientReload Deserialize(CitoStream stream, Packet_ClientReload instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientReload DeserializeLengthDelimited(CitoStream stream, Packet_ClientReload instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientReload DeserializeLength(CitoStream stream, int length, Packet_ClientReload instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientReload instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientReload instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientReload instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientLeaveSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientLeave DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientLeave instance = new Packet_ClientLeave();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientLeave DeserializeBuffer(byte[] buffer, int length, Packet_ClientLeave instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientLeave Deserialize(CitoStream stream, Packet_ClientLeave instance)
    {
        instance.Reason = Packet_LeaveReasonEnum.Leave;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientLeave DeserializeLengthDelimited(CitoStream stream, Packet_ClientLeave instance)
    {
        instance.Reason = Packet_LeaveReasonEnum.Leave;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientLeave DeserializeLength(CitoStream stream, int length, Packet_ClientLeave instance)
    {
        instance.Reason = Packet_LeaveReasonEnum.Leave;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientLeave instance)
    {
        if (instance.Reason != Packet_LeaveReasonEnum.Leave)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Reason);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientLeave instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientLeave instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientHealthSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientHealth DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientHealth instance = new Packet_ClientHealth();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientHealth DeserializeBuffer(byte[] buffer, int length, Packet_ClientHealth instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientHealth Deserialize(CitoStream stream, Packet_ClientHealth instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientHealth DeserializeLengthDelimited(CitoStream stream, Packet_ClientHealth instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientHealth DeserializeLength(CitoStream stream, int length, Packet_ClientHealth instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientHealth instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.CurrentHealth);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientHealth instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientHealth instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientOxygenSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientOxygen DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientOxygen instance = new Packet_ClientOxygen();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientOxygen DeserializeBuffer(byte[] buffer, int length, Packet_ClientOxygen instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientOxygen Deserialize(CitoStream stream, Packet_ClientOxygen instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientOxygen DeserializeLengthDelimited(CitoStream stream, Packet_ClientOxygen instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientOxygen DeserializeLength(CitoStream stream, int length, Packet_ClientOxygen instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientOxygen instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.CurrentOxygen);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientOxygen instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientOxygen instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientDialogClickSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientDialogClick DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientDialogClick instance = new Packet_ClientDialogClick();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientDialogClick DeserializeBuffer(byte[] buffer, int length, Packet_ClientDialogClick instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDialogClick Deserialize(CitoStream stream, Packet_ClientDialogClick instance)
    {
        if (instance.TextBoxValue == null)
        {
            instance.TextBoxValue = new string[1];
            instance.TextBoxValueCount = 0;
            instance.TextBoxValueLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.WidgetId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.TextBoxValueAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDialogClick DeserializeLengthDelimited(CitoStream stream, Packet_ClientDialogClick instance)
    {
        if (instance.TextBoxValue == null)
        {
            instance.TextBoxValue = new string[1];
            instance.TextBoxValueCount = 0;
            instance.TextBoxValueLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.WidgetId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.TextBoxValueAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDialogClick DeserializeLength(CitoStream stream, int length, Packet_ClientDialogClick instance)
    {
        if (instance.TextBoxValue == null)
        {
            instance.TextBoxValue = new string[1];
            instance.TextBoxValueCount = 0;
            instance.TextBoxValueLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.WidgetId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.TextBoxValueAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientDialogClick instance)
    {
        if (instance.WidgetId != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.WidgetId));
        }
        if (instance.TextBoxValue != null)
        {
            for(int k=0; k < instance.TextBoxValueCount; k++)
            {
                string i3 = instance.TextBoxValue[k];
                // Key for field: 3, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(26));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i3));
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientDialogClick instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientDialogClick instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientPingReplySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientPingReply DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientPingReply instance = new Packet_ClientPingReply();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientPingReply DeserializeBuffer(byte[] buffer, int length, Packet_ClientPingReply instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPingReply Deserialize(CitoStream stream, Packet_ClientPingReply instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPingReply DeserializeLengthDelimited(CitoStream stream, Packet_ClientPingReply instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientPingReply DeserializeLength(CitoStream stream, int length, Packet_ClientPingReply instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientPingReply instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientPingReply instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientPingReply instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientCraftSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientCraft DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientCraft instance = new Packet_ClientCraft();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientCraft DeserializeBuffer(byte[] buffer, int length, Packet_ClientCraft instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientCraft Deserialize(CitoStream stream, Packet_ClientCraft instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.RecipeId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientCraft DeserializeLengthDelimited(CitoStream stream, Packet_ClientCraft instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.RecipeId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientCraft DeserializeLength(CitoStream stream, int length, Packet_ClientCraft instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.RecipeId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientCraft instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.RecipeId);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientCraft instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientCraft instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientShotSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientShot DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientShot instance = new Packet_ClientShot();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientShot DeserializeBuffer(byte[] buffer, int length, Packet_ClientShot instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientShot Deserialize(CitoStream stream, Packet_ClientShot instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.WeaponBlock = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.HitPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.IsHitHead = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.ExplodesAfter = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientShot DeserializeLengthDelimited(CitoStream stream, Packet_ClientShot instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.WeaponBlock = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.HitPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.IsHitHead = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.ExplodesAfter = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientShot DeserializeLength(CitoStream stream, int length, Packet_ClientShot instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.WeaponBlock = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.HitPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.IsHitHead = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.ExplodesAfter = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientShot instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.FromX);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.FromY);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.FromZ);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.ToX);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.ToY);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.ToZ);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.WeaponBlock);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.HitPlayer);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.IsHitHead);
        // Key for field: 10, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(80));
        ProtocolParser.WriteUInt64(stream,instance.ExplodesAfter);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientShot instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientShot instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientSpecialKeySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientSpecialKey DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientSpecialKey instance = new Packet_ClientSpecialKey();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientSpecialKey DeserializeBuffer(byte[] buffer, int length, Packet_ClientSpecialKey instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSpecialKey Deserialize(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        instance.Key_ = Packet_SpecialKeyEnum.Respawn;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSpecialKey DeserializeLengthDelimited(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        instance.Key_ = Packet_SpecialKeyEnum.Respawn;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientSpecialKey DeserializeLength(CitoStream stream, int length, Packet_ClientSpecialKey instance)
    {
        instance.Key_ = Packet_SpecialKeyEnum.Respawn;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        if (instance.Key_ != Packet_SpecialKeyEnum.Respawn)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Key_);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientSpecialKey instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientSpecialKey instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientActiveMaterialSlotSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientActiveMaterialSlot instance = new Packet_ClientActiveMaterialSlot();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeBuffer(byte[] buffer, int length, Packet_ClientActiveMaterialSlot instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientActiveMaterialSlot Deserialize(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ActiveMaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeLengthDelimited(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ActiveMaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientActiveMaterialSlot DeserializeLength(CitoStream stream, int length, Packet_ClientActiveMaterialSlot instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ActiveMaterialSlot = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.ActiveMaterialSlot);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientActiveMaterialSlot instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientActiveMaterialSlot instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientDeathSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientDeath DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientDeath instance = new Packet_ClientDeath();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientDeath DeserializeBuffer(byte[] buffer, int length, Packet_ClientDeath instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDeath Deserialize(CitoStream stream, Packet_ClientDeath instance)
    {
        instance.Reason = Packet_DeathReasonEnum.FallDamage;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SourcePlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDeath DeserializeLengthDelimited(CitoStream stream, Packet_ClientDeath instance)
    {
        instance.Reason = Packet_DeathReasonEnum.FallDamage;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SourcePlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientDeath DeserializeLength(CitoStream stream, int length, Packet_ClientDeath instance)
    {
        instance.Reason = Packet_DeathReasonEnum.FallDamage;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Reason = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SourcePlayer = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientDeath instance)
    {
        if (instance.Reason != Packet_DeathReasonEnum.FallDamage)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Reason);
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.SourcePlayer);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientDeath instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientDeath instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientServerQuerySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientServerQuery DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientServerQuery instance = new Packet_ClientServerQuery();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientServerQuery DeserializeBuffer(byte[] buffer, int length, Packet_ClientServerQuery instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientServerQuery Deserialize(CitoStream stream, Packet_ClientServerQuery instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientServerQuery DeserializeLengthDelimited(CitoStream stream, Packet_ClientServerQuery instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientServerQuery DeserializeLength(CitoStream stream, int length, Packet_ClientServerQuery instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientServerQuery instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientServerQuery instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientServerQuery instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientGameResolutionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientGameResolution DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientGameResolution instance = new Packet_ClientGameResolution();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientGameResolution DeserializeBuffer(byte[] buffer, int length, Packet_ClientGameResolution instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientGameResolution Deserialize(CitoStream stream, Packet_ClientGameResolution instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Height = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientGameResolution DeserializeLengthDelimited(CitoStream stream, Packet_ClientGameResolution instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Height = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientGameResolution DeserializeLength(CitoStream stream, int length, Packet_ClientGameResolution instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Height = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientGameResolution instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Width);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Height);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientGameResolution instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientGameResolution instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Client DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Client instance = new Packet_Client();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Client DeserializeBuffer(byte[] buffer, int length, Packet_Client instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Client Deserialize(CitoStream stream, Packet_Client instance)
    {
        instance.Id = Packet_ClientIdEnum.PlayerIdentification;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Identification == null)
                    instance.Identification = Packet_ClientIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ClientSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Message == null)
                    instance.Message = Packet_ClientMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Craft == null)
                    instance.Craft = Packet_ClientCraftSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientCraftSerializer.DeserializeLengthDelimited(stream, instance.Craft);
                continue;
                // Field 7 LengthDelimited
            case 58:
                if (instance.RequestBlob == null)
                    instance.RequestBlob = Packet_ClientRequestBlobSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientRequestBlobSerializer.DeserializeLengthDelimited(stream, instance.RequestBlob);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.InventoryAction == null)
                    instance.InventoryAction = Packet_ClientInventoryActionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientInventoryActionSerializer.DeserializeLengthDelimited(stream, instance.InventoryAction);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Health == null)
                    instance.Health = Packet_ClientHealthSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientHealthSerializer.DeserializeLengthDelimited(stream, instance.Health);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.PingReply == null)
                    instance.PingReply = Packet_ClientPingReplySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPingReplySerializer.DeserializeLengthDelimited(stream, instance.PingReply);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.DialogClick_ == null)
                    instance.DialogClick_ = Packet_ClientDialogClickSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDialogClickSerializer.DeserializeLengthDelimited(stream, instance.DialogClick_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Shot == null)
                    instance.Shot = Packet_ClientShotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientShotSerializer.DeserializeLengthDelimited(stream, instance.Shot);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.SpecialKey_ == null)
                    instance.SpecialKey_ = Packet_ClientSpecialKeySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSpecialKeySerializer.DeserializeLengthDelimited(stream, instance.SpecialKey_);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.ActiveMaterialSlot == null)
                    instance.ActiveMaterialSlot = Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimited(stream, instance.ActiveMaterialSlot);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.Leave == null)
                    instance.Leave = Packet_ClientLeaveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientLeaveSerializer.DeserializeLengthDelimited(stream, instance.Leave);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ClientFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Reload == null)
                    instance.Reload = Packet_ClientReloadSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientReloadSerializer.DeserializeLengthDelimited(stream, instance.Reload);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Oxygen == null)
                    instance.Oxygen = Packet_ClientOxygenSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientOxygenSerializer.DeserializeLengthDelimited(stream, instance.Oxygen);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Death == null)
                    instance.Death = Packet_ClientDeathSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDeathSerializer.DeserializeLengthDelimited(stream, instance.Death);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Query == null)
                    instance.Query = Packet_ClientServerQuerySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientServerQuerySerializer.DeserializeLengthDelimited(stream, instance.Query);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.GameResolution == null)
                    instance.GameResolution = Packet_ClientGameResolutionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientGameResolutionSerializer.DeserializeLengthDelimited(stream, instance.GameResolution);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityInteraction == null)
                    instance.EntityInteraction = Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimited(stream, instance.EntityInteraction);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Client DeserializeLengthDelimited(CitoStream stream, Packet_Client instance)
    {
        instance.Id = Packet_ClientIdEnum.PlayerIdentification;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Identification == null)
                    instance.Identification = Packet_ClientIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ClientSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Message == null)
                    instance.Message = Packet_ClientMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Craft == null)
                    instance.Craft = Packet_ClientCraftSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientCraftSerializer.DeserializeLengthDelimited(stream, instance.Craft);
                continue;
                // Field 7 LengthDelimited
            case 58:
                if (instance.RequestBlob == null)
                    instance.RequestBlob = Packet_ClientRequestBlobSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientRequestBlobSerializer.DeserializeLengthDelimited(stream, instance.RequestBlob);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.InventoryAction == null)
                    instance.InventoryAction = Packet_ClientInventoryActionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientInventoryActionSerializer.DeserializeLengthDelimited(stream, instance.InventoryAction);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Health == null)
                    instance.Health = Packet_ClientHealthSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientHealthSerializer.DeserializeLengthDelimited(stream, instance.Health);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.PingReply == null)
                    instance.PingReply = Packet_ClientPingReplySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPingReplySerializer.DeserializeLengthDelimited(stream, instance.PingReply);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.DialogClick_ == null)
                    instance.DialogClick_ = Packet_ClientDialogClickSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDialogClickSerializer.DeserializeLengthDelimited(stream, instance.DialogClick_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Shot == null)
                    instance.Shot = Packet_ClientShotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientShotSerializer.DeserializeLengthDelimited(stream, instance.Shot);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.SpecialKey_ == null)
                    instance.SpecialKey_ = Packet_ClientSpecialKeySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSpecialKeySerializer.DeserializeLengthDelimited(stream, instance.SpecialKey_);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.ActiveMaterialSlot == null)
                    instance.ActiveMaterialSlot = Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimited(stream, instance.ActiveMaterialSlot);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.Leave == null)
                    instance.Leave = Packet_ClientLeaveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientLeaveSerializer.DeserializeLengthDelimited(stream, instance.Leave);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ClientFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Reload == null)
                    instance.Reload = Packet_ClientReloadSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientReloadSerializer.DeserializeLengthDelimited(stream, instance.Reload);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Oxygen == null)
                    instance.Oxygen = Packet_ClientOxygenSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientOxygenSerializer.DeserializeLengthDelimited(stream, instance.Oxygen);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Death == null)
                    instance.Death = Packet_ClientDeathSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDeathSerializer.DeserializeLengthDelimited(stream, instance.Death);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Query == null)
                    instance.Query = Packet_ClientServerQuerySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientServerQuerySerializer.DeserializeLengthDelimited(stream, instance.Query);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.GameResolution == null)
                    instance.GameResolution = Packet_ClientGameResolutionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientGameResolutionSerializer.DeserializeLengthDelimited(stream, instance.GameResolution);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityInteraction == null)
                    instance.EntityInteraction = Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimited(stream, instance.EntityInteraction);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Client DeserializeLength(CitoStream stream, int length, Packet_Client instance)
    {
        instance.Id = Packet_ClientIdEnum.PlayerIdentification;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Identification == null)
                    instance.Identification = Packet_ClientIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ClientSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Message == null)
                    instance.Message = Packet_ClientMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Craft == null)
                    instance.Craft = Packet_ClientCraftSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientCraftSerializer.DeserializeLengthDelimited(stream, instance.Craft);
                continue;
                // Field 7 LengthDelimited
            case 58:
                if (instance.RequestBlob == null)
                    instance.RequestBlob = Packet_ClientRequestBlobSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientRequestBlobSerializer.DeserializeLengthDelimited(stream, instance.RequestBlob);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.InventoryAction == null)
                    instance.InventoryAction = Packet_ClientInventoryActionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientInventoryActionSerializer.DeserializeLengthDelimited(stream, instance.InventoryAction);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Health == null)
                    instance.Health = Packet_ClientHealthSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientHealthSerializer.DeserializeLengthDelimited(stream, instance.Health);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.PingReply == null)
                    instance.PingReply = Packet_ClientPingReplySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientPingReplySerializer.DeserializeLengthDelimited(stream, instance.PingReply);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.DialogClick_ == null)
                    instance.DialogClick_ = Packet_ClientDialogClickSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDialogClickSerializer.DeserializeLengthDelimited(stream, instance.DialogClick_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Shot == null)
                    instance.Shot = Packet_ClientShotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientShotSerializer.DeserializeLengthDelimited(stream, instance.Shot);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.SpecialKey_ == null)
                    instance.SpecialKey_ = Packet_ClientSpecialKeySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientSpecialKeySerializer.DeserializeLengthDelimited(stream, instance.SpecialKey_);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.ActiveMaterialSlot == null)
                    instance.ActiveMaterialSlot = Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientActiveMaterialSlotSerializer.DeserializeLengthDelimited(stream, instance.ActiveMaterialSlot);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.Leave == null)
                    instance.Leave = Packet_ClientLeaveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientLeaveSerializer.DeserializeLengthDelimited(stream, instance.Leave);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ClientFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Reload == null)
                    instance.Reload = Packet_ClientReloadSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientReloadSerializer.DeserializeLengthDelimited(stream, instance.Reload);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Oxygen == null)
                    instance.Oxygen = Packet_ClientOxygenSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientOxygenSerializer.DeserializeLengthDelimited(stream, instance.Oxygen);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Death == null)
                    instance.Death = Packet_ClientDeathSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientDeathSerializer.DeserializeLengthDelimited(stream, instance.Death);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Query == null)
                    instance.Query = Packet_ClientServerQuerySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientServerQuerySerializer.DeserializeLengthDelimited(stream, instance.Query);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.GameResolution == null)
                    instance.GameResolution = Packet_ClientGameResolutionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientGameResolutionSerializer.DeserializeLengthDelimited(stream, instance.GameResolution);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityInteraction == null)
                    instance.EntityInteraction = Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ClientEntityInteractionSerializer.DeserializeLengthDelimited(stream, instance.EntityInteraction);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Client instance)
    {
        if (instance.Id != Packet_ClientIdEnum.PlayerIdentification)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.Id);
        }
        if (instance.Identification != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ClientIdentificationSerializer.Serialize(ms2, instance.Identification);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.SetBlock != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ClientSetBlockSerializer.Serialize(ms3, instance.SetBlock);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.FillArea != null)
        {
            // Key for field: 31, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(250));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms31 = new CitoMemoryStream();
            Packet_ClientFillAreaSerializer.Serialize(ms31, instance.FillArea);
            // Length delimited byte array
            int ms31Length = ms31.Length();
            ProtocolParser.WriteUInt32_(stream, ms31Length);
            stream.Write(ms31.GetBuffer(), 0, ms31Length);
            
        }
        if (instance.PositionAndOrientation != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ClientPositionAndOrientationSerializer.Serialize(ms4, instance.PositionAndOrientation);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.Message != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ClientMessageSerializer.Serialize(ms5, instance.Message);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.Craft != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            CitoMemoryStream ms6 = new CitoMemoryStream();
            Packet_ClientCraftSerializer.Serialize(ms6, instance.Craft);
            // Length delimited byte array
            int ms6Length = ms6.Length();
            ProtocolParser.WriteUInt32_(stream, ms6Length);
            stream.Write(ms6.GetBuffer(), 0, ms6Length);
            
        }
        if (instance.RequestBlob != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            CitoMemoryStream ms7 = new CitoMemoryStream();
            Packet_ClientRequestBlobSerializer.Serialize(ms7, instance.RequestBlob);
            // Length delimited byte array
            int ms7Length = ms7.Length();
            ProtocolParser.WriteUInt32_(stream, ms7Length);
            stream.Write(ms7.GetBuffer(), 0, ms7Length);
            
        }
        if (instance.InventoryAction != null)
        {
            // Key for field: 8, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(66));
            CitoMemoryStream ms8 = new CitoMemoryStream();
            Packet_ClientInventoryActionSerializer.Serialize(ms8, instance.InventoryAction);
            // Length delimited byte array
            int ms8Length = ms8.Length();
            ProtocolParser.WriteUInt32_(stream, ms8Length);
            stream.Write(ms8.GetBuffer(), 0, ms8Length);
            
        }
        if (instance.Health != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            CitoMemoryStream ms9 = new CitoMemoryStream();
            Packet_ClientHealthSerializer.Serialize(ms9, instance.Health);
            // Length delimited byte array
            int ms9Length = ms9.Length();
            ProtocolParser.WriteUInt32_(stream, ms9Length);
            stream.Write(ms9.GetBuffer(), 0, ms9Length);
            
        }
        if (instance.PingReply != null)
        {
            // Key for field: 10, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(82));
            CitoMemoryStream ms10 = new CitoMemoryStream();
            Packet_ClientPingReplySerializer.Serialize(ms10, instance.PingReply);
            // Length delimited byte array
            int ms10Length = ms10.Length();
            ProtocolParser.WriteUInt32_(stream, ms10Length);
            stream.Write(ms10.GetBuffer(), 0, ms10Length);
            
        }
        if (instance.DialogClick_ != null)
        {
            // Key for field: 11, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(90));
            CitoMemoryStream ms11 = new CitoMemoryStream();
            Packet_ClientDialogClickSerializer.Serialize(ms11, instance.DialogClick_);
            // Length delimited byte array
            int ms11Length = ms11.Length();
            ProtocolParser.WriteUInt32_(stream, ms11Length);
            stream.Write(ms11.GetBuffer(), 0, ms11Length);
            
        }
        if (instance.Shot != null)
        {
            // Key for field: 12, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(98));
            CitoMemoryStream ms12 = new CitoMemoryStream();
            Packet_ClientShotSerializer.Serialize(ms12, instance.Shot);
            // Length delimited byte array
            int ms12Length = ms12.Length();
            ProtocolParser.WriteUInt32_(stream, ms12Length);
            stream.Write(ms12.GetBuffer(), 0, ms12Length);
            
        }
        if (instance.SpecialKey_ != null)
        {
            // Key for field: 13, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(106));
            CitoMemoryStream ms13 = new CitoMemoryStream();
            Packet_ClientSpecialKeySerializer.Serialize(ms13, instance.SpecialKey_);
            // Length delimited byte array
            int ms13Length = ms13.Length();
            ProtocolParser.WriteUInt32_(stream, ms13Length);
            stream.Write(ms13.GetBuffer(), 0, ms13Length);
            
        }
        if (instance.ActiveMaterialSlot != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            CitoMemoryStream ms14 = new CitoMemoryStream();
            Packet_ClientActiveMaterialSlotSerializer.Serialize(ms14, instance.ActiveMaterialSlot);
            // Length delimited byte array
            int ms14Length = ms14.Length();
            ProtocolParser.WriteUInt32_(stream, ms14Length);
            stream.Write(ms14.GetBuffer(), 0, ms14Length);
            
        }
        if (instance.Leave != null)
        {
            // Key for field: 15, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(122));
            CitoMemoryStream ms15 = new CitoMemoryStream();
            Packet_ClientLeaveSerializer.Serialize(ms15, instance.Leave);
            // Length delimited byte array
            int ms15Length = ms15.Length();
            ProtocolParser.WriteUInt32_(stream, ms15Length);
            stream.Write(ms15.GetBuffer(), 0, ms15Length);
            
        }
        if (instance.Reload != null)
        {
            // Key for field: 16, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(130));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms16 = new CitoMemoryStream();
            Packet_ClientReloadSerializer.Serialize(ms16, instance.Reload);
            // Length delimited byte array
            int ms16Length = ms16.Length();
            ProtocolParser.WriteUInt32_(stream, ms16Length);
            stream.Write(ms16.GetBuffer(), 0, ms16Length);
            
        }
        if (instance.Oxygen != null)
        {
            // Key for field: 17, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms17 = new CitoMemoryStream();
            Packet_ClientOxygenSerializer.Serialize(ms17, instance.Oxygen);
            // Length delimited byte array
            int ms17Length = ms17.Length();
            ProtocolParser.WriteUInt32_(stream, ms17Length);
            stream.Write(ms17.GetBuffer(), 0, ms17Length);
            
        }
        if (instance.Death != null)
        {
            // Key for field: 18, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(146));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms18 = new CitoMemoryStream();
            Packet_ClientDeathSerializer.Serialize(ms18, instance.Death);
            // Length delimited byte array
            int ms18Length = ms18.Length();
            ProtocolParser.WriteUInt32_(stream, ms18Length);
            stream.Write(ms18.GetBuffer(), 0, ms18Length);
            
        }
        if (instance.Query != null)
        {
            // Key for field: 19, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms19 = new CitoMemoryStream();
            Packet_ClientServerQuerySerializer.Serialize(ms19, instance.Query);
            // Length delimited byte array
            int ms19Length = ms19.Length();
            ProtocolParser.WriteUInt32_(stream, ms19Length);
            stream.Write(ms19.GetBuffer(), 0, ms19Length);
            
        }
        if (instance.GameResolution != null)
        {
            // Key for field: 20, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms20 = new CitoMemoryStream();
            Packet_ClientGameResolutionSerializer.Serialize(ms20, instance.GameResolution);
            // Length delimited byte array
            int ms20Length = ms20.Length();
            ProtocolParser.WriteUInt32_(stream, ms20Length);
            stream.Write(ms20.GetBuffer(), 0, ms20Length);
            
        }
        if (instance.EntityInteraction != null)
        {
            // Key for field: 21, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms21 = new CitoMemoryStream();
            Packet_ClientEntityInteractionSerializer.Serialize(ms21, instance.EntityInteraction);
            // Length delimited byte array
            int ms21Length = ms21.Length();
            ProtocolParser.WriteUInt32_(stream, ms21Length);
            stream.Write(ms21.GetBuffer(), 0, ms21Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Client instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Client instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ClientEntityInteractionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ClientEntityInteraction DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ClientEntityInteraction instance = new Packet_ClientEntityInteraction();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ClientEntityInteraction DeserializeBuffer(byte[] buffer, int length, Packet_ClientEntityInteraction instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ClientEntityInteraction Deserialize(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        instance.InteractionType = Packet_EntityInteractionTypeEnum.Use;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.EntityId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.InteractionType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientEntityInteraction DeserializeLengthDelimited(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        instance.InteractionType = Packet_EntityInteractionTypeEnum.Use;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.EntityId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.InteractionType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ClientEntityInteraction DeserializeLength(CitoStream stream, int length, Packet_ClientEntityInteraction instance)
    {
        instance.InteractionType = Packet_EntityInteractionTypeEnum.Use;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.EntityId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.InteractionType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.EntityId);
        if (instance.InteractionType != Packet_EntityInteractionTypeEnum.Use)
        {
            // Key for field: 2, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(16));
            ProtocolParser.WriteUInt64(stream,instance.InteractionType);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ClientEntityInteraction instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ClientEntityInteraction instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_SoundSetSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_SoundSet DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_SoundSet instance = new Packet_SoundSet();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_SoundSet DeserializeBuffer(byte[] buffer, int length, Packet_SoundSet instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_SoundSet Deserialize(CitoStream stream, Packet_SoundSet instance)
    {
        if (instance.Walk == null)
        {
            instance.Walk = new string[1];
            instance.WalkCount = 0;
            instance.WalkLength = 1;
        }
        if (instance.Break1 == null)
        {
            instance.Break1 = new string[1];
            instance.Break1Count = 0;
            instance.Break1Length = 1;
        }
        if (instance.Build == null)
        {
            instance.Build = new string[1];
            instance.BuildCount = 0;
            instance.BuildLength = 1;
        }
        if (instance.Clone == null)
        {
            instance.Clone = new string[1];
            instance.CloneCount = 0;
            instance.CloneLength = 1;
        }
        if (instance.Shoot == null)
        {
            instance.Shoot = new string[1];
            instance.ShootCount = 0;
            instance.ShootLength = 1;
        }
        if (instance.ShootEnd == null)
        {
            instance.ShootEnd = new string[1];
            instance.ShootEndCount = 0;
            instance.ShootEndLength = 1;
        }
        if (instance.Reload == null)
        {
            instance.Reload = new string[1];
            instance.ReloadCount = 0;
            instance.ReloadLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WalkAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                // repeated
                instance.Break1Add(ProtocolParser.ReadString(stream));
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.BuildAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 4 LengthDelimited
            case 34:
                // repeated
                instance.CloneAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 5 LengthDelimited
            case 42:
                // repeated
                instance.ShootAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 6 LengthDelimited
            case 50:
                // repeated
                instance.ShootEndAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ReloadAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_SoundSet DeserializeLengthDelimited(CitoStream stream, Packet_SoundSet instance)
    {
        if (instance.Walk == null)
        {
            instance.Walk = new string[1];
            instance.WalkCount = 0;
            instance.WalkLength = 1;
        }
        if (instance.Break1 == null)
        {
            instance.Break1 = new string[1];
            instance.Break1Count = 0;
            instance.Break1Length = 1;
        }
        if (instance.Build == null)
        {
            instance.Build = new string[1];
            instance.BuildCount = 0;
            instance.BuildLength = 1;
        }
        if (instance.Clone == null)
        {
            instance.Clone = new string[1];
            instance.CloneCount = 0;
            instance.CloneLength = 1;
        }
        if (instance.Shoot == null)
        {
            instance.Shoot = new string[1];
            instance.ShootCount = 0;
            instance.ShootLength = 1;
        }
        if (instance.ShootEnd == null)
        {
            instance.ShootEnd = new string[1];
            instance.ShootEndCount = 0;
            instance.ShootEndLength = 1;
        }
        if (instance.Reload == null)
        {
            instance.Reload = new string[1];
            instance.ReloadCount = 0;
            instance.ReloadLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WalkAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                // repeated
                instance.Break1Add(ProtocolParser.ReadString(stream));
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.BuildAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 4 LengthDelimited
            case 34:
                // repeated
                instance.CloneAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 5 LengthDelimited
            case 42:
                // repeated
                instance.ShootAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 6 LengthDelimited
            case 50:
                // repeated
                instance.ShootEndAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ReloadAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_SoundSet DeserializeLength(CitoStream stream, int length, Packet_SoundSet instance)
    {
        if (instance.Walk == null)
        {
            instance.Walk = new string[1];
            instance.WalkCount = 0;
            instance.WalkLength = 1;
        }
        if (instance.Break1 == null)
        {
            instance.Break1 = new string[1];
            instance.Break1Count = 0;
            instance.Break1Length = 1;
        }
        if (instance.Build == null)
        {
            instance.Build = new string[1];
            instance.BuildCount = 0;
            instance.BuildLength = 1;
        }
        if (instance.Clone == null)
        {
            instance.Clone = new string[1];
            instance.CloneCount = 0;
            instance.CloneLength = 1;
        }
        if (instance.Shoot == null)
        {
            instance.Shoot = new string[1];
            instance.ShootCount = 0;
            instance.ShootLength = 1;
        }
        if (instance.ShootEnd == null)
        {
            instance.ShootEnd = new string[1];
            instance.ShootEndCount = 0;
            instance.ShootEndLength = 1;
        }
        if (instance.Reload == null)
        {
            instance.Reload = new string[1];
            instance.ReloadCount = 0;
            instance.ReloadLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WalkAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                // repeated
                instance.Break1Add(ProtocolParser.ReadString(stream));
                continue;
                // Field 3 LengthDelimited
            case 26:
                // repeated
                instance.BuildAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 4 LengthDelimited
            case 34:
                // repeated
                instance.CloneAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 5 LengthDelimited
            case 42:
                // repeated
                instance.ShootAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 6 LengthDelimited
            case 50:
                // repeated
                instance.ShootEndAdd(ProtocolParser.ReadString(stream));
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ReloadAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_SoundSet instance)
    {
        if (instance.Walk != null)
        {
            for(int k=0; k < instance.WalkCount; k++)
            {
                string i1 = instance.Walk[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i1));
            }
        }
        if (instance.Break1 != null)
        {
            for(int k=0; k < instance.Break1Count; k++)
            {
                string i2 = instance.Break1[k];
                // Key for field: 2, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(18));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i2));
            }
        }
        if (instance.Build != null)
        {
            for(int k=0; k < instance.BuildCount; k++)
            {
                string i3 = instance.Build[k];
                // Key for field: 3, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(26));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i3));
            }
        }
        if (instance.Clone != null)
        {
            for(int k=0; k < instance.CloneCount; k++)
            {
                string i4 = instance.Clone[k];
                // Key for field: 4, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(34));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i4));
            }
        }
        if (instance.Shoot != null)
        {
            for(int k=0; k < instance.ShootCount; k++)
            {
                string i5 = instance.Shoot[k];
                // Key for field: 5, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(42));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i5));
            }
        }
        if (instance.ShootEnd != null)
        {
            for(int k=0; k < instance.ShootEndCount; k++)
            {
                string i6 = instance.ShootEnd[k];
                // Key for field: 6, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(50));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i6));
            }
        }
        if (instance.Reload != null)
        {
            for(int k=0; k < instance.ReloadCount; k++)
            {
                string i7 = instance.Reload[k];
                // Key for field: 7, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(58));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i7));
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_SoundSet instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_SoundSet instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_BlockTypeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_BlockType DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_BlockType instance = new Packet_BlockType();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_BlockType DeserializeBuffer(byte[] buffer, int length, Packet_BlockType instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_BlockType Deserialize(CitoStream stream, Packet_BlockType instance)
    {
        instance.DrawType = Packet_DrawTypeEnum.Empty;
        instance.WalkableType = Packet_WalkableTypeEnum.Empty;
        instance.PistolType = Packet_PistolTypeEnum.Normal;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.TextureIdTop = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.TextureIdBottom = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.TextureIdFront = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.TextureIdBack = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.TextureIdLeft = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 LengthDelimited
            case 50:
                instance.TextureIdRight = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.TextureIdForInventory = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.DrawType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.WalkableType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Rail = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.WalkSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.IsSlipperyWalk = ProtocolParser.ReadBool(stream);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Sounds == null)
                    instance.Sounds = Packet_SoundSetSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_SoundSetSerializer.DeserializeLengthDelimited(stream, instance.Sounds);
                continue;
                // Field 14 Varint
            case 112:
                instance.LightRadius = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 15 Varint
            case 120:
                instance.StartInventoryAmount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 16:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Strength = ProtocolParser.ReadUInt64(stream);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
            case 18:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsBuildable = ProtocolParser.ReadBool(stream);
                continue;
            case 19:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsUsable = ProtocolParser.ReadBool(stream);
                continue;
            case 20:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsTool = ProtocolParser.ReadBool(stream);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Handimage = ProtocolParser.ReadString(stream);
                continue;
            case 22:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsPistol = ProtocolParser.ReadBool(stream);
                continue;
            case 23:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 24:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.RecoilFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 25:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 26:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.BulletsPerShotFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 27:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WalkSpeedWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 28:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsEnabled = ProtocolParser.ReadBool(stream);
                continue;
            case 29:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsMoveSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.IronSightsImage = ProtocolParser.ReadString(stream);
                continue;
            case 31:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsAimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 32:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsFovFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 33:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoMagazine = ProtocolParser.ReadUInt64(stream);
                continue;
            case 34:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoTotal = ProtocolParser.ReadUInt64(stream);
                continue;
            case 35:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ReloadDelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 36:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionRangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 37:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionTimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 38:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 39:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileBounce = ProtocolParser.ReadBool(stream);
                continue;
            case 40:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageBodyFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 41:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageHeadFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 42:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PistolType = ProtocolParser.ReadUInt64(stream);
                continue;
            case 43:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageToPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
            case 44:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WhenPlacedGetsConvertedTo = ProtocolParser.ReadUInt64(stream);
                continue;
            case 45:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PickDistanceWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_BlockType DeserializeLengthDelimited(CitoStream stream, Packet_BlockType instance)
    {
        instance.DrawType = Packet_DrawTypeEnum.Empty;
        instance.WalkableType = Packet_WalkableTypeEnum.Empty;
        instance.PistolType = Packet_PistolTypeEnum.Normal;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.TextureIdTop = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.TextureIdBottom = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.TextureIdFront = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.TextureIdBack = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.TextureIdLeft = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 LengthDelimited
            case 50:
                instance.TextureIdRight = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.TextureIdForInventory = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.DrawType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.WalkableType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Rail = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.WalkSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.IsSlipperyWalk = ProtocolParser.ReadBool(stream);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Sounds == null)
                    instance.Sounds = Packet_SoundSetSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_SoundSetSerializer.DeserializeLengthDelimited(stream, instance.Sounds);
                continue;
                // Field 14 Varint
            case 112:
                instance.LightRadius = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 15 Varint
            case 120:
                instance.StartInventoryAmount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 16:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Strength = ProtocolParser.ReadUInt64(stream);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
            case 18:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsBuildable = ProtocolParser.ReadBool(stream);
                continue;
            case 19:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsUsable = ProtocolParser.ReadBool(stream);
                continue;
            case 20:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsTool = ProtocolParser.ReadBool(stream);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Handimage = ProtocolParser.ReadString(stream);
                continue;
            case 22:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsPistol = ProtocolParser.ReadBool(stream);
                continue;
            case 23:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 24:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.RecoilFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 25:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 26:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.BulletsPerShotFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 27:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WalkSpeedWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 28:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsEnabled = ProtocolParser.ReadBool(stream);
                continue;
            case 29:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsMoveSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.IronSightsImage = ProtocolParser.ReadString(stream);
                continue;
            case 31:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsAimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 32:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsFovFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 33:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoMagazine = ProtocolParser.ReadUInt64(stream);
                continue;
            case 34:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoTotal = ProtocolParser.ReadUInt64(stream);
                continue;
            case 35:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ReloadDelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 36:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionRangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 37:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionTimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 38:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 39:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileBounce = ProtocolParser.ReadBool(stream);
                continue;
            case 40:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageBodyFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 41:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageHeadFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 42:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PistolType = ProtocolParser.ReadUInt64(stream);
                continue;
            case 43:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageToPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
            case 44:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WhenPlacedGetsConvertedTo = ProtocolParser.ReadUInt64(stream);
                continue;
            case 45:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PickDistanceWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_BlockType DeserializeLength(CitoStream stream, int length, Packet_BlockType instance)
    {
        instance.DrawType = Packet_DrawTypeEnum.Empty;
        instance.WalkableType = Packet_WalkableTypeEnum.Empty;
        instance.PistolType = Packet_PistolTypeEnum.Normal;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.TextureIdTop = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.TextureIdBottom = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.TextureIdFront = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.TextureIdBack = ProtocolParser.ReadString(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.TextureIdLeft = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 LengthDelimited
            case 50:
                instance.TextureIdRight = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.TextureIdForInventory = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.DrawType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.WalkableType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Rail = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.WalkSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.IsSlipperyWalk = ProtocolParser.ReadBool(stream);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Sounds == null)
                    instance.Sounds = Packet_SoundSetSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_SoundSetSerializer.DeserializeLengthDelimited(stream, instance.Sounds);
                continue;
                // Field 14 Varint
            case 112:
                instance.LightRadius = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 15 Varint
            case 120:
                instance.StartInventoryAmount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 16:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Strength = ProtocolParser.ReadUInt64(stream);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
            case 18:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsBuildable = ProtocolParser.ReadBool(stream);
                continue;
            case 19:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsUsable = ProtocolParser.ReadBool(stream);
                continue;
            case 20:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsTool = ProtocolParser.ReadBool(stream);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.Handimage = ProtocolParser.ReadString(stream);
                continue;
            case 22:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IsPistol = ProtocolParser.ReadBool(stream);
                continue;
            case 23:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 24:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.RecoilFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 25:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 26:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.BulletsPerShotFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 27:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WalkSpeedWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 28:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsEnabled = ProtocolParser.ReadBool(stream);
                continue;
            case 29:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsMoveSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                instance.IronSightsImage = ProtocolParser.ReadString(stream);
                continue;
            case 31:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsAimRadiusFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 32:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.IronSightsFovFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 33:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoMagazine = ProtocolParser.ReadUInt64(stream);
                continue;
            case 34:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.AmmoTotal = ProtocolParser.ReadUInt64(stream);
                continue;
            case 35:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ReloadDelayFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 36:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionRangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 37:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ExplosionTimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 38:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileSpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 39:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.ProjectileBounce = ProtocolParser.ReadBool(stream);
                continue;
            case 40:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageBodyFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 41:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageHeadFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            case 42:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PistolType = ProtocolParser.ReadUInt64(stream);
                continue;
            case 43:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.DamageToPlayer = ProtocolParser.ReadUInt64(stream);
                continue;
            case 44:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.WhenPlacedGetsConvertedTo = ProtocolParser.ReadUInt64(stream);
                continue;
            case 45:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.PickDistanceWhenUsedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_BlockType instance)
    {
        if (instance.TextureIdTop != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdTop));
        }
        if (instance.TextureIdBottom != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdBottom));
        }
        if (instance.TextureIdFront != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdFront));
        }
        if (instance.TextureIdBack != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdBack));
        }
        if (instance.TextureIdLeft != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdLeft));
        }
        if (instance.TextureIdRight != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdRight));
        }
        if (instance.TextureIdForInventory != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.TextureIdForInventory));
        }
        if (instance.DrawType != Packet_DrawTypeEnum.Empty)
        {
            // Key for field: 8, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(64));
            ProtocolParser.WriteUInt64(stream,instance.DrawType);
        }
        if (instance.WalkableType != Packet_WalkableTypeEnum.Empty)
        {
            // Key for field: 9, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(72));
            ProtocolParser.WriteUInt64(stream,instance.WalkableType);
        }
        // Key for field: 10, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(80));
        ProtocolParser.WriteUInt64(stream,instance.Rail);
        // Key for field: 11, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(88));
        ProtocolParser.WriteUInt64(stream,instance.WalkSpeedFloat);
        // Key for field: 12, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(96));
        ProtocolParser.WriteBool(stream, instance.IsSlipperyWalk);
        if (instance.Sounds != null)
        {
            // Key for field: 13, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(106));
            CitoMemoryStream ms13 = new CitoMemoryStream();
            Packet_SoundSetSerializer.Serialize(ms13, instance.Sounds);
            // Length delimited byte array
            int ms13Length = ms13.Length();
            ProtocolParser.WriteUInt32_(stream, ms13Length);
            stream.Write(ms13.GetBuffer(), 0, ms13Length);
            
        }
        // Key for field: 14, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(112));
        ProtocolParser.WriteUInt64(stream,instance.LightRadius);
        // Key for field: 15, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(120));
        ProtocolParser.WriteUInt64(stream,instance.StartInventoryAmount);
        // Key for field: 16, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(128));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.Strength);
        if (instance.Name != null)
        {
            // Key for field: 17, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        // Key for field: 18, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(144));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsBuildable);
        // Key for field: 19, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(152));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsUsable);
        // Key for field: 20, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(160));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsTool);
        if (instance.Handimage != null)
        {
            // Key for field: 21, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Handimage));
        }
        // Key for field: 22, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(176));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IsPistol);
        // Key for field: 23, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(184));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.AimRadiusFloat);
        // Key for field: 24, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(192));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.RecoilFloat);
        // Key for field: 25, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(200));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.DelayFloat);
        // Key for field: 26, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(208));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.BulletsPerShotFloat);
        // Key for field: 27, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(216));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.WalkSpeedWhenUsedFloat);
        // Key for field: 28, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(224));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteBool(stream, instance.IronSightsEnabled);
        // Key for field: 29, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(232));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.IronSightsMoveSpeedFloat);
        if (instance.IronSightsImage != null)
        {
            // Key for field: 30, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(242));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.IronSightsImage));
        }
        // Key for field: 31, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(248));
        stream.WriteByte(ProtoPlatform.IntToByte(1));
        ProtocolParser.WriteUInt64(stream,instance.IronSightsAimRadiusFloat);
        // Key for field: 32, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(128));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.IronSightsFovFloat);
        // Key for field: 33, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(136));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.AmmoMagazine);
        // Key for field: 34, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(144));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.AmmoTotal);
        // Key for field: 35, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(152));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ReloadDelayFloat);
        // Key for field: 36, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(160));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ExplosionRangeFloat);
        // Key for field: 37, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(168));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ExplosionTimeFloat);
        // Key for field: 38, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(176));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.ProjectileSpeedFloat);
        // Key for field: 39, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(184));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteBool(stream, instance.ProjectileBounce);
        // Key for field: 40, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(192));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.DamageBodyFloat);
        // Key for field: 41, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(200));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.DamageHeadFloat);
        if (instance.PistolType != Packet_PistolTypeEnum.Normal)
        {
            // Key for field: 42, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(208));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            ProtocolParser.WriteUInt64(stream,instance.PistolType);
        }
        // Key for field: 43, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(216));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.DamageToPlayer);
        // Key for field: 44, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(224));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.WhenPlacedGetsConvertedTo);
        // Key for field: 45, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(232));
        stream.WriteByte(ProtoPlatform.IntToByte(2));
        ProtocolParser.WriteUInt64(stream,instance.PickDistanceWhenUsedFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_BlockType instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_BlockType instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerIdentificationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerIdentification DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerIdentification instance = new Packet_ServerIdentification();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerIdentification DeserializeBuffer(byte[] buffer, int length, Packet_ServerIdentification instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerIdentification Deserialize(CitoStream stream, Packet_ServerIdentification instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AssignedClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.ServerName = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerMotd = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.DisableShadows = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.PlayerAreaSize = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.RenderHint_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.RequiredBlobMd5 == null)
                    instance.RequiredBlobMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobMd5);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.RequiredBlobName == null)
                    instance.RequiredBlobName = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobName);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerIdentification DeserializeLengthDelimited(CitoStream stream, Packet_ServerIdentification instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AssignedClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.ServerName = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerMotd = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.DisableShadows = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.PlayerAreaSize = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.RenderHint_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.RequiredBlobMd5 == null)
                    instance.RequiredBlobMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobMd5);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.RequiredBlobName == null)
                    instance.RequiredBlobName = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobName);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerIdentification DeserializeLength(CitoStream stream, int length, Packet_ServerIdentification instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.MdProtocolVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.AssignedClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.ServerName = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.ServerMotd = ProtocolParser.ReadString(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.DisableShadows = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.PlayerAreaSize = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.RenderHint_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.RequiredBlobMd5 == null)
                    instance.RequiredBlobMd5 = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobMd5);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.RequiredBlobName == null)
                    instance.RequiredBlobName = Packet_StringListSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_StringListSerializer.DeserializeLengthDelimited(stream, instance.RequiredBlobName);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerIdentification instance)
    {
        if (instance.MdProtocolVersion != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.MdProtocolVersion));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.AssignedClientId);
        if (instance.ServerName != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerName));
        }
        if (instance.ServerMotd != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerMotd));
        }
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeX);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeY);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeZ);
        // Key for field: 11, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(88));
        ProtocolParser.WriteUInt64(stream,instance.DisableShadows);
        // Key for field: 12, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(96));
        ProtocolParser.WriteUInt64(stream,instance.PlayerAreaSize);
        // Key for field: 13, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(104));
        ProtocolParser.WriteUInt64(stream,instance.RenderHint_);
        if (instance.RequiredBlobMd5 != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            CitoMemoryStream ms14 = new CitoMemoryStream();
            Packet_StringListSerializer.Serialize(ms14, instance.RequiredBlobMd5);
            // Length delimited byte array
            int ms14Length = ms14.Length();
            ProtocolParser.WriteUInt32_(stream, ms14Length);
            stream.Write(ms14.GetBuffer(), 0, ms14Length);
            
        }
        if (instance.RequiredBlobName != null)
        {
            // Key for field: 15, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(122));
            CitoMemoryStream ms15 = new CitoMemoryStream();
            Packet_StringListSerializer.Serialize(ms15, instance.RequiredBlobName);
            // Length delimited byte array
            int ms15Length = ms15.Length();
            ProtocolParser.WriteUInt32_(stream, ms15Length);
            stream.Write(ms15.GetBuffer(), 0, ms15Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerIdentification instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerIdentification instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_StringListSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_StringList DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_StringList instance = new Packet_StringList();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_StringList DeserializeBuffer(byte[] buffer, int length, Packet_StringList instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_StringList Deserialize(CitoStream stream, Packet_StringList instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new string[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.ItemsAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_StringList DeserializeLengthDelimited(CitoStream stream, Packet_StringList instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new string[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.ItemsAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_StringList DeserializeLength(CitoStream stream, int length, Packet_StringList instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new string[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.ItemsAdd(ProtocolParser.ReadString(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_StringList instance)
    {
        if (instance.Items != null)
        {
            for(int k=0; k < instance.ItemsCount; k++)
            {
                string i1 = instance.Items[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(i1));
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_StringList instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_StringList instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_IntStringSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_IntString DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_IntString instance = new Packet_IntString();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_IntString DeserializeBuffer(byte[] buffer, int length, Packet_IntString instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_IntString Deserialize(CitoStream stream, Packet_IntString instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Value_ = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntString DeserializeLengthDelimited(CitoStream stream, Packet_IntString instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Value_ = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntString DeserializeLength(CitoStream stream, int length, Packet_IntString instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Value_ = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_IntString instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Key_);
        if (instance.Value_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Value_));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_IntString instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_IntString instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPlayerSpawnPositionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPlayerSpawnPosition instance = new Packet_ServerPlayerSpawnPosition();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeBuffer(byte[] buffer, int length, Packet_ServerPlayerSpawnPosition instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerSpawnPosition Deserialize(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeLengthDelimited(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerSpawnPosition DeserializeLength(CitoStream stream, int length, Packet_ServerPlayerSpawnPosition instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPlayerSpawnPosition instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPlayerSpawnPosition instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLevelInitializeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLevelInitialize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLevelInitialize instance = new Packet_ServerLevelInitialize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLevelInitialize DeserializeBuffer(byte[] buffer, int length, Packet_ServerLevelInitialize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelInitialize Deserialize(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelInitialize DeserializeLengthDelimited(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelInitialize DeserializeLength(CitoStream stream, int length, Packet_ServerLevelInitialize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLevelInitialize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLevelInitialize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlobInitializeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlobInitialize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlobInitialize instance = new Packet_ServerBlobInitialize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlobInitialize DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlobInitialize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobInitialize Deserialize(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Md5 = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobInitialize DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Md5 = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobInitialize DeserializeLength(CitoStream stream, int length, Packet_ServerBlobInitialize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Md5 = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        if (instance.Md5 != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Md5));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlobInitialize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlobInitialize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlobPartSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlobPart DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlobPart instance = new Packet_ServerBlobPart();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlobPart DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlobPart instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobPart Deserialize(CitoStream stream, Packet_ServerBlobPart instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Data = ProtocolParser.ReadBytes(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Islastpart = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobPart DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlobPart instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Data = ProtocolParser.ReadBytes(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Islastpart = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobPart DeserializeLength(CitoStream stream, int length, Packet_ServerBlobPart instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Data = ProtocolParser.ReadBytes(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Islastpart = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlobPart instance)
    {
        if (instance.Data != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, instance.Data);
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Islastpart);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlobPart instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlobPart instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlobFinalizeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlobFinalize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlobFinalize instance = new Packet_ServerBlobFinalize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlobFinalize DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlobFinalize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobFinalize Deserialize(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobFinalize DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlobFinalize DeserializeLength(CitoStream stream, int length, Packet_ServerBlobFinalize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlobFinalize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlobFinalize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlockTypesSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlockTypes DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlockTypes instance = new Packet_ServerBlockTypes();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlockTypes DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlockTypes instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockTypes Deserialize(CitoStream stream, Packet_ServerBlockTypes instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockTypes DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlockTypes instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockTypes DeserializeLength(CitoStream stream, int length, Packet_ServerBlockTypes instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlockTypes instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlockTypes instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlockTypes instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBlockTypeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBlockType DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBlockType instance = new Packet_ServerBlockType();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBlockType DeserializeBuffer(byte[] buffer, int length, Packet_ServerBlockType instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockType Deserialize(CitoStream stream, Packet_ServerBlockType instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Blocktype == null)
                    instance.Blocktype = Packet_BlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_BlockTypeSerializer.DeserializeLengthDelimited(stream, instance.Blocktype);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockType DeserializeLengthDelimited(CitoStream stream, Packet_ServerBlockType instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Blocktype == null)
                    instance.Blocktype = Packet_BlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_BlockTypeSerializer.DeserializeLengthDelimited(stream, instance.Blocktype);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBlockType DeserializeLength(CitoStream stream, int length, Packet_ServerBlockType instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Blocktype == null)
                    instance.Blocktype = Packet_BlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_BlockTypeSerializer.DeserializeLengthDelimited(stream, instance.Blocktype);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBlockType instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        if (instance.Blocktype != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_BlockTypeSerializer.Serialize(ms2, instance.Blocktype);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBlockType instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBlockType instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSunLevelsSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSunLevels DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSunLevels instance = new Packet_ServerSunLevels();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSunLevels DeserializeBuffer(byte[] buffer, int length, Packet_ServerSunLevels instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSunLevels Deserialize(CitoStream stream, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels == null)
        {
            instance.Sunlevels = new int[1];
            instance.SunlevelsCount = 0;
            instance.SunlevelsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.SunlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSunLevels DeserializeLengthDelimited(CitoStream stream, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels == null)
        {
            instance.Sunlevels = new int[1];
            instance.SunlevelsCount = 0;
            instance.SunlevelsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.SunlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSunLevels DeserializeLength(CitoStream stream, int length, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels == null)
        {
            instance.Sunlevels = new int[1];
            instance.SunlevelsCount = 0;
            instance.SunlevelsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.SunlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSunLevels instance)
    {
        if (instance.Sunlevels != null)
        {
            for(int k=0; k < instance.SunlevelsCount; k++)
            {
                int i1 = instance.Sunlevels[k];
                // Key for field: 1, Varint
                stream.WriteByte(ProtoPlatform.IntToByte(8));
                ProtocolParser.WriteUInt64(stream,i1);
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSunLevels instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSunLevels instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLightLevelsSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLightLevels DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLightLevels instance = new Packet_ServerLightLevels();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLightLevels DeserializeBuffer(byte[] buffer, int length, Packet_ServerLightLevels instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLightLevels Deserialize(CitoStream stream, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels == null)
        {
            instance.Lightlevels = new int[1];
            instance.LightlevelsCount = 0;
            instance.LightlevelsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.LightlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLightLevels DeserializeLengthDelimited(CitoStream stream, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels == null)
        {
            instance.Lightlevels = new int[1];
            instance.LightlevelsCount = 0;
            instance.LightlevelsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.LightlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLightLevels DeserializeLength(CitoStream stream, int length, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels == null)
        {
            instance.Lightlevels = new int[1];
            instance.LightlevelsCount = 0;
            instance.LightlevelsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                // repeated
                instance.LightlevelsAdd(ProtocolParser.ReadUInt64(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLightLevels instance)
    {
        if (instance.Lightlevels != null)
        {
            for(int k=0; k < instance.LightlevelsCount; k++)
            {
                int i1 = instance.Lightlevels[k];
                // Key for field: 1, Varint
                stream.WriteByte(ProtoPlatform.IntToByte(8));
                ProtocolParser.WriteUInt64(stream,i1);
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLightLevels instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLightLevels instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerCraftingRecipesSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerCraftingRecipes DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerCraftingRecipes instance = new Packet_ServerCraftingRecipes();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerCraftingRecipes DeserializeBuffer(byte[] buffer, int length, Packet_ServerCraftingRecipes instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerCraftingRecipes Deserialize(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes == null)
        {
            instance.CraftingRecipes = new Packet_CraftingRecipe[1];
            instance.CraftingRecipesCount = 0;
            instance.CraftingRecipesLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.CraftingRecipesAdd(Packet_CraftingRecipeSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerCraftingRecipes DeserializeLengthDelimited(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes == null)
        {
            instance.CraftingRecipes = new Packet_CraftingRecipe[1];
            instance.CraftingRecipesCount = 0;
            instance.CraftingRecipesLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.CraftingRecipesAdd(Packet_CraftingRecipeSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerCraftingRecipes DeserializeLength(CitoStream stream, int length, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes == null)
        {
            instance.CraftingRecipes = new Packet_CraftingRecipe[1];
            instance.CraftingRecipesCount = 0;
            instance.CraftingRecipesLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.CraftingRecipesAdd(Packet_CraftingRecipeSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        if (instance.CraftingRecipes != null)
        {
            for(int k=0; k < instance.CraftingRecipesCount; k++)
            {
                Packet_CraftingRecipe i1 = instance.CraftingRecipes[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_CraftingRecipeSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerCraftingRecipes instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerCraftingRecipes instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_IngredientSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Ingredient DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Ingredient instance = new Packet_Ingredient();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Ingredient DeserializeBuffer(byte[] buffer, int length, Packet_Ingredient instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Ingredient Deserialize(CitoStream stream, Packet_Ingredient instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Amount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Ingredient DeserializeLengthDelimited(CitoStream stream, Packet_Ingredient instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Amount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Ingredient DeserializeLength(CitoStream stream, int length, Packet_Ingredient instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Amount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Ingredient instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Type);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Amount);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Ingredient instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Ingredient instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_CraftingRecipeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_CraftingRecipe DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_CraftingRecipe instance = new Packet_CraftingRecipe();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_CraftingRecipe DeserializeBuffer(byte[] buffer, int length, Packet_CraftingRecipe instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_CraftingRecipe Deserialize(CitoStream stream, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients == null)
        {
            instance.Ingredients = new Packet_Ingredient[1];
            instance.IngredientsCount = 0;
            instance.IngredientsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.IngredientsAdd(Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Output == null)
                    instance.Output = Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_IngredientSerializer.DeserializeLengthDelimited(stream, instance.Output);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_CraftingRecipe DeserializeLengthDelimited(CitoStream stream, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients == null)
        {
            instance.Ingredients = new Packet_Ingredient[1];
            instance.IngredientsCount = 0;
            instance.IngredientsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.IngredientsAdd(Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Output == null)
                    instance.Output = Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_IngredientSerializer.DeserializeLengthDelimited(stream, instance.Output);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_CraftingRecipe DeserializeLength(CitoStream stream, int length, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients == null)
        {
            instance.Ingredients = new Packet_Ingredient[1];
            instance.IngredientsCount = 0;
            instance.IngredientsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.IngredientsAdd(Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Output == null)
                    instance.Output = Packet_IngredientSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_IngredientSerializer.DeserializeLengthDelimited(stream, instance.Output);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_CraftingRecipe instance)
    {
        if (instance.Ingredients != null)
        {
            for(int k=0; k < instance.IngredientsCount; k++)
            {
                Packet_Ingredient i1 = instance.Ingredients[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_IngredientSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
        if (instance.Output != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_IngredientSerializer.Serialize(ms2, instance.Output);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_CraftingRecipe instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_CraftingRecipe instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLevelProgressSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLevelProgress DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLevelProgress instance = new Packet_ServerLevelProgress();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLevelProgress DeserializeBuffer(byte[] buffer, int length, Packet_ServerLevelProgress instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelProgress Deserialize(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.PercentComplete = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Status = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.PercentCompleteSubitem = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelProgress DeserializeLengthDelimited(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.PercentComplete = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Status = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.PercentCompleteSubitem = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelProgress DeserializeLength(CitoStream stream, int length, Packet_ServerLevelProgress instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.PercentComplete = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Status = ProtocolParser.ReadString(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.PercentCompleteSubitem = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.PercentComplete);
        if (instance.Status != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Status));
        }
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.PercentCompleteSubitem);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLevelProgress instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLevelProgress instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerLevelFinalizeSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerLevelFinalize DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerLevelFinalize instance = new Packet_ServerLevelFinalize();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerLevelFinalize DeserializeBuffer(byte[] buffer, int length, Packet_ServerLevelFinalize instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelFinalize Deserialize(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelFinalize DeserializeLengthDelimited(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerLevelFinalize DeserializeLength(CitoStream stream, int length, Packet_ServerLevelFinalize instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerLevelFinalize instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerLevelFinalize instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSetBlockSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSetBlock DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSetBlock instance = new Packet_ServerSetBlock();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSetBlock DeserializeBuffer(byte[] buffer, int length, Packet_ServerSetBlock instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSetBlock Deserialize(CitoStream stream, Packet_ServerSetBlock instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSetBlock DeserializeLengthDelimited(CitoStream stream, Packet_ServerSetBlock instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSetBlock DeserializeLength(CitoStream stream, int length, Packet_ServerSetBlock instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSetBlock instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSetBlock instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSetBlock instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFillAreaSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFillArea DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFillArea instance = new Packet_ServerFillArea();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFillArea DeserializeBuffer(byte[] buffer, int length, Packet_ServerFillArea instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillArea Deserialize(CitoStream stream, Packet_ServerFillArea instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillArea DeserializeLengthDelimited(CitoStream stream, Packet_ServerFillArea instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillArea DeserializeLength(CitoStream stream, int length, Packet_ServerFillArea instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Z1 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Z2 = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFillArea instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X1);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X2);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y1);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y2);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Z1);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Z2);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.BlockCount);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFillArea instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFillArea instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFillAreaLimitSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFillAreaLimit DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFillAreaLimit instance = new Packet_ServerFillAreaLimit();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFillAreaLimit DeserializeBuffer(byte[] buffer, int length, Packet_ServerFillAreaLimit instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillAreaLimit Deserialize(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Limit = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillAreaLimit DeserializeLengthDelimited(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Limit = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFillAreaLimit DeserializeLength(CitoStream stream, int length, Packet_ServerFillAreaLimit instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Limit = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Limit);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFillAreaLimit instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFillAreaLimit instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFreemoveSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFreemove DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFreemove instance = new Packet_ServerFreemove();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFreemove DeserializeBuffer(byte[] buffer, int length, Packet_ServerFreemove instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFreemove Deserialize(CitoStream stream, Packet_ServerFreemove instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.IsEnabled = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFreemove DeserializeLengthDelimited(CitoStream stream, Packet_ServerFreemove instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.IsEnabled = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFreemove DeserializeLength(CitoStream stream, int length, Packet_ServerFreemove instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.IsEnabled = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFreemove instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.IsEnabled);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFreemove instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFreemove instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerMessageSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerMessage DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerMessage instance = new Packet_ServerMessage();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerMessage DeserializeBuffer(byte[] buffer, int length, Packet_ServerMessage instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMessage Deserialize(CitoStream stream, Packet_ServerMessage instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMessage DeserializeLengthDelimited(CitoStream stream, Packet_ServerMessage instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMessage DeserializeLength(CitoStream stream, int length, Packet_ServerMessage instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 LengthDelimited
            case 18:
                instance.Message = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerMessage instance)
    {
        if (instance.Message != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Message));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerMessage instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerMessage instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerDisconnectPlayerSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerDisconnectPlayer DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerDisconnectPlayer instance = new Packet_ServerDisconnectPlayer();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerDisconnectPlayer DeserializeBuffer(byte[] buffer, int length, Packet_ServerDisconnectPlayer instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDisconnectPlayer Deserialize(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DisconnectReason = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDisconnectPlayer DeserializeLengthDelimited(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DisconnectReason = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDisconnectPlayer DeserializeLength(CitoStream stream, int length, Packet_ServerDisconnectPlayer instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DisconnectReason = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        if (instance.DisconnectReason != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.DisconnectReason));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerDisconnectPlayer instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerDisconnectPlayer instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSoundSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSound DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSound instance = new Packet_ServerSound();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSound DeserializeBuffer(byte[] buffer, int length, Packet_ServerSound instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSound Deserialize(CitoStream stream, Packet_ServerSound instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSound DeserializeLengthDelimited(CitoStream stream, Packet_ServerSound instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSound DeserializeLength(CitoStream stream, int length, Packet_ServerSound instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSound instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Z);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSound instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSound instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerFollowSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerFollow DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerFollow instance = new Packet_ServerFollow();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerFollow DeserializeBuffer(byte[] buffer, int length, Packet_ServerFollow instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFollow Deserialize(CitoStream stream, Packet_ServerFollow instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Client = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Tpp = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFollow DeserializeLengthDelimited(CitoStream stream, Packet_ServerFollow instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Client = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Tpp = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerFollow DeserializeLength(CitoStream stream, int length, Packet_ServerFollow instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Client = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Tpp = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerFollow instance)
    {
        if (instance.Client != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Client));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Tpp);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerFollow instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerFollow instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerBulletSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerBullet DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerBullet instance = new Packet_ServerBullet();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerBullet DeserializeBuffer(byte[] buffer, int length, Packet_ServerBullet instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBullet Deserialize(CitoStream stream, Packet_ServerBullet instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.SpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBullet DeserializeLengthDelimited(CitoStream stream, Packet_ServerBullet instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.SpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerBullet DeserializeLength(CitoStream stream, int length, Packet_ServerBullet instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ToXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.ToYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.ToZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.SpeedFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerBullet instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.FromXFloat);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.FromYFloat);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.FromZFloat);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.ToXFloat);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.ToYFloat);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.ToZFloat);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.SpeedFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerBullet instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerBullet instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerProjectileSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerProjectile DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerProjectile instance = new Packet_ServerProjectile();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerProjectile DeserializeBuffer(byte[] buffer, int length, Packet_ServerProjectile instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerProjectile Deserialize(CitoStream stream, Packet_ServerProjectile instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.VelocityXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.VelocityYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.VelocityZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ExplodesAfterFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.SourcePlayerID = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerProjectile DeserializeLengthDelimited(CitoStream stream, Packet_ServerProjectile instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.VelocityXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.VelocityYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.VelocityZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ExplodesAfterFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.SourcePlayerID = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerProjectile DeserializeLength(CitoStream stream, int length, Packet_ServerProjectile instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.FromXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.FromYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FromZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.VelocityXFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.VelocityYFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.VelocityZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ExplodesAfterFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 Varint
            case 72:
                instance.SourcePlayerID = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerProjectile instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.FromXFloat);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.FromYFloat);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.FromZFloat);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.VelocityXFloat);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.VelocityYFloat);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.VelocityZFloat);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.BlockId);
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.ExplodesAfterFloat);
        // Key for field: 9, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(72));
        ProtocolParser.WriteUInt64(stream,instance.SourcePlayerID);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerProjectile instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerProjectile instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerExplosionSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerExplosion DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerExplosion instance = new Packet_ServerExplosion();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerExplosion DeserializeBuffer(byte[] buffer, int length, Packet_ServerExplosion instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerExplosion Deserialize(CitoStream stream, Packet_ServerExplosion instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.XFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.YFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsRelativeToPlayerPosition = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.TimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerExplosion DeserializeLengthDelimited(CitoStream stream, Packet_ServerExplosion instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.XFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.YFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsRelativeToPlayerPosition = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.TimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerExplosion DeserializeLength(CitoStream stream, int length, Packet_ServerExplosion instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.XFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.YFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ZFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsRelativeToPlayerPosition = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.TimeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerExplosion instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.XFloat);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.YFloat);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.ZFloat);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.IsRelativeToPlayerPosition);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.RangeFloat);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.TimeFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerExplosion instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerExplosion instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerQueryAnswerSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerQueryAnswer DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerQueryAnswer instance = new Packet_ServerQueryAnswer();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerQueryAnswer DeserializeBuffer(byte[] buffer, int length, Packet_ServerQueryAnswer instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerQueryAnswer Deserialize(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.MOTD = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.PlayerCount = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxPlayers = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.PlayerList = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.GameMode = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.Password = ProtocolParser.ReadBool(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.PublicHash = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 LengthDelimited
            case 82:
                instance.ServerVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                instance.ServerThumbnail = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerQueryAnswer DeserializeLengthDelimited(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.MOTD = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.PlayerCount = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxPlayers = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.PlayerList = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.GameMode = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.Password = ProtocolParser.ReadBool(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.PublicHash = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 LengthDelimited
            case 82:
                instance.ServerVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                instance.ServerThumbnail = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerQueryAnswer DeserializeLength(CitoStream stream, int length, Packet_ServerQueryAnswer instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.MOTD = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.PlayerCount = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxPlayers = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.PlayerList = ProtocolParser.ReadString(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.GameMode = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.Password = ProtocolParser.ReadBool(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.PublicHash = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 LengthDelimited
            case 82:
                instance.ServerVersion = ProtocolParser.ReadString(stream);
                continue;
                // Field 11 Varint
            case 88:
                instance.MapSizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 12 Varint
            case 96:
                instance.MapSizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 13 Varint
            case 104:
                instance.MapSizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 14 LengthDelimited
            case 114:
                instance.ServerThumbnail = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        if (instance.MOTD != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.MOTD));
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.PlayerCount);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.MaxPlayers);
        if (instance.PlayerList != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.PlayerList));
        }
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Port);
        if (instance.GameMode != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.GameMode));
        }
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteBool(stream, instance.Password);
        if (instance.PublicHash != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.PublicHash));
        }
        if (instance.ServerVersion != null)
        {
            // Key for field: 10, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(82));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ServerVersion));
        }
        // Key for field: 11, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(88));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeX);
        // Key for field: 12, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(96));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeY);
        // Key for field: 13, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(104));
        ProtocolParser.WriteUInt64(stream,instance.MapSizeZ);
        if (instance.ServerThumbnail != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            ProtocolParser.WriteBytes(stream, instance.ServerThumbnail);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerQueryAnswer instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerQueryAnswer instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerRedirectSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerRedirect DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerRedirect instance = new Packet_ServerRedirect();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerRedirect DeserializeBuffer(byte[] buffer, int length, Packet_ServerRedirect instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerRedirect Deserialize(CitoStream stream, Packet_ServerRedirect instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.IP = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerRedirect DeserializeLengthDelimited(CitoStream stream, Packet_ServerRedirect instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.IP = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerRedirect DeserializeLength(CitoStream stream, int length, Packet_ServerRedirect instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.IP = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Port = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerRedirect instance)
    {
        if (instance.IP != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.IP));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Port);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerRedirect instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerRedirect instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Server DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Server instance = new Packet_Server();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Server DeserializeBuffer(byte[] buffer, int length, Packet_Server instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Server Deserialize(CitoStream stream, Packet_Server instance)
    {
        instance.Id = Packet_ServerIdEnum.ServerIdentification;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Identification == null)
                    instance.Identification = Packet_ServerIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.LevelInitialize == null)
                    instance.LevelInitialize = Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimited(stream, instance.LevelInitialize);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.LevelDataChunk == null)
                    instance.LevelDataChunk = Packet_ServerLevelProgressSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelProgressSerializer.DeserializeLengthDelimited(stream, instance.LevelDataChunk);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.LevelFinalize == null)
                    instance.LevelFinalize = Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimited(stream, instance.LevelFinalize);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ServerSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Message == null)
                    instance.Message = Packet_ServerMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.DisconnectPlayer == null)
                    instance.DisconnectPlayer = Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimited(stream, instance.DisconnectPlayer);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Chunk_ == null)
                    instance.Chunk_ = Packet_ServerChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkSerializer.DeserializeLengthDelimited(stream, instance.Chunk_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_ServerInventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerInventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Season == null)
                    instance.Season = Packet_ServerSeasonSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSeasonSerializer.DeserializeLengthDelimited(stream, instance.Season);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.BlobInitialize == null)
                    instance.BlobInitialize = Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimited(stream, instance.BlobInitialize);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.BlobPart == null)
                    instance.BlobPart = Packet_ServerBlobPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobPartSerializer.DeserializeLengthDelimited(stream, instance.BlobPart);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 90:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
            case 51:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ServerFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 52:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillAreaLimit == null)
                    instance.FillAreaLimit = Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimited(stream, instance.FillAreaLimit);
                continue;
            case 53:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Freemove == null)
                    instance.Freemove = Packet_ServerFreemoveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFreemoveSerializer.DeserializeLengthDelimited(stream, instance.Freemove);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlobFinalize == null)
                    instance.BlobFinalize = Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimited(stream, instance.BlobFinalize);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.HeightmapChunk == null)
                    instance.HeightmapChunk = Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimited(stream, instance.HeightmapChunk);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ping == null)
                    instance.Ping = Packet_ServerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPingSerializer.DeserializeLengthDelimited(stream, instance.Ping);
                continue;
            case 181:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerPing == null)
                    instance.PlayerPing = Packet_ServerPlayerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerPingSerializer.DeserializeLengthDelimited(stream, instance.PlayerPing);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Sound == null)
                    instance.Sound = Packet_ServerSoundSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSoundSerializer.DeserializeLengthDelimited(stream, instance.Sound);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Monster == null)
                    instance.Monster = Packet_ServerMonstersSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMonstersSerializer.DeserializeLengthDelimited(stream, instance.Monster);
                continue;
            case 22:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerSpawnPosition == null)
                    instance.PlayerSpawnPosition = Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimited(stream, instance.PlayerSpawnPosition);
                continue;
            case 23:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockTypes == null)
                    instance.BlockTypes = Packet_ServerBlockTypesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypesSerializer.DeserializeLengthDelimited(stream, instance.BlockTypes);
                continue;
            case 24:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.SunLevels == null)
                    instance.SunLevels = Packet_ServerSunLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSunLevelsSerializer.DeserializeLengthDelimited(stream, instance.SunLevels);
                continue;
            case 25:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.LightLevels == null)
                    instance.LightLevels = Packet_ServerLightLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLightLevelsSerializer.DeserializeLengthDelimited(stream, instance.LightLevels);
                continue;
            case 26:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.CraftingRecipes == null)
                    instance.CraftingRecipes = Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimited(stream, instance.CraftingRecipes);
                continue;
            case 27:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Dialog == null)
                    instance.Dialog = Packet_ServerDialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
            case 28:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Follow == null)
                    instance.Follow = Packet_ServerFollowSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFollowSerializer.DeserializeLengthDelimited(stream, instance.Follow);
                continue;
            case 29:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Bullet == null)
                    instance.Bullet = Packet_ServerBulletSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBulletSerializer.DeserializeLengthDelimited(stream, instance.Bullet);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ammo == null)
                    instance.Ammo = Packet_ServerAmmoSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerAmmoSerializer.DeserializeLengthDelimited(stream, instance.Ammo);
                continue;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockType == null)
                    instance.BlockType = Packet_ServerBlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypeSerializer.DeserializeLengthDelimited(stream, instance.BlockType);
                continue;
            case 32:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.ChunkPart == null)
                    instance.ChunkPart = Packet_ServerChunkPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkPartSerializer.DeserializeLengthDelimited(stream, instance.ChunkPart);
                continue;
            case 33:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Explosion == null)
                    instance.Explosion = Packet_ServerExplosionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerExplosionSerializer.DeserializeLengthDelimited(stream, instance.Explosion);
                continue;
            case 34:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Projectile == null)
                    instance.Projectile = Packet_ServerProjectileSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerProjectileSerializer.DeserializeLengthDelimited(stream, instance.Projectile);
                continue;
            case 35:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Translation == null)
                    instance.Translation = Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimited(stream, instance.Translation);
                continue;
            case 36:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.QueryAnswer == null)
                    instance.QueryAnswer = Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimited(stream, instance.QueryAnswer);
                continue;
            case 37:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Redirect == null)
                    instance.Redirect = Packet_ServerRedirectSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerRedirectSerializer.DeserializeLengthDelimited(stream, instance.Redirect);
                continue;
            case 39:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntitySpawn == null)
                    instance.EntitySpawn = Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimited(stream, instance.EntitySpawn);
                continue;
            case 40:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityPosition == null)
                    instance.EntityPosition = Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.EntityPosition);
                continue;
            case 41:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityDespawn == null)
                    instance.EntityDespawn = Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimited(stream, instance.EntityDespawn);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Server DeserializeLengthDelimited(CitoStream stream, Packet_Server instance)
    {
        instance.Id = Packet_ServerIdEnum.ServerIdentification;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Identification == null)
                    instance.Identification = Packet_ServerIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.LevelInitialize == null)
                    instance.LevelInitialize = Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimited(stream, instance.LevelInitialize);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.LevelDataChunk == null)
                    instance.LevelDataChunk = Packet_ServerLevelProgressSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelProgressSerializer.DeserializeLengthDelimited(stream, instance.LevelDataChunk);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.LevelFinalize == null)
                    instance.LevelFinalize = Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimited(stream, instance.LevelFinalize);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ServerSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Message == null)
                    instance.Message = Packet_ServerMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.DisconnectPlayer == null)
                    instance.DisconnectPlayer = Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimited(stream, instance.DisconnectPlayer);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Chunk_ == null)
                    instance.Chunk_ = Packet_ServerChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkSerializer.DeserializeLengthDelimited(stream, instance.Chunk_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_ServerInventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerInventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Season == null)
                    instance.Season = Packet_ServerSeasonSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSeasonSerializer.DeserializeLengthDelimited(stream, instance.Season);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.BlobInitialize == null)
                    instance.BlobInitialize = Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimited(stream, instance.BlobInitialize);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.BlobPart == null)
                    instance.BlobPart = Packet_ServerBlobPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobPartSerializer.DeserializeLengthDelimited(stream, instance.BlobPart);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 90:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
            case 51:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ServerFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 52:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillAreaLimit == null)
                    instance.FillAreaLimit = Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimited(stream, instance.FillAreaLimit);
                continue;
            case 53:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Freemove == null)
                    instance.Freemove = Packet_ServerFreemoveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFreemoveSerializer.DeserializeLengthDelimited(stream, instance.Freemove);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlobFinalize == null)
                    instance.BlobFinalize = Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimited(stream, instance.BlobFinalize);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.HeightmapChunk == null)
                    instance.HeightmapChunk = Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimited(stream, instance.HeightmapChunk);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ping == null)
                    instance.Ping = Packet_ServerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPingSerializer.DeserializeLengthDelimited(stream, instance.Ping);
                continue;
            case 181:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerPing == null)
                    instance.PlayerPing = Packet_ServerPlayerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerPingSerializer.DeserializeLengthDelimited(stream, instance.PlayerPing);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Sound == null)
                    instance.Sound = Packet_ServerSoundSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSoundSerializer.DeserializeLengthDelimited(stream, instance.Sound);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Monster == null)
                    instance.Monster = Packet_ServerMonstersSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMonstersSerializer.DeserializeLengthDelimited(stream, instance.Monster);
                continue;
            case 22:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerSpawnPosition == null)
                    instance.PlayerSpawnPosition = Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimited(stream, instance.PlayerSpawnPosition);
                continue;
            case 23:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockTypes == null)
                    instance.BlockTypes = Packet_ServerBlockTypesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypesSerializer.DeserializeLengthDelimited(stream, instance.BlockTypes);
                continue;
            case 24:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.SunLevels == null)
                    instance.SunLevels = Packet_ServerSunLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSunLevelsSerializer.DeserializeLengthDelimited(stream, instance.SunLevels);
                continue;
            case 25:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.LightLevels == null)
                    instance.LightLevels = Packet_ServerLightLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLightLevelsSerializer.DeserializeLengthDelimited(stream, instance.LightLevels);
                continue;
            case 26:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.CraftingRecipes == null)
                    instance.CraftingRecipes = Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimited(stream, instance.CraftingRecipes);
                continue;
            case 27:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Dialog == null)
                    instance.Dialog = Packet_ServerDialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
            case 28:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Follow == null)
                    instance.Follow = Packet_ServerFollowSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFollowSerializer.DeserializeLengthDelimited(stream, instance.Follow);
                continue;
            case 29:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Bullet == null)
                    instance.Bullet = Packet_ServerBulletSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBulletSerializer.DeserializeLengthDelimited(stream, instance.Bullet);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ammo == null)
                    instance.Ammo = Packet_ServerAmmoSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerAmmoSerializer.DeserializeLengthDelimited(stream, instance.Ammo);
                continue;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockType == null)
                    instance.BlockType = Packet_ServerBlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypeSerializer.DeserializeLengthDelimited(stream, instance.BlockType);
                continue;
            case 32:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.ChunkPart == null)
                    instance.ChunkPart = Packet_ServerChunkPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkPartSerializer.DeserializeLengthDelimited(stream, instance.ChunkPart);
                continue;
            case 33:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Explosion == null)
                    instance.Explosion = Packet_ServerExplosionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerExplosionSerializer.DeserializeLengthDelimited(stream, instance.Explosion);
                continue;
            case 34:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Projectile == null)
                    instance.Projectile = Packet_ServerProjectileSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerProjectileSerializer.DeserializeLengthDelimited(stream, instance.Projectile);
                continue;
            case 35:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Translation == null)
                    instance.Translation = Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimited(stream, instance.Translation);
                continue;
            case 36:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.QueryAnswer == null)
                    instance.QueryAnswer = Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimited(stream, instance.QueryAnswer);
                continue;
            case 37:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Redirect == null)
                    instance.Redirect = Packet_ServerRedirectSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerRedirectSerializer.DeserializeLengthDelimited(stream, instance.Redirect);
                continue;
            case 39:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntitySpawn == null)
                    instance.EntitySpawn = Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimited(stream, instance.EntitySpawn);
                continue;
            case 40:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityPosition == null)
                    instance.EntityPosition = Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.EntityPosition);
                continue;
            case 41:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityDespawn == null)
                    instance.EntityDespawn = Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimited(stream, instance.EntityDespawn);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Server DeserializeLength(CitoStream stream, int length, Packet_Server instance)
    {
        instance.Id = Packet_ServerIdEnum.ServerIdentification;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Identification == null)
                    instance.Identification = Packet_ServerIdentificationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerIdentificationSerializer.DeserializeLengthDelimited(stream, instance.Identification);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.LevelInitialize == null)
                    instance.LevelInitialize = Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelInitializeSerializer.DeserializeLengthDelimited(stream, instance.LevelInitialize);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.LevelDataChunk == null)
                    instance.LevelDataChunk = Packet_ServerLevelProgressSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelProgressSerializer.DeserializeLengthDelimited(stream, instance.LevelDataChunk);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.LevelFinalize == null)
                    instance.LevelFinalize = Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLevelFinalizeSerializer.DeserializeLengthDelimited(stream, instance.LevelFinalize);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.SetBlock == null)
                    instance.SetBlock = Packet_ServerSetBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSetBlockSerializer.DeserializeLengthDelimited(stream, instance.SetBlock);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.Message == null)
                    instance.Message = Packet_ServerMessageSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMessageSerializer.DeserializeLengthDelimited(stream, instance.Message);
                continue;
                // Field 10 LengthDelimited
            case 82:
                if (instance.DisconnectPlayer == null)
                    instance.DisconnectPlayer = Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDisconnectPlayerSerializer.DeserializeLengthDelimited(stream, instance.DisconnectPlayer);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Chunk_ == null)
                    instance.Chunk_ = Packet_ServerChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkSerializer.DeserializeLengthDelimited(stream, instance.Chunk_);
                continue;
                // Field 12 LengthDelimited
            case 98:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_ServerInventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerInventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                // Field 13 LengthDelimited
            case 106:
                if (instance.Season == null)
                    instance.Season = Packet_ServerSeasonSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSeasonSerializer.DeserializeLengthDelimited(stream, instance.Season);
                continue;
                // Field 14 LengthDelimited
            case 114:
                if (instance.BlobInitialize == null)
                    instance.BlobInitialize = Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobInitializeSerializer.DeserializeLengthDelimited(stream, instance.BlobInitialize);
                continue;
                // Field 15 LengthDelimited
            case 122:
                if (instance.BlobPart == null)
                    instance.BlobPart = Packet_ServerBlobPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobPartSerializer.DeserializeLengthDelimited(stream, instance.BlobPart);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            case 90:
                if(key.GetWireType() != Wire.Varint)
                    break;
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
            case 51:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillArea == null)
                    instance.FillArea = Packet_ServerFillAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaSerializer.DeserializeLengthDelimited(stream, instance.FillArea);
                continue;
            case 52:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.FillAreaLimit == null)
                    instance.FillAreaLimit = Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFillAreaLimitSerializer.DeserializeLengthDelimited(stream, instance.FillAreaLimit);
                continue;
            case 53:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Freemove == null)
                    instance.Freemove = Packet_ServerFreemoveSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFreemoveSerializer.DeserializeLengthDelimited(stream, instance.Freemove);
                continue;
            case 16:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlobFinalize == null)
                    instance.BlobFinalize = Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlobFinalizeSerializer.DeserializeLengthDelimited(stream, instance.BlobFinalize);
                continue;
            case 17:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.HeightmapChunk == null)
                    instance.HeightmapChunk = Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerHeightmapChunkSerializer.DeserializeLengthDelimited(stream, instance.HeightmapChunk);
                continue;
            case 18:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ping == null)
                    instance.Ping = Packet_ServerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPingSerializer.DeserializeLengthDelimited(stream, instance.Ping);
                continue;
            case 181:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerPing == null)
                    instance.PlayerPing = Packet_ServerPlayerPingSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerPingSerializer.DeserializeLengthDelimited(stream, instance.PlayerPing);
                continue;
            case 19:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Sound == null)
                    instance.Sound = Packet_ServerSoundSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSoundSerializer.DeserializeLengthDelimited(stream, instance.Sound);
                continue;
            case 20:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
            case 21:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Monster == null)
                    instance.Monster = Packet_ServerMonstersSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerMonstersSerializer.DeserializeLengthDelimited(stream, instance.Monster);
                continue;
            case 22:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.PlayerSpawnPosition == null)
                    instance.PlayerSpawnPosition = Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerSpawnPositionSerializer.DeserializeLengthDelimited(stream, instance.PlayerSpawnPosition);
                continue;
            case 23:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockTypes == null)
                    instance.BlockTypes = Packet_ServerBlockTypesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypesSerializer.DeserializeLengthDelimited(stream, instance.BlockTypes);
                continue;
            case 24:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.SunLevels == null)
                    instance.SunLevels = Packet_ServerSunLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerSunLevelsSerializer.DeserializeLengthDelimited(stream, instance.SunLevels);
                continue;
            case 25:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.LightLevels == null)
                    instance.LightLevels = Packet_ServerLightLevelsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerLightLevelsSerializer.DeserializeLengthDelimited(stream, instance.LightLevels);
                continue;
            case 26:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.CraftingRecipes == null)
                    instance.CraftingRecipes = Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerCraftingRecipesSerializer.DeserializeLengthDelimited(stream, instance.CraftingRecipes);
                continue;
            case 27:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Dialog == null)
                    instance.Dialog = Packet_ServerDialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerDialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
            case 28:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Follow == null)
                    instance.Follow = Packet_ServerFollowSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerFollowSerializer.DeserializeLengthDelimited(stream, instance.Follow);
                continue;
            case 29:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Bullet == null)
                    instance.Bullet = Packet_ServerBulletSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBulletSerializer.DeserializeLengthDelimited(stream, instance.Bullet);
                continue;
            case 30:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Ammo == null)
                    instance.Ammo = Packet_ServerAmmoSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerAmmoSerializer.DeserializeLengthDelimited(stream, instance.Ammo);
                continue;
            case 31:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.BlockType == null)
                    instance.BlockType = Packet_ServerBlockTypeSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerBlockTypeSerializer.DeserializeLengthDelimited(stream, instance.BlockType);
                continue;
            case 32:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.ChunkPart == null)
                    instance.ChunkPart = Packet_ServerChunkPartSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerChunkPartSerializer.DeserializeLengthDelimited(stream, instance.ChunkPart);
                continue;
            case 33:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Explosion == null)
                    instance.Explosion = Packet_ServerExplosionSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerExplosionSerializer.DeserializeLengthDelimited(stream, instance.Explosion);
                continue;
            case 34:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Projectile == null)
                    instance.Projectile = Packet_ServerProjectileSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerProjectileSerializer.DeserializeLengthDelimited(stream, instance.Projectile);
                continue;
            case 35:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Translation == null)
                    instance.Translation = Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerTranslatedStringSerializer.DeserializeLengthDelimited(stream, instance.Translation);
                continue;
            case 36:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.QueryAnswer == null)
                    instance.QueryAnswer = Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerQueryAnswerSerializer.DeserializeLengthDelimited(stream, instance.QueryAnswer);
                continue;
            case 37:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.Redirect == null)
                    instance.Redirect = Packet_ServerRedirectSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerRedirectSerializer.DeserializeLengthDelimited(stream, instance.Redirect);
                continue;
            case 39:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntitySpawn == null)
                    instance.EntitySpawn = Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySpawnSerializer.DeserializeLengthDelimited(stream, instance.EntitySpawn);
                continue;
            case 40:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityPosition == null)
                    instance.EntityPosition = Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.EntityPosition);
                continue;
            case 41:
                if(key.GetWireType() != Wire.LengthDelimited)
                    break;
                if (instance.EntityDespawn == null)
                    instance.EntityDespawn = Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDespawnSerializer.DeserializeLengthDelimited(stream, instance.EntityDespawn);
                continue;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Server instance)
    {
        if (instance.Id != Packet_ServerIdEnum.ServerIdentification)
        {
            // Key for field: 90, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(208));
            stream.WriteByte(ProtoPlatform.IntToByte(5));
            ProtocolParser.WriteUInt64(stream,instance.Id);
        }
        if (instance.Identification != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            CitoMemoryStream ms1 = new CitoMemoryStream();
            Packet_ServerIdentificationSerializer.Serialize(ms1, instance.Identification);
            // Length delimited byte array
            int ms1Length = ms1.Length();
            ProtocolParser.WriteUInt32_(stream, ms1Length);
            stream.Write(ms1.GetBuffer(), 0, ms1Length);
            
        }
        if (instance.LevelInitialize != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ServerLevelInitializeSerializer.Serialize(ms2, instance.LevelInitialize);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.LevelDataChunk != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ServerLevelProgressSerializer.Serialize(ms3, instance.LevelDataChunk);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.LevelFinalize != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ServerLevelFinalizeSerializer.Serialize(ms4, instance.LevelFinalize);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.SetBlock != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ServerSetBlockSerializer.Serialize(ms5, instance.SetBlock);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.FillArea != null)
        {
            // Key for field: 51, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(3));
            CitoMemoryStream ms51 = new CitoMemoryStream();
            Packet_ServerFillAreaSerializer.Serialize(ms51, instance.FillArea);
            // Length delimited byte array
            int ms51Length = ms51.Length();
            ProtocolParser.WriteUInt32_(stream, ms51Length);
            stream.Write(ms51.GetBuffer(), 0, ms51Length);
            
        }
        if (instance.FillAreaLimit != null)
        {
            // Key for field: 52, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(3));
            CitoMemoryStream ms52 = new CitoMemoryStream();
            Packet_ServerFillAreaLimitSerializer.Serialize(ms52, instance.FillAreaLimit);
            // Length delimited byte array
            int ms52Length = ms52.Length();
            ProtocolParser.WriteUInt32_(stream, ms52Length);
            stream.Write(ms52.GetBuffer(), 0, ms52Length);
            
        }
        if (instance.Freemove != null)
        {
            // Key for field: 53, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(3));
            CitoMemoryStream ms53 = new CitoMemoryStream();
            Packet_ServerFreemoveSerializer.Serialize(ms53, instance.Freemove);
            // Length delimited byte array
            int ms53Length = ms53.Length();
            ProtocolParser.WriteUInt32_(stream, ms53Length);
            stream.Write(ms53.GetBuffer(), 0, ms53Length);
            
        }
        if (instance.Message != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            CitoMemoryStream ms9 = new CitoMemoryStream();
            Packet_ServerMessageSerializer.Serialize(ms9, instance.Message);
            // Length delimited byte array
            int ms9Length = ms9.Length();
            ProtocolParser.WriteUInt32_(stream, ms9Length);
            stream.Write(ms9.GetBuffer(), 0, ms9Length);
            
        }
        if (instance.DisconnectPlayer != null)
        {
            // Key for field: 10, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(82));
            CitoMemoryStream ms10 = new CitoMemoryStream();
            Packet_ServerDisconnectPlayerSerializer.Serialize(ms10, instance.DisconnectPlayer);
            // Length delimited byte array
            int ms10Length = ms10.Length();
            ProtocolParser.WriteUInt32_(stream, ms10Length);
            stream.Write(ms10.GetBuffer(), 0, ms10Length);
            
        }
        if (instance.Chunk_ != null)
        {
            // Key for field: 11, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(90));
            CitoMemoryStream ms11 = new CitoMemoryStream();
            Packet_ServerChunkSerializer.Serialize(ms11, instance.Chunk_);
            // Length delimited byte array
            int ms11Length = ms11.Length();
            ProtocolParser.WriteUInt32_(stream, ms11Length);
            stream.Write(ms11.GetBuffer(), 0, ms11Length);
            
        }
        if (instance.Inventory != null)
        {
            // Key for field: 12, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(98));
            CitoMemoryStream ms12 = new CitoMemoryStream();
            Packet_ServerInventorySerializer.Serialize(ms12, instance.Inventory);
            // Length delimited byte array
            int ms12Length = ms12.Length();
            ProtocolParser.WriteUInt32_(stream, ms12Length);
            stream.Write(ms12.GetBuffer(), 0, ms12Length);
            
        }
        if (instance.Season != null)
        {
            // Key for field: 13, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(106));
            CitoMemoryStream ms13 = new CitoMemoryStream();
            Packet_ServerSeasonSerializer.Serialize(ms13, instance.Season);
            // Length delimited byte array
            int ms13Length = ms13.Length();
            ProtocolParser.WriteUInt32_(stream, ms13Length);
            stream.Write(ms13.GetBuffer(), 0, ms13Length);
            
        }
        if (instance.BlobInitialize != null)
        {
            // Key for field: 14, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(114));
            CitoMemoryStream ms14 = new CitoMemoryStream();
            Packet_ServerBlobInitializeSerializer.Serialize(ms14, instance.BlobInitialize);
            // Length delimited byte array
            int ms14Length = ms14.Length();
            ProtocolParser.WriteUInt32_(stream, ms14Length);
            stream.Write(ms14.GetBuffer(), 0, ms14Length);
            
        }
        if (instance.BlobPart != null)
        {
            // Key for field: 15, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(122));
            CitoMemoryStream ms15 = new CitoMemoryStream();
            Packet_ServerBlobPartSerializer.Serialize(ms15, instance.BlobPart);
            // Length delimited byte array
            int ms15Length = ms15.Length();
            ProtocolParser.WriteUInt32_(stream, ms15Length);
            stream.Write(ms15.GetBuffer(), 0, ms15Length);
            
        }
        if (instance.BlobFinalize != null)
        {
            // Key for field: 16, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(130));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms16 = new CitoMemoryStream();
            Packet_ServerBlobFinalizeSerializer.Serialize(ms16, instance.BlobFinalize);
            // Length delimited byte array
            int ms16Length = ms16.Length();
            ProtocolParser.WriteUInt32_(stream, ms16Length);
            stream.Write(ms16.GetBuffer(), 0, ms16Length);
            
        }
        if (instance.HeightmapChunk != null)
        {
            // Key for field: 17, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms17 = new CitoMemoryStream();
            Packet_ServerHeightmapChunkSerializer.Serialize(ms17, instance.HeightmapChunk);
            // Length delimited byte array
            int ms17Length = ms17.Length();
            ProtocolParser.WriteUInt32_(stream, ms17Length);
            stream.Write(ms17.GetBuffer(), 0, ms17Length);
            
        }
        if (instance.Ping != null)
        {
            // Key for field: 18, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(146));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms18 = new CitoMemoryStream();
            Packet_ServerPingSerializer.Serialize(ms18, instance.Ping);
            // Length delimited byte array
            int ms18Length = ms18.Length();
            ProtocolParser.WriteUInt32_(stream, ms18Length);
            stream.Write(ms18.GetBuffer(), 0, ms18Length);
            
        }
        if (instance.PlayerPing != null)
        {
            // Key for field: 181, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(11));
            CitoMemoryStream ms181 = new CitoMemoryStream();
            Packet_ServerPlayerPingSerializer.Serialize(ms181, instance.PlayerPing);
            // Length delimited byte array
            int ms181Length = ms181.Length();
            ProtocolParser.WriteUInt32_(stream, ms181Length);
            stream.Write(ms181.GetBuffer(), 0, ms181Length);
            
        }
        if (instance.Sound != null)
        {
            // Key for field: 19, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms19 = new CitoMemoryStream();
            Packet_ServerSoundSerializer.Serialize(ms19, instance.Sound);
            // Length delimited byte array
            int ms19Length = ms19.Length();
            ProtocolParser.WriteUInt32_(stream, ms19Length);
            stream.Write(ms19.GetBuffer(), 0, ms19Length);
            
        }
        if (instance.PlayerStats != null)
        {
            // Key for field: 20, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms20 = new CitoMemoryStream();
            Packet_ServerPlayerStatsSerializer.Serialize(ms20, instance.PlayerStats);
            // Length delimited byte array
            int ms20Length = ms20.Length();
            ProtocolParser.WriteUInt32_(stream, ms20Length);
            stream.Write(ms20.GetBuffer(), 0, ms20Length);
            
        }
        if (instance.Monster != null)
        {
            // Key for field: 21, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms21 = new CitoMemoryStream();
            Packet_ServerMonstersSerializer.Serialize(ms21, instance.Monster);
            // Length delimited byte array
            int ms21Length = ms21.Length();
            ProtocolParser.WriteUInt32_(stream, ms21Length);
            stream.Write(ms21.GetBuffer(), 0, ms21Length);
            
        }
        if (instance.PlayerSpawnPosition != null)
        {
            // Key for field: 22, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(178));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms22 = new CitoMemoryStream();
            Packet_ServerPlayerSpawnPositionSerializer.Serialize(ms22, instance.PlayerSpawnPosition);
            // Length delimited byte array
            int ms22Length = ms22.Length();
            ProtocolParser.WriteUInt32_(stream, ms22Length);
            stream.Write(ms22.GetBuffer(), 0, ms22Length);
            
        }
        if (instance.BlockTypes != null)
        {
            // Key for field: 23, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(186));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms23 = new CitoMemoryStream();
            Packet_ServerBlockTypesSerializer.Serialize(ms23, instance.BlockTypes);
            // Length delimited byte array
            int ms23Length = ms23.Length();
            ProtocolParser.WriteUInt32_(stream, ms23Length);
            stream.Write(ms23.GetBuffer(), 0, ms23Length);
            
        }
        if (instance.SunLevels != null)
        {
            // Key for field: 24, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(194));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms24 = new CitoMemoryStream();
            Packet_ServerSunLevelsSerializer.Serialize(ms24, instance.SunLevels);
            // Length delimited byte array
            int ms24Length = ms24.Length();
            ProtocolParser.WriteUInt32_(stream, ms24Length);
            stream.Write(ms24.GetBuffer(), 0, ms24Length);
            
        }
        if (instance.LightLevels != null)
        {
            // Key for field: 25, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(202));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms25 = new CitoMemoryStream();
            Packet_ServerLightLevelsSerializer.Serialize(ms25, instance.LightLevels);
            // Length delimited byte array
            int ms25Length = ms25.Length();
            ProtocolParser.WriteUInt32_(stream, ms25Length);
            stream.Write(ms25.GetBuffer(), 0, ms25Length);
            
        }
        if (instance.CraftingRecipes != null)
        {
            // Key for field: 26, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(210));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms26 = new CitoMemoryStream();
            Packet_ServerCraftingRecipesSerializer.Serialize(ms26, instance.CraftingRecipes);
            // Length delimited byte array
            int ms26Length = ms26.Length();
            ProtocolParser.WriteUInt32_(stream, ms26Length);
            stream.Write(ms26.GetBuffer(), 0, ms26Length);
            
        }
        if (instance.Dialog != null)
        {
            // Key for field: 27, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(218));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms27 = new CitoMemoryStream();
            Packet_ServerDialogSerializer.Serialize(ms27, instance.Dialog);
            // Length delimited byte array
            int ms27Length = ms27.Length();
            ProtocolParser.WriteUInt32_(stream, ms27Length);
            stream.Write(ms27.GetBuffer(), 0, ms27Length);
            
        }
        if (instance.Follow != null)
        {
            // Key for field: 28, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(226));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms28 = new CitoMemoryStream();
            Packet_ServerFollowSerializer.Serialize(ms28, instance.Follow);
            // Length delimited byte array
            int ms28Length = ms28.Length();
            ProtocolParser.WriteUInt32_(stream, ms28Length);
            stream.Write(ms28.GetBuffer(), 0, ms28Length);
            
        }
        if (instance.Bullet != null)
        {
            // Key for field: 29, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(234));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms29 = new CitoMemoryStream();
            Packet_ServerBulletSerializer.Serialize(ms29, instance.Bullet);
            // Length delimited byte array
            int ms29Length = ms29.Length();
            ProtocolParser.WriteUInt32_(stream, ms29Length);
            stream.Write(ms29.GetBuffer(), 0, ms29Length);
            
        }
        if (instance.Ammo != null)
        {
            // Key for field: 30, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(242));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms30 = new CitoMemoryStream();
            Packet_ServerAmmoSerializer.Serialize(ms30, instance.Ammo);
            // Length delimited byte array
            int ms30Length = ms30.Length();
            ProtocolParser.WriteUInt32_(stream, ms30Length);
            stream.Write(ms30.GetBuffer(), 0, ms30Length);
            
        }
        if (instance.BlockType != null)
        {
            // Key for field: 31, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(250));
            stream.WriteByte(ProtoPlatform.IntToByte(1));
            CitoMemoryStream ms31 = new CitoMemoryStream();
            Packet_ServerBlockTypeSerializer.Serialize(ms31, instance.BlockType);
            // Length delimited byte array
            int ms31Length = ms31.Length();
            ProtocolParser.WriteUInt32_(stream, ms31Length);
            stream.Write(ms31.GetBuffer(), 0, ms31Length);
            
        }
        if (instance.ChunkPart != null)
        {
            // Key for field: 32, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(130));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms32 = new CitoMemoryStream();
            Packet_ServerChunkPartSerializer.Serialize(ms32, instance.ChunkPart);
            // Length delimited byte array
            int ms32Length = ms32.Length();
            ProtocolParser.WriteUInt32_(stream, ms32Length);
            stream.Write(ms32.GetBuffer(), 0, ms32Length);
            
        }
        if (instance.Explosion != null)
        {
            // Key for field: 33, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(138));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms33 = new CitoMemoryStream();
            Packet_ServerExplosionSerializer.Serialize(ms33, instance.Explosion);
            // Length delimited byte array
            int ms33Length = ms33.Length();
            ProtocolParser.WriteUInt32_(stream, ms33Length);
            stream.Write(ms33.GetBuffer(), 0, ms33Length);
            
        }
        if (instance.Projectile != null)
        {
            // Key for field: 34, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(146));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms34 = new CitoMemoryStream();
            Packet_ServerProjectileSerializer.Serialize(ms34, instance.Projectile);
            // Length delimited byte array
            int ms34Length = ms34.Length();
            ProtocolParser.WriteUInt32_(stream, ms34Length);
            stream.Write(ms34.GetBuffer(), 0, ms34Length);
            
        }
        if (instance.Translation != null)
        {
            // Key for field: 35, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(154));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms35 = new CitoMemoryStream();
            Packet_ServerTranslatedStringSerializer.Serialize(ms35, instance.Translation);
            // Length delimited byte array
            int ms35Length = ms35.Length();
            ProtocolParser.WriteUInt32_(stream, ms35Length);
            stream.Write(ms35.GetBuffer(), 0, ms35Length);
            
        }
        if (instance.QueryAnswer != null)
        {
            // Key for field: 36, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(162));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms36 = new CitoMemoryStream();
            Packet_ServerQueryAnswerSerializer.Serialize(ms36, instance.QueryAnswer);
            // Length delimited byte array
            int ms36Length = ms36.Length();
            ProtocolParser.WriteUInt32_(stream, ms36Length);
            stream.Write(ms36.GetBuffer(), 0, ms36Length);
            
        }
        if (instance.Redirect != null)
        {
            // Key for field: 37, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(170));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms37 = new CitoMemoryStream();
            Packet_ServerRedirectSerializer.Serialize(ms37, instance.Redirect);
            // Length delimited byte array
            int ms37Length = ms37.Length();
            ProtocolParser.WriteUInt32_(stream, ms37Length);
            stream.Write(ms37.GetBuffer(), 0, ms37Length);
            
        }
        if (instance.EntitySpawn != null)
        {
            // Key for field: 39, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(186));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms39 = new CitoMemoryStream();
            Packet_ServerEntitySpawnSerializer.Serialize(ms39, instance.EntitySpawn);
            // Length delimited byte array
            int ms39Length = ms39.Length();
            ProtocolParser.WriteUInt32_(stream, ms39Length);
            stream.Write(ms39.GetBuffer(), 0, ms39Length);
            
        }
        if (instance.EntityPosition != null)
        {
            // Key for field: 40, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(194));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms40 = new CitoMemoryStream();
            Packet_ServerEntityPositionAndOrientationSerializer.Serialize(ms40, instance.EntityPosition);
            // Length delimited byte array
            int ms40Length = ms40.Length();
            ProtocolParser.WriteUInt32_(stream, ms40Length);
            stream.Write(ms40.GetBuffer(), 0, ms40Length);
            
        }
        if (instance.EntityDespawn != null)
        {
            // Key for field: 41, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(202));
            stream.WriteByte(ProtoPlatform.IntToByte(2));
            CitoMemoryStream ms41 = new CitoMemoryStream();
            Packet_ServerEntityDespawnSerializer.Serialize(ms41, instance.EntityDespawn);
            // Length delimited byte array
            int ms41Length = ms41.Length();
            ProtocolParser.WriteUInt32_(stream, ms41Length);
            stream.Write(ms41.GetBuffer(), 0, ms41Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Server instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Server instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntitySpawnSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntitySpawn DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntitySpawn instance = new Packet_ServerEntitySpawn();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntitySpawn DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntitySpawn instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntitySpawn Deserialize(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Entity_ == null)
                    instance.Entity_ = Packet_ServerEntitySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySerializer.DeserializeLengthDelimited(stream, instance.Entity_);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntitySpawn DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Entity_ == null)
                    instance.Entity_ = Packet_ServerEntitySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySerializer.DeserializeLengthDelimited(stream, instance.Entity_);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntitySpawn DeserializeLength(CitoStream stream, int length, Packet_ServerEntitySpawn instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Entity_ == null)
                    instance.Entity_ = Packet_ServerEntitySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntitySerializer.DeserializeLengthDelimited(stream, instance.Entity_);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        if (instance.Entity_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ServerEntitySerializer.Serialize(ms2, instance.Entity_);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntitySpawn instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntitySpawn instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityPositionAndOrientationSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityPositionAndOrientation instance = new Packet_ServerEntityPositionAndOrientation();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityPositionAndOrientation instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPositionAndOrientation Deserialize(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPositionAndOrientation DeserializeLength(CitoStream stream, int length, Packet_ServerEntityPositionAndOrientation instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        if (instance.PositionAndOrientation != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms2, instance.PositionAndOrientation);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityPositionAndOrientation instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityPositionAndOrientation instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDespawnSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDespawn DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDespawn instance = new Packet_ServerEntityDespawn();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDespawn DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDespawn instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDespawn Deserialize(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDespawn DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDespawn DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDespawn instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDespawn instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDespawn instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntitySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntity DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntity instance = new Packet_ServerEntity();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntity DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntity instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntity Deserialize(CitoStream stream, Packet_ServerEntity instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Position == null)
                    instance.Position = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.Position);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.DrawModel == null)
                    instance.DrawModel = Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimited(stream, instance.DrawModel);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.DrawName_ == null)
                    instance.DrawName_ = Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimited(stream, instance.DrawName_);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.DrawText == null)
                    instance.DrawText = Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimited(stream, instance.DrawText);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.DrawBlock == null)
                    instance.DrawBlock = Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimited(stream, instance.DrawBlock);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Push == null)
                    instance.Push = Packet_ServerEntityPushSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPushSerializer.DeserializeLengthDelimited(stream, instance.Push);
                continue;
                // Field 7 Varint
            case 56:
                instance.Usable = ProtocolParser.ReadBool(stream);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.DrawArea == null)
                    instance.DrawArea = Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimited(stream, instance.DrawArea);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntity DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntity instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Position == null)
                    instance.Position = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.Position);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.DrawModel == null)
                    instance.DrawModel = Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimited(stream, instance.DrawModel);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.DrawName_ == null)
                    instance.DrawName_ = Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimited(stream, instance.DrawName_);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.DrawText == null)
                    instance.DrawText = Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimited(stream, instance.DrawText);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.DrawBlock == null)
                    instance.DrawBlock = Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimited(stream, instance.DrawBlock);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Push == null)
                    instance.Push = Packet_ServerEntityPushSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPushSerializer.DeserializeLengthDelimited(stream, instance.Push);
                continue;
                // Field 7 Varint
            case 56:
                instance.Usable = ProtocolParser.ReadBool(stream);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.DrawArea == null)
                    instance.DrawArea = Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimited(stream, instance.DrawArea);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntity DeserializeLength(CitoStream stream, int length, Packet_ServerEntity instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                if (instance.Position == null)
                    instance.Position = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.Position);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.DrawModel == null)
                    instance.DrawModel = Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityAnimatedModelSerializer.DeserializeLengthDelimited(stream, instance.DrawModel);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.DrawName_ == null)
                    instance.DrawName_ = Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawNameSerializer.DeserializeLengthDelimited(stream, instance.DrawName_);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.DrawText == null)
                    instance.DrawText = Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawTextSerializer.DeserializeLengthDelimited(stream, instance.DrawText);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.DrawBlock == null)
                    instance.DrawBlock = Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawBlockSerializer.DeserializeLengthDelimited(stream, instance.DrawBlock);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Push == null)
                    instance.Push = Packet_ServerEntityPushSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityPushSerializer.DeserializeLengthDelimited(stream, instance.Push);
                continue;
                // Field 7 Varint
            case 56:
                instance.Usable = ProtocolParser.ReadBool(stream);
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.PlayerStats == null)
                    instance.PlayerStats = Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerPlayerStatsSerializer.DeserializeLengthDelimited(stream, instance.PlayerStats);
                continue;
                // Field 9 LengthDelimited
            case 74:
                if (instance.DrawArea == null)
                    instance.DrawArea = Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ServerEntityDrawAreaSerializer.DeserializeLengthDelimited(stream, instance.DrawArea);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntity instance)
    {
        if (instance.Position != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            CitoMemoryStream ms1 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms1, instance.Position);
            // Length delimited byte array
            int ms1Length = ms1.Length();
            ProtocolParser.WriteUInt32_(stream, ms1Length);
            stream.Write(ms1.GetBuffer(), 0, ms1Length);
            
        }
        if (instance.DrawModel != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ServerEntityAnimatedModelSerializer.Serialize(ms2, instance.DrawModel);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        if (instance.DrawName_ != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ServerEntityDrawNameSerializer.Serialize(ms3, instance.DrawName_);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.DrawText != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ServerEntityDrawTextSerializer.Serialize(ms4, instance.DrawText);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.DrawBlock != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ServerEntityDrawBlockSerializer.Serialize(ms5, instance.DrawBlock);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.Push != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            CitoMemoryStream ms6 = new CitoMemoryStream();
            Packet_ServerEntityPushSerializer.Serialize(ms6, instance.Push);
            // Length delimited byte array
            int ms6Length = ms6.Length();
            ProtocolParser.WriteUInt32_(stream, ms6Length);
            stream.Write(ms6.GetBuffer(), 0, ms6Length);
            
        }
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteBool(stream, instance.Usable);
        if (instance.PlayerStats != null)
        {
            // Key for field: 8, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(66));
            CitoMemoryStream ms8 = new CitoMemoryStream();
            Packet_ServerPlayerStatsSerializer.Serialize(ms8, instance.PlayerStats);
            // Length delimited byte array
            int ms8Length = ms8.Length();
            ProtocolParser.WriteUInt32_(stream, ms8Length);
            stream.Write(ms8.GetBuffer(), 0, ms8Length);
            
        }
        if (instance.DrawArea != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            CitoMemoryStream ms9 = new CitoMemoryStream();
            Packet_ServerEntityDrawAreaSerializer.Serialize(ms9, instance.DrawArea);
            // Length delimited byte array
            int ms9Length = ms9.Length();
            ProtocolParser.WriteUInt32_(stream, ms9Length);
            stream.Write(ms9.GetBuffer(), 0, ms9Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntity instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntity instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawAreaSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawArea DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawArea instance = new Packet_ServerEntityDrawArea();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawArea DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawArea instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawArea Deserialize(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Sizex = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Sizey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Sizez = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.VisibleToClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawArea DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Sizex = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Sizey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Sizez = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.VisibleToClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawArea DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawArea instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Sizex = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Sizey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Sizez = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.VisibleToClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Sizex);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Sizey);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Sizez);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.VisibleToClientId);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawArea instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawArea instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityAnimatedModelSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityAnimatedModel instance = new Packet_ServerEntityAnimatedModel();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityAnimatedModel instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityAnimatedModel Deserialize(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Model_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Texture_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.EyeHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ModelHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.DownloadSkin = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Model_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Texture_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.EyeHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ModelHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.DownloadSkin = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityAnimatedModel DeserializeLength(CitoStream stream, int length, Packet_ServerEntityAnimatedModel instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Model_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Texture_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.EyeHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.ModelHeight = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.DownloadSkin = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        if (instance.Model_ != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Model_));
        }
        if (instance.Texture_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Texture_));
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.EyeHeight);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.ModelHeight);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.DownloadSkin);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityAnimatedModel instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityAnimatedModel instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawNameSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawName DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawName instance = new Packet_ServerEntityDrawName();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawName DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawName instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawName Deserialize(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.OnlyWhenSelected = ProtocolParser.ReadBool(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ClientAutoComplete = ProtocolParser.ReadBool(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.Color = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawName DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.OnlyWhenSelected = ProtocolParser.ReadBool(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ClientAutoComplete = ProtocolParser.ReadBool(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.Color = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawName DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawName instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Name = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.OnlyWhenSelected = ProtocolParser.ReadBool(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.ClientAutoComplete = ProtocolParser.ReadBool(stream);
                continue;
                // Field 4 LengthDelimited
            case 34:
                instance.Color = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        if (instance.Name != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Name));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteBool(stream, instance.OnlyWhenSelected);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteBool(stream, instance.ClientAutoComplete);
        if (instance.Color != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Color));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawName instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawName instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawTextSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawText DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawText instance = new Packet_ServerEntityDrawText();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawText DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawText instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawText Deserialize(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Dx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Dy = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Dz = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Rotx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Roty = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Rotz = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawText DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Dx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Dy = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Dz = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Rotx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Roty = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Rotz = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawText DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawText instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Dx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Dy = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Dz = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Rotx = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Roty = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 Varint
            case 56:
                instance.Rotz = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        if (instance.Text != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Text));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Dx);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Dy);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Dz);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Rotx);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Roty);
        // Key for field: 7, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(56));
        ProtocolParser.WriteUInt64(stream,instance.Rotz);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawText instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawText instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityDrawBlockSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityDrawBlock DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityDrawBlock instance = new Packet_ServerEntityDrawBlock();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityDrawBlock DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityDrawBlock instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawBlock Deserialize(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawBlock DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityDrawBlock DeserializeLength(CitoStream stream, int length, Packet_ServerEntityDrawBlock instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.BlockType = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.BlockType);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityDrawBlock instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityDrawBlock instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerEntityPushSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerEntityPush DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerEntityPush instance = new Packet_ServerEntityPush();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerEntityPush DeserializeBuffer(byte[] buffer, int length, Packet_ServerEntityPush instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPush Deserialize(CitoStream stream, Packet_ServerEntityPush instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPush DeserializeLengthDelimited(CitoStream stream, Packet_ServerEntityPush instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerEntityPush DeserializeLength(CitoStream stream, int length, Packet_ServerEntityPush instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.RangeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerEntityPush instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.RangeFloat);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerEntityPush instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerEntityPush instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_IntIntSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_IntInt DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_IntInt instance = new Packet_IntInt();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_IntInt DeserializeBuffer(byte[] buffer, int length, Packet_IntInt instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_IntInt Deserialize(CitoStream stream, Packet_IntInt instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Value_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntInt DeserializeLengthDelimited(CitoStream stream, Packet_IntInt instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Value_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_IntInt DeserializeLength(CitoStream stream, int length, Packet_IntInt instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Key_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Value_ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_IntInt instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Key_);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Value_);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_IntInt instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_IntInt instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerAmmoSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerAmmo DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerAmmo instance = new Packet_ServerAmmo();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerAmmo DeserializeBuffer(byte[] buffer, int length, Packet_ServerAmmo instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerAmmo Deserialize(CitoStream stream, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo == null)
        {
            instance.TotalAmmo = new Packet_IntInt[1];
            instance.TotalAmmoCount = 0;
            instance.TotalAmmoLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.TotalAmmoAdd(Packet_IntIntSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerAmmo DeserializeLengthDelimited(CitoStream stream, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo == null)
        {
            instance.TotalAmmo = new Packet_IntInt[1];
            instance.TotalAmmoCount = 0;
            instance.TotalAmmoLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.TotalAmmoAdd(Packet_IntIntSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerAmmo DeserializeLength(CitoStream stream, int length, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo == null)
        {
            instance.TotalAmmo = new Packet_IntInt[1];
            instance.TotalAmmoCount = 0;
            instance.TotalAmmoLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.TotalAmmoAdd(Packet_IntIntSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerAmmo instance)
    {
        if (instance.TotalAmmo != null)
        {
            for(int k=0; k < instance.TotalAmmoCount; k++)
            {
                Packet_IntInt i1 = instance.TotalAmmo[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_IntIntSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerAmmo instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerAmmo instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerChunkPartSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerChunkPart DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerChunkPart instance = new Packet_ServerChunkPart();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerChunkPart DeserializeBuffer(byte[] buffer, int length, Packet_ServerChunkPart instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunkPart Deserialize(CitoStream stream, Packet_ServerChunkPart instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.CompressedChunkPart = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunkPart DeserializeLengthDelimited(CitoStream stream, Packet_ServerChunkPart instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.CompressedChunkPart = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunkPart DeserializeLength(CitoStream stream, int length, Packet_ServerChunkPart instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.CompressedChunkPart = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerChunkPart instance)
    {
        if (instance.CompressedChunkPart != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, instance.CompressedChunkPart);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerChunkPart instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerChunkPart instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerChunkSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerChunk DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerChunk instance = new Packet_ServerChunk();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerChunk DeserializeBuffer(byte[] buffer, int length, Packet_ServerChunk instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunk Deserialize(CitoStream stream, Packet_ServerChunk instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.SizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunk DeserializeLengthDelimited(CitoStream stream, Packet_ServerChunk instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.SizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerChunk DeserializeLength(CitoStream stream, int length, Packet_ServerChunk instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Z = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.SizeZ = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerChunk instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Z);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.SizeX);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.SizeY);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.SizeZ);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerChunk instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerChunk instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerHeightmapChunkSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerHeightmapChunk DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerHeightmapChunk instance = new Packet_ServerHeightmapChunk();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerHeightmapChunk DeserializeBuffer(byte[] buffer, int length, Packet_ServerHeightmapChunk instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerHeightmapChunk Deserialize(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.CompressedHeightmap = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerHeightmapChunk DeserializeLengthDelimited(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.CompressedHeightmap = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerHeightmapChunk DeserializeLength(CitoStream stream, int length, Packet_ServerHeightmapChunk instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.SizeX = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.SizeY = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 LengthDelimited
            case 42:
                instance.CompressedHeightmap = ProtocolParser.ReadBytes(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.SizeX);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.SizeY);
        if (instance.CompressedHeightmap != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            ProtocolParser.WriteBytes(stream, instance.CompressedHeightmap);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerHeightmapChunk instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerHeightmapChunk instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerInventorySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerInventory DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerInventory instance = new Packet_ServerInventory();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerInventory DeserializeBuffer(byte[] buffer, int length, Packet_ServerInventory instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerInventory Deserialize(CitoStream stream, Packet_ServerInventory instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 4 LengthDelimited
            case 34:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_InventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerInventory DeserializeLengthDelimited(CitoStream stream, Packet_ServerInventory instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 4 LengthDelimited
            case 34:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_InventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerInventory DeserializeLength(CitoStream stream, int length, Packet_ServerInventory instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 4 LengthDelimited
            case 34:
                if (instance.Inventory == null)
                    instance.Inventory = Packet_InventorySerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_InventorySerializer.DeserializeLengthDelimited(stream, instance.Inventory);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerInventory instance)
    {
        if (instance.Inventory != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_InventorySerializer.Serialize(ms4, instance.Inventory);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerInventory instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerInventory instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPlayerStatsSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPlayerStats DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPlayerStats instance = new Packet_ServerPlayerStats();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPlayerStats DeserializeBuffer(byte[] buffer, int length, Packet_ServerPlayerStats instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerStats Deserialize(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MaxHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerStats DeserializeLengthDelimited(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MaxHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerStats DeserializeLength(CitoStream stream, int length, Packet_ServerPlayerStats instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.CurrentHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MaxHealth = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.CurrentOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.MaxOxygen = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.CurrentHealth);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.MaxHealth);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.CurrentOxygen);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.MaxOxygen);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPlayerStats instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPlayerStats instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerMonstersSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerMonsters DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerMonsters instance = new Packet_ServerMonsters();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerMonsters DeserializeBuffer(byte[] buffer, int length, Packet_ServerMonsters instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonsters Deserialize(CitoStream stream, Packet_ServerMonsters instance)
    {
        if (instance.Monsters == null)
        {
            instance.Monsters = new Packet_ServerMonster[1];
            instance.MonstersCount = 0;
            instance.MonstersLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.MonstersAdd(Packet_ServerMonsterSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonsters DeserializeLengthDelimited(CitoStream stream, Packet_ServerMonsters instance)
    {
        if (instance.Monsters == null)
        {
            instance.Monsters = new Packet_ServerMonster[1];
            instance.MonstersCount = 0;
            instance.MonstersLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.MonstersAdd(Packet_ServerMonsterSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonsters DeserializeLength(CitoStream stream, int length, Packet_ServerMonsters instance)
    {
        if (instance.Monsters == null)
        {
            instance.Monsters = new Packet_ServerMonster[1];
            instance.MonstersCount = 0;
            instance.MonstersLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.MonstersAdd(Packet_ServerMonsterSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerMonsters instance)
    {
        if (instance.Monsters != null)
        {
            for(int k=0; k < instance.MonstersCount; k++)
            {
                Packet_ServerMonster i1 = instance.Monsters[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_ServerMonsterSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerMonsters instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerMonsters instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerMonsterSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerMonster DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerMonster instance = new Packet_ServerMonster();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerMonster DeserializeBuffer(byte[] buffer, int length, Packet_ServerMonster instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonster Deserialize(CitoStream stream, Packet_ServerMonster instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MonsterType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 4 Varint
            case 32:
                instance.Health = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonster DeserializeLengthDelimited(CitoStream stream, Packet_ServerMonster instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MonsterType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 4 Varint
            case 32:
                instance.Health = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerMonster DeserializeLength(CitoStream stream, int length, Packet_ServerMonster instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.Id = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.MonsterType = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                if (instance.PositionAndOrientation == null)
                    instance.PositionAndOrientation = Packet_PositionAndOrientationSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_PositionAndOrientationSerializer.DeserializeLengthDelimited(stream, instance.PositionAndOrientation);
                continue;
                // Field 4 Varint
            case 32:
                instance.Health = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerMonster instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.Id);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.MonsterType);
        if (instance.PositionAndOrientation != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_PositionAndOrientationSerializer.Serialize(ms3, instance.PositionAndOrientation);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Health);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerMonster instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerMonster instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerSeasonSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerSeason DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerSeason instance = new Packet_ServerSeason();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerSeason DeserializeBuffer(byte[] buffer, int length, Packet_ServerSeason instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSeason Deserialize(CitoStream stream, Packet_ServerSeason instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.Hour = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.DayNightCycleSpeedup = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Moon = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSeason DeserializeLengthDelimited(CitoStream stream, Packet_ServerSeason instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.Hour = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.DayNightCycleSpeedup = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Moon = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerSeason DeserializeLength(CitoStream stream, int length, Packet_ServerSeason instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 2 Varint
            case 16:
                instance.Hour = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.DayNightCycleSpeedup = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Moon = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerSeason instance)
    {
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Hour);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.DayNightCycleSpeedup);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Moon);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerSeason instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerSeason instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerDialogSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerDialog DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerDialog instance = new Packet_ServerDialog();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerDialog DeserializeBuffer(byte[] buffer, int length, Packet_ServerDialog instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDialog Deserialize(CitoStream stream, Packet_ServerDialog instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DialogId = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Dialog == null)
                    instance.Dialog = Packet_DialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDialog DeserializeLengthDelimited(CitoStream stream, Packet_ServerDialog instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DialogId = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Dialog == null)
                    instance.Dialog = Packet_DialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerDialog DeserializeLength(CitoStream stream, int length, Packet_ServerDialog instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.DialogId = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Dialog == null)
                    instance.Dialog = Packet_DialogSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogSerializer.DeserializeLengthDelimited(stream, instance.Dialog);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerDialog instance)
    {
        if (instance.DialogId != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.DialogId));
        }
        if (instance.Dialog != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_DialogSerializer.Serialize(ms2, instance.Dialog);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerDialog instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerDialog instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPingSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPing DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPing instance = new Packet_ServerPing();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPing DeserializeBuffer(byte[] buffer, int length, Packet_ServerPing instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPing Deserialize(CitoStream stream, Packet_ServerPing instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPing DeserializeLengthDelimited(CitoStream stream, Packet_ServerPing instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPing DeserializeLength(CitoStream stream, int length, Packet_ServerPing instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPing instance)
    {
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPing instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPing instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerPlayerPingSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerPlayerPing DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerPlayerPing instance = new Packet_ServerPlayerPing();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerPlayerPing DeserializeBuffer(byte[] buffer, int length, Packet_ServerPlayerPing instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerPing Deserialize(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Ping = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerPing DeserializeLengthDelimited(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Ping = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerPlayerPing DeserializeLength(CitoStream stream, int length, Packet_ServerPlayerPing instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ClientId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Ping = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        // Key for field: 1, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(8));
        ProtocolParser.WriteUInt64(stream,instance.ClientId);
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Ping);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerPlayerPing instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerPlayerPing instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ServerTranslatedStringSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_ServerTranslatedString DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_ServerTranslatedString instance = new Packet_ServerTranslatedString();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_ServerTranslatedString DeserializeBuffer(byte[] buffer, int length, Packet_ServerTranslatedString instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_ServerTranslatedString Deserialize(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Lang = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Translation = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerTranslatedString DeserializeLengthDelimited(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Lang = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Translation = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_ServerTranslatedString DeserializeLength(CitoStream stream, int length, Packet_ServerTranslatedString instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Lang = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 LengthDelimited
            case 26:
                instance.Translation = ProtocolParser.ReadString(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        if (instance.Lang != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Lang));
        }
        if (instance.Id != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Id));
        }
        if (instance.Translation != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Translation));
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_ServerTranslatedString instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_ServerTranslatedString instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_InventorySerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Inventory DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Inventory instance = new Packet_Inventory();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Inventory DeserializeBuffer(byte[] buffer, int length, Packet_Inventory instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Inventory Deserialize(CitoStream stream, Packet_Inventory instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new Packet_PositionItem[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        if (instance.RightHand == null)
        {
            instance.RightHand = new Packet_Item[1];
            instance.RightHandCount = 0;
            instance.RightHandLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 3 LengthDelimited
            case 26:
                if (instance.MainArmor == null)
                    instance.MainArmor = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.MainArmor);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.Boots == null)
                    instance.Boots = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Boots);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Helmet == null)
                    instance.Helmet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Helmet);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Gauntlet == null)
                    instance.Gauntlet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Gauntlet);
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ItemsAdd(Packet_PositionItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.DragDropItem == null)
                    instance.DragDropItem = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.DragDropItem);
                continue;
                // Field 9 LengthDelimited
            case 74:
                // repeated
                instance.RightHandAdd(Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Inventory DeserializeLengthDelimited(CitoStream stream, Packet_Inventory instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new Packet_PositionItem[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        if (instance.RightHand == null)
        {
            instance.RightHand = new Packet_Item[1];
            instance.RightHandCount = 0;
            instance.RightHandLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 3 LengthDelimited
            case 26:
                if (instance.MainArmor == null)
                    instance.MainArmor = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.MainArmor);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.Boots == null)
                    instance.Boots = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Boots);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Helmet == null)
                    instance.Helmet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Helmet);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Gauntlet == null)
                    instance.Gauntlet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Gauntlet);
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ItemsAdd(Packet_PositionItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.DragDropItem == null)
                    instance.DragDropItem = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.DragDropItem);
                continue;
                // Field 9 LengthDelimited
            case 74:
                // repeated
                instance.RightHandAdd(Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Inventory DeserializeLength(CitoStream stream, int length, Packet_Inventory instance)
    {
        if (instance.Items == null)
        {
            instance.Items = new Packet_PositionItem[1];
            instance.ItemsCount = 0;
            instance.ItemsLength = 1;
        }
        if (instance.RightHand == null)
        {
            instance.RightHand = new Packet_Item[1];
            instance.RightHandCount = 0;
            instance.RightHandLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 3 LengthDelimited
            case 26:
                if (instance.MainArmor == null)
                    instance.MainArmor = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.MainArmor);
                continue;
                // Field 4 LengthDelimited
            case 34:
                if (instance.Boots == null)
                    instance.Boots = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Boots);
                continue;
                // Field 5 LengthDelimited
            case 42:
                if (instance.Helmet == null)
                    instance.Helmet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Helmet);
                continue;
                // Field 6 LengthDelimited
            case 50:
                if (instance.Gauntlet == null)
                    instance.Gauntlet = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Gauntlet);
                continue;
                // Field 7 LengthDelimited
            case 58:
                // repeated
                instance.ItemsAdd(Packet_PositionItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 8 LengthDelimited
            case 66:
                if (instance.DragDropItem == null)
                    instance.DragDropItem = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.DragDropItem);
                continue;
                // Field 9 LengthDelimited
            case 74:
                // repeated
                instance.RightHandAdd(Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Inventory instance)
    {
        if (instance.MainArmor != null)
        {
            // Key for field: 3, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(26));
            CitoMemoryStream ms3 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms3, instance.MainArmor);
            // Length delimited byte array
            int ms3Length = ms3.Length();
            ProtocolParser.WriteUInt32_(stream, ms3Length);
            stream.Write(ms3.GetBuffer(), 0, ms3Length);
            
        }
        if (instance.Boots != null)
        {
            // Key for field: 4, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(34));
            CitoMemoryStream ms4 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms4, instance.Boots);
            // Length delimited byte array
            int ms4Length = ms4.Length();
            ProtocolParser.WriteUInt32_(stream, ms4Length);
            stream.Write(ms4.GetBuffer(), 0, ms4Length);
            
        }
        if (instance.Helmet != null)
        {
            // Key for field: 5, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(42));
            CitoMemoryStream ms5 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms5, instance.Helmet);
            // Length delimited byte array
            int ms5Length = ms5.Length();
            ProtocolParser.WriteUInt32_(stream, ms5Length);
            stream.Write(ms5.GetBuffer(), 0, ms5Length);
            
        }
        if (instance.Gauntlet != null)
        {
            // Key for field: 6, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(50));
            CitoMemoryStream ms6 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms6, instance.Gauntlet);
            // Length delimited byte array
            int ms6Length = ms6.Length();
            ProtocolParser.WriteUInt32_(stream, ms6Length);
            stream.Write(ms6.GetBuffer(), 0, ms6Length);
            
        }
        if (instance.Items != null)
        {
            for(int k=0; k < instance.ItemsCount; k++)
            {
                Packet_PositionItem i7 = instance.Items[k];
                // Key for field: 7, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(58));
                CitoMemoryStream ms7 = new CitoMemoryStream();
                Packet_PositionItemSerializer.Serialize(ms7, i7);
                // Length delimited byte array
                int ms7Length = ms7.Length();
                ProtocolParser.WriteUInt32_(stream, ms7Length);
                stream.Write(ms7.GetBuffer(), 0, ms7Length);
                
            }
        }
        if (instance.DragDropItem != null)
        {
            // Key for field: 8, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(66));
            CitoMemoryStream ms8 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms8, instance.DragDropItem);
            // Length delimited byte array
            int ms8Length = ms8.Length();
            ProtocolParser.WriteUInt32_(stream, ms8Length);
            stream.Write(ms8.GetBuffer(), 0, ms8Length);
            
        }
        if (instance.RightHand != null)
        {
            for(int k=0; k < instance.RightHandCount; k++)
            {
                Packet_Item i9 = instance.RightHand[k];
                // Key for field: 9, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(74));
                CitoMemoryStream ms9 = new CitoMemoryStream();
                Packet_ItemSerializer.Serialize(ms9, i9);
                // Length delimited byte array
                int ms9Length = ms9.Length();
                ProtocolParser.WriteUInt32_(stream, ms9Length);
                stream.Write(ms9.GetBuffer(), 0, ms9Length);
                
            }
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Inventory instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Inventory instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_ItemSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Item DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Item instance = new Packet_Item();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Item DeserializeBuffer(byte[] buffer, int length, Packet_Item instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Item Deserialize(CitoStream stream, Packet_Item instance)
    {
        instance.ItemClass = Packet_ItemClassEnum.Block;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ItemClass = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.ItemId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Item DeserializeLengthDelimited(CitoStream stream, Packet_Item instance)
    {
        instance.ItemClass = Packet_ItemClassEnum.Block;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ItemClass = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.ItemId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Item DeserializeLength(CitoStream stream, int length, Packet_Item instance)
    {
        instance.ItemClass = Packet_ItemClassEnum.Block;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 Varint
            case 8:
                instance.ItemClass = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                instance.ItemId = ProtocolParser.ReadString(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.BlockId = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.BlockCount = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Item instance)
    {
        if (instance.ItemClass != Packet_ItemClassEnum.Block)
        {
            // Key for field: 1, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(8));
            ProtocolParser.WriteUInt64(stream,instance.ItemClass);
        }
        if (instance.ItemId != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.ItemId));
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.BlockId);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.BlockCount);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Item instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Item instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_PositionItemSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_PositionItem DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_PositionItem instance = new Packet_PositionItem();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_PositionItem DeserializeBuffer(byte[] buffer, int length, Packet_PositionItem instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_PositionItem Deserialize(CitoStream stream, Packet_PositionItem instance)
    {
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Key_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Value_ == null)
                    instance.Value_ = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Value_);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionItem DeserializeLengthDelimited(CitoStream stream, Packet_PositionItem instance)
    {
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Key_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Value_ == null)
                    instance.Value_ = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Value_);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_PositionItem DeserializeLength(CitoStream stream, int length, Packet_PositionItem instance)
    {
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Key_ = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 LengthDelimited
            case 18:
                if (instance.Value_ == null)
                    instance.Value_ = Packet_ItemSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_ItemSerializer.DeserializeLengthDelimited(stream, instance.Value_);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_PositionItem instance)
    {
        if (instance.Key_ != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Key_));
        }
        if (instance.Value_ != null)
        {
            // Key for field: 2, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(18));
            CitoMemoryStream ms2 = new CitoMemoryStream();
            Packet_ItemSerializer.Serialize(ms2, instance.Value_);
            // Length delimited byte array
            int ms2Length = ms2.Length();
            ProtocolParser.WriteUInt32_(stream, ms2Length);
            stream.Write(ms2.GetBuffer(), 0, ms2Length);
            
        }
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_PositionItem instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_PositionItem instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_DialogSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Dialog DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Dialog instance = new Packet_Dialog();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Dialog DeserializeBuffer(byte[] buffer, int length, Packet_Dialog instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Dialog Deserialize(CitoStream stream, Packet_Dialog instance)
    {
        if (instance.Widgets == null)
        {
            instance.Widgets = new Packet_Widget[1];
            instance.WidgetsCount = 0;
            instance.WidgetsLength = 1;
        }
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WidgetsAdd(Packet_WidgetSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 Varint
            case 16:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsModal = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Dialog DeserializeLengthDelimited(CitoStream stream, Packet_Dialog instance)
    {
        if (instance.Widgets == null)
        {
            instance.Widgets = new Packet_Widget[1];
            instance.WidgetsCount = 0;
            instance.WidgetsLength = 1;
        }
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WidgetsAdd(Packet_WidgetSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 Varint
            case 16:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsModal = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Dialog DeserializeLength(CitoStream stream, int length, Packet_Dialog instance)
    {
        if (instance.Widgets == null)
        {
            instance.Widgets = new Packet_Widget[1];
            instance.WidgetsCount = 0;
            instance.WidgetsLength = 1;
        }
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                // repeated
                instance.WidgetsAdd(Packet_WidgetSerializer.DeserializeLengthDelimitedNew(stream));
                continue;
                // Field 2 Varint
            case 16:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.IsModal = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Dialog instance)
    {
        if (instance.Widgets != null)
        {
            for(int k=0; k < instance.WidgetsCount; k++)
            {
                Packet_Widget i1 = instance.Widgets[k];
                // Key for field: 1, LengthDelimited
                stream.WriteByte(ProtoPlatform.IntToByte(10));
                CitoMemoryStream ms1 = new CitoMemoryStream();
                Packet_WidgetSerializer.Serialize(ms1, i1);
                // Length delimited byte array
                int ms1Length = ms1.Length();
                ProtocolParser.WriteUInt32_(stream, ms1Length);
                stream.Write(ms1.GetBuffer(), 0, ms1Length);
                
            }
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Width);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.Height_);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.IsModal);
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Dialog instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Dialog instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_WidgetSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_Widget DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_Widget instance = new Packet_Widget();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_Widget DeserializeBuffer(byte[] buffer, int length, Packet_Widget instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_Widget Deserialize(CitoStream stream, Packet_Widget instance)
    {
        instance.Type = Packet_WidgetTypeEnum.Image;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Click = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ClickKey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.Image = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Color = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Font == null)
                    instance.Font = Packet_DialogFontSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogFontSerializer.DeserializeLengthDelimited(stream, instance.Font);
                continue;
                // Field 12 Varint
            case 96:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Widget DeserializeLengthDelimited(CitoStream stream, Packet_Widget instance)
    {
        instance.Type = Packet_WidgetTypeEnum.Image;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Click = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ClickKey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.Image = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Color = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Font == null)
                    instance.Font = Packet_DialogFontSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogFontSerializer.DeserializeLengthDelimited(stream, instance.Font);
                continue;
                // Field 12 Varint
            case 96:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_Widget DeserializeLength(CitoStream stream, int length, Packet_Widget instance)
    {
        instance.Type = Packet_WidgetTypeEnum.Image;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.Id = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.Click = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.X = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 4 Varint
            case 32:
                instance.Y = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 5 Varint
            case 40:
                instance.Width = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 6 Varint
            case 48:
                instance.Height_ = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 7 LengthDelimited
            case 58:
                instance.Text = ProtocolParser.ReadString(stream);
                continue;
                // Field 8 Varint
            case 64:
                instance.ClickKey = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 9 LengthDelimited
            case 74:
                instance.Image = ProtocolParser.ReadString(stream);
                continue;
                // Field 10 Varint
            case 80:
                instance.Color = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 11 LengthDelimited
            case 90:
                if (instance.Font == null)
                    instance.Font = Packet_DialogFontSerializer.DeserializeLengthDelimitedNew(stream);
                else
                    Packet_DialogFontSerializer.DeserializeLengthDelimited(stream, instance.Font);
                continue;
                // Field 12 Varint
            case 96:
                instance.Type = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_Widget instance)
    {
        if (instance.Id != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Id));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.Click);
        // Key for field: 3, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(24));
        ProtocolParser.WriteUInt64(stream,instance.X);
        // Key for field: 4, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(32));
        ProtocolParser.WriteUInt64(stream,instance.Y);
        // Key for field: 5, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(40));
        ProtocolParser.WriteUInt64(stream,instance.Width);
        // Key for field: 6, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(48));
        ProtocolParser.WriteUInt64(stream,instance.Height_);
        if (instance.Text != null)
        {
            // Key for field: 7, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(58));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Text));
        }
        // Key for field: 8, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(64));
        ProtocolParser.WriteUInt64(stream,instance.ClickKey);
        if (instance.Image != null)
        {
            // Key for field: 9, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(74));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.Image));
        }
        // Key for field: 10, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(80));
        ProtocolParser.WriteUInt64(stream,instance.Color);
        if (instance.Font != null)
        {
            // Key for field: 11, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(90));
            CitoMemoryStream ms11 = new CitoMemoryStream();
            Packet_DialogFontSerializer.Serialize(ms11, instance.Font);
            // Length delimited byte array
            int ms11Length = ms11.Length();
            ProtocolParser.WriteUInt32_(stream, ms11Length);
            stream.Write(ms11.GetBuffer(), 0, ms11Length);
            
        }
        if (instance.Type != Packet_WidgetTypeEnum.Image)
        {
            // Key for field: 12, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(96));
            ProtocolParser.WriteUInt64(stream,instance.Type);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_Widget instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_Widget instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

public class Packet_DialogFontSerializer
{
    /// <summary>Helper: create a new instance to deserializing into</summary>
    public static Packet_DialogFont DeserializeLengthDelimitedNew(CitoStream stream)
    {
        Packet_DialogFont instance = new Packet_DialogFont();
        DeserializeLengthDelimited(stream, instance);
        return instance;
    }
    
    /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
    public static Packet_DialogFont DeserializeBuffer(byte[] buffer, int length, Packet_DialogFont instance)
    {
        CitoMemoryStream ms = CitoMemoryStream.Create(buffer, length);
            Deserialize(ms, instance);
        return instance;
    }
    
    /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
    public static Packet_DialogFont Deserialize(CitoStream stream, Packet_DialogFont instance)
    {
        instance.FontStyle = Packet_DialogFontStyleEnum.Regular;
        while (true)
        {
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                break;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.FamilyName = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SizeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FontStyle = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_DialogFont DeserializeLengthDelimited(CitoStream stream, Packet_DialogFont instance)
    {
        instance.FontStyle = Packet_DialogFontStyleEnum.Regular;
        int limit = ProtocolParser.ReadUInt32(stream);
        limit += stream.Position();
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.FamilyName = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SizeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FontStyle = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
    public static Packet_DialogFont DeserializeLength(CitoStream stream, int length, Packet_DialogFont instance)
    {
        instance.FontStyle = Packet_DialogFontStyleEnum.Regular;
        int limit = stream.Position() + length;
        while (true)
        {
            if (stream.Position() >= limit)
            {
                if(stream.Position() == limit)
                    break;
                else
                    //throw new InvalidOperationException("Read past max limit");
                    return null;
            }
            int keyByte = stream.ReadByte();
            if (keyByte == -1)
                //throw new System.IO.EndOfStreamException();
                return null;
            // Optimized reading of known fields with field ID < 16
            switch (keyByte)
            {
                // Field 1 LengthDelimited
            case 10:
                instance.FamilyName = ProtocolParser.ReadString(stream);
                continue;
                // Field 2 Varint
            case 16:
                instance.SizeFloat = ProtocolParser.ReadUInt64(stream);
                continue;
                // Field 3 Varint
            case 24:
                instance.FontStyle = ProtocolParser.ReadUInt64(stream);
                continue;
                default: break;
            }
            
            #if CITO
             Key key = ProtocolParser.ReadKey_(keyByte.LowByte, stream);
            #else
             Key key = ProtocolParser.ReadKey_((byte)keyByte, stream);
            #endif
            
            // Reading field ID > 16 and unknown field ID/wire type combinations
            switch (key.GetField())
            {
            case 0:
                //throw new InvalidDataException("Invalid field id: 0, something went wrong in the stream");
                return null;
            default:
                ProtocolParser.SkipKey(stream, key);
                break;
            }
        }
        
        return instance;
    }
    
    /// <summary>Serialize the instance into the stream</summary>
    public static void Serialize(CitoStream stream, Packet_DialogFont instance)
    {
        if (instance.FamilyName != null)
        {
            // Key for field: 1, LengthDelimited
            stream.WriteByte(ProtoPlatform.IntToByte(10));
            ProtocolParser.WriteBytes(stream, ProtoPlatform.StringToBytes(instance.FamilyName));
        }
        // Key for field: 2, Varint
        stream.WriteByte(ProtoPlatform.IntToByte(16));
        ProtocolParser.WriteUInt64(stream,instance.SizeFloat);
        if (instance.FontStyle != Packet_DialogFontStyleEnum.Regular)
        {
            // Key for field: 3, Varint
            stream.WriteByte(ProtoPlatform.IntToByte(24));
            ProtocolParser.WriteUInt64(stream,instance.FontStyle);
        }
    }
    
    /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
    public static byte[] SerializeToBytes(Packet_DialogFont instance)
    {
        CitoMemoryStream ms = new CitoMemoryStream();
        Serialize(ms, instance);
        return ms.ToArray();
    }
    /// <summary>Helper: Serialize with a varint length prefix</summary>
    public static void SerializeLengthDelimited(CitoStream stream, Packet_DialogFont instance)
    {
        byte[] data = SerializeToBytes(instance);
        ProtocolParser.WriteUInt32_(stream, ProtoPlatform.ArrayLength(data));
        stream.Write(data, 0, ProtoPlatform.ArrayLength(data));
    }
}

